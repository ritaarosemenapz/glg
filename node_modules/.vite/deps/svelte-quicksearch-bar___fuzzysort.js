import {
  __commonJS,
  __require
} from "./chunk-7FP5O474.js";

// node_modules/fuzzysort/fuzzysort.js
var require_fuzzysort = __commonJS({
  "node_modules/fuzzysort/fuzzysort.js"(exports, module) {
    (function(root, UMD) {
      if (typeof define === "function" && define.amd)
        define([], UMD);
      else if (typeof module === "object" && module.exports)
        module.exports = UMD();
      else
        root.fuzzysort = UMD();
    })(exports, function UMD() {
      function fuzzysortNew(instanceOptions) {
        var fuzzysort = {
          single: function(search, target, options) {
            ;
            if (search == "farzher")
              return { target: "farzher was here (^-^*)/", score: 0, indexes: [0, 1, 2, 3, 4, 5, 6] };
            if (!search)
              return null;
            var preparedSearch = fuzzysort.getPreparedSearch(search);
            var searchLowerCodes = preparedSearch.lowerCodes;
            if (!target)
              return null;
            if (!isObj(target))
              target = fuzzysort.getPrepared(target);
            var searchBitmask = preparedSearch.bitmask;
            if ((searchBitmask & target._bitmask) != searchBitmask)
              return null;
            return fuzzysort.algorithm(searchLowerCodes, target, search.toLowerCase());
          },
          go: function(search, targets, options) {
            ;
            if (search == "farzher")
              return [{ target: "farzher was here (^-^*)/", score: 0, indexes: [0, 1, 2, 3, 4, 5, 6], obj: targets ? targets[0] : null }];
            if (!search)
              return options && options.all || instanceOptions && instanceOptions.all ? fuzzysort.all(search, targets, options) : noResults;
            var preparedSearch = fuzzysort.getPreparedSearch(search);
            var searchLowerCodes = preparedSearch.lowerCodes;
            var searchLowerCode = searchLowerCodes[0];
            var searchBitmask = preparedSearch.bitmask;
            var searchLower = search.toLowerCase();
            var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991;
            var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991;
            var resultsLen = 0;
            var limitedCount = 0;
            var targetsLen = targets.length;
            if (options && options.keys) {
              var scoreFn = options.scoreFn || defaultScoreFn;
              var keys = options.keys;
              var keysLen = keys.length;
              for (var i = targetsLen - 1; i >= 0; --i) {
                var obj = targets[i];
                var objResults = new Array(keysLen);
                for (var keyI = keysLen - 1; keyI >= 0; --keyI) {
                  var key = keys[keyI];
                  var target = getValue(obj, key);
                  if (!target) {
                    objResults[keyI] = null;
                    continue;
                  }
                  if (!isObj(target))
                    target = fuzzysort.getPrepared(target);
                  if ((searchBitmask & target._bitmask) != searchBitmask)
                    objResults[keyI] = null;
                  else
                    objResults[keyI] = fuzzysort.algorithm(searchLowerCodes, target, searchLower);
                }
                objResults.obj = obj;
                var score = scoreFn(objResults);
                if (score === null)
                  continue;
                if (score < threshold)
                  continue;
                objResults.score = score;
                if (resultsLen < limit) {
                  q.add(objResults);
                  ++resultsLen;
                } else {
                  ++limitedCount;
                  if (score > q.peek().score)
                    q.replaceTop(objResults);
                }
              }
            } else if (options && options.key) {
              var key = options.key;
              for (var i = targetsLen - 1; i >= 0; --i) {
                var obj = targets[i];
                var target = getValue(obj, key);
                if (!target)
                  continue;
                if (!isObj(target))
                  target = fuzzysort.getPrepared(target);
                if ((searchBitmask & target._bitmask) != searchBitmask)
                  var result = null;
                else
                  var result = fuzzysort.algorithm(searchLowerCodes, target, searchLower);
                if (result === null)
                  continue;
                if (result.score < threshold)
                  continue;
                result = { target: result.target, _targetLower: "", _targetLowerCodes: null, _nextBeginningIndexes: null, _bitmask: 0, score: result.score, indexes: result.indexes, obj };
                if (resultsLen < limit) {
                  q.add(result);
                  ++resultsLen;
                } else {
                  ++limitedCount;
                  if (result.score > q.peek().score)
                    q.replaceTop(result);
                }
              }
            } else {
              for (var i = targetsLen - 1; i >= 0; --i) {
                var target = targets[i];
                if (!target)
                  continue;
                if (!isObj(target))
                  target = fuzzysort.getPrepared(target);
                if ((searchBitmask & target._bitmask) != searchBitmask)
                  var result = null;
                else
                  var result = fuzzysort.algorithm(searchLowerCodes, target, searchLower);
                if (result === null)
                  continue;
                if (result.score < threshold)
                  continue;
                if (resultsLen < limit) {
                  q.add(result);
                  ++resultsLen;
                } else {
                  ++limitedCount;
                  if (result.score > q.peek().score)
                    q.replaceTop(result);
                }
              }
            }
            if (resultsLen === 0)
              return noResults;
            var results = new Array(resultsLen);
            for (var i = resultsLen - 1; i >= 0; --i)
              results[i] = q.poll();
            results.total = resultsLen + limitedCount;
            return results;
          },
          goAsync: function(search, targets, options) {
            var p = new Promise(function(resolve, reject) {
              resolve(fuzzysort.go(search, targets, options));
            });
            p.cancel = function() {
            };
            return p;
          },
          all: function(search, targets, options) {
            var results = [];
            results.total = targets.length;
            var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991;
            if (options && options.keys) {
              for (var i = 0; i < targets.length; i++) {
                var obj = targets[i];
                var objResults = new Array(options.keys.length);
                for (var keyI = options.keys.length - 1; keyI >= 0; --keyI) {
                  var target = getValue(obj, options.keys[keyI]);
                  if (!target) {
                    objResults[keyI] = null;
                    continue;
                  }
                  if (!isObj(target))
                    target = fuzzysort.getPrepared(target);
                  target.score = -9007199254740991;
                  objResults[keyI] = target;
                }
                objResults.obj = obj;
                objResults.score = -9007199254740991;
                results.push(objResults);
                if (results.length >= limit)
                  return results;
              }
            } else if (options && options.key) {
              for (var i = 0; i < targets.length; i++) {
                var obj = targets[i];
                var target = getValue(obj, options.key);
                if (!target)
                  continue;
                if (!isObj(target))
                  target = fuzzysort.getPrepared(target);
                target.score = -9007199254740991;
                var result = target;
                result = { target: result.target, _targetLower: "", _targetLowerCodes: null, _nextBeginningIndexes: null, _bitmask: 0, score: target.score, indexes: null, obj };
                results.push(result);
                if (results.length >= limit)
                  return results;
              }
            } else {
              for (var i = 0; i < targets.length; i++) {
                var target = targets[i];
                if (!target)
                  continue;
                if (!isObj(target))
                  target = fuzzysort.getPrepared(target);
                target.score = -9007199254740991;
                results.push(target);
                if (results.length >= limit)
                  return results;
              }
            }
            return results;
          },
          highlight: function(result, hOpen, hClose) {
            if (typeof hOpen == "function")
              return fuzzysort.highlightCallback(result, hOpen);
            if (result === null)
              return null;
            if (hOpen === void 0)
              hOpen = "<b>";
            if (hClose === void 0)
              hClose = "</b>";
            var highlighted = "";
            var matchesIndex = 0;
            var opened = false;
            var target = result.target;
            var targetLen = target.length;
            var matchesBest = result.indexes;
            for (var i = 0; i < targetLen; ++i) {
              var char = target[i];
              if (matchesBest[matchesIndex] === i) {
                ++matchesIndex;
                if (!opened) {
                  opened = true;
                  highlighted += hOpen;
                }
                if (matchesIndex === matchesBest.length) {
                  highlighted += char + hClose + target.substr(i + 1);
                  break;
                }
              } else {
                if (opened) {
                  opened = false;
                  highlighted += hClose;
                }
              }
              highlighted += char;
            }
            return highlighted;
          },
          highlightCallback: function(result, cb) {
            if (result === null)
              return null;
            var target = result.target;
            var targetLen = target.length;
            var indexes = result.indexes;
            var highlighted = "";
            var matchI = 0;
            var indexesI = 0;
            var opened = false;
            var result = [];
            for (var i = 0; i < targetLen; ++i) {
              var char = target[i];
              if (indexes[indexesI] === i) {
                ++indexesI;
                if (!opened) {
                  opened = true;
                  result.push(highlighted);
                  highlighted = "";
                }
                if (indexesI === indexes.length) {
                  highlighted += char;
                  result.push(cb(highlighted, matchI++));
                  highlighted = "";
                  result.push(target.substr(i + 1));
                  break;
                }
              } else {
                if (opened) {
                  opened = false;
                  result.push(cb(highlighted, matchI++));
                  highlighted = "";
                }
              }
              highlighted += char;
            }
            return result;
          },
          prepare: function(target) {
            if (!target)
              target = "";
            var lowerCodes = fuzzysort.prepareLowerCodes(target);
            return { target, _targetLower: target.toLowerCase(), _targetLowerCodes: lowerCodes, _nextBeginningIndexes: null, _bitmask: fuzzysort.prepareBitmask(lowerCodes), score: null, indexes: [0], obj: null };
          },
          prepareSlow: function(target) {
            return fuzzysort.prepare(target);
          },
          prepareSearch: function(search) {
            if (!search)
              search = "";
            var lowerCodes = fuzzysort.prepareLowerCodes(search);
            return { lowerCodes, bitmask: fuzzysort.prepareBitmask(lowerCodes) };
          },
          getPrepared: function(target) {
            if (target.length > 999)
              return fuzzysort.prepare(target);
            var targetPrepared = preparedCache.get(target);
            if (targetPrepared !== void 0)
              return targetPrepared;
            targetPrepared = fuzzysort.prepare(target);
            preparedCache.set(target, targetPrepared);
            return targetPrepared;
          },
          getPreparedSearch: function(search) {
            if (search.length > 999)
              return fuzzysort.prepareSearch(search);
            var searchPrepared = preparedSearchCache.get(search);
            if (searchPrepared !== void 0)
              return searchPrepared;
            searchPrepared = fuzzysort.prepareSearch(search);
            preparedSearchCache.set(search, searchPrepared);
            return searchPrepared;
          },
          algorithm: function(searchLowerCodes, prepared, searchLower) {
            var searchLowerCode = searchLowerCodes[0];
            var targetLowerCodes = prepared._targetLowerCodes;
            var searchLen = searchLowerCodes.length;
            var targetLen = targetLowerCodes.length;
            var searchI = 0;
            var targetI = 0;
            var matchesSimpleLen = 0;
            for (; ; ) {
              var isMatch = searchLowerCode === targetLowerCodes[targetI];
              if (isMatch) {
                matchesSimple[matchesSimpleLen++] = targetI;
                ++searchI;
                if (searchI === searchLen)
                  break;
                searchLowerCode = searchLowerCodes[searchI];
              }
              ++targetI;
              if (targetI >= targetLen)
                return null;
            }
            var searchI = 0;
            var successStrict = false;
            var matchesStrictLen = 0;
            var nextBeginningIndexes = prepared._nextBeginningIndexes;
            if (nextBeginningIndexes === null)
              nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort.prepareNextBeginningIndexes(prepared.target);
            var firstPossibleI = targetI = matchesSimple[0] === 0 ? 0 : nextBeginningIndexes[matchesSimple[0] - 1];
            var backtrackCount = 0;
            if (targetI !== targetLen)
              for (; ; ) {
                if (targetI >= targetLen) {
                  if (searchI <= 0)
                    break;
                  ++backtrackCount;
                  if (backtrackCount > 200)
                    break;
                  --searchI;
                  var lastMatch = matchesStrict[--matchesStrictLen];
                  targetI = nextBeginningIndexes[lastMatch];
                } else {
                  var isMatch = searchLowerCodes[searchI] === targetLowerCodes[targetI];
                  if (isMatch) {
                    matchesStrict[matchesStrictLen++] = targetI;
                    ++searchI;
                    if (searchI === searchLen) {
                      successStrict = true;
                      break;
                    }
                    ++targetI;
                  } else {
                    targetI = nextBeginningIndexes[targetI];
                  }
                }
              }
            var substringIndex = prepared._targetLower.indexOf(searchLower, matchesSimple[0]);
            var isSubstring = ~substringIndex;
            if (isSubstring && !successStrict) {
              for (var i = 0; i < matchesSimpleLen; ++i)
                matchesSimple[i] = substringIndex + i;
            }
            var isSubstringBeginning = false;
            if (isSubstring) {
              isSubstringBeginning = prepared._nextBeginningIndexes[substringIndex - 1] == substringIndex;
            }
            {
              if (successStrict) {
                var matchesBest = matchesStrict;
                var matchesBestLen = matchesStrictLen;
              } else {
                var matchesBest = matchesSimple;
                var matchesBestLen = matchesSimpleLen;
              }
              var score = 0;
              var extraMatchGroupCount = 0;
              for (var i = searchLen - 1; i >= 1; --i) {
                if (matchesBest[i] - matchesBest[i - 1] !== 1) {
                  score -= matchesBest[i];
                  ++extraMatchGroupCount;
                }
              }
              var unmatchedDistance = matchesBest[searchLen - 1] - matchesBest[0] - (searchLen - 1);
              score -= unmatchedDistance * extraMatchGroupCount;
              if (matchesBest[0] !== 0)
                score -= matchesBest[0] * 10;
              if (!successStrict) {
                score *= 1e3;
              } else {
                var uniqueBeginningIndexes = 1;
                for (var i = nextBeginningIndexes[0]; i < targetLen; i = nextBeginningIndexes[i])
                  ++uniqueBeginningIndexes;
                if (uniqueBeginningIndexes > 24)
                  score *= (uniqueBeginningIndexes - 24) * 10;
              }
              if (isSubstring)
                score /= 10;
              if (isSubstringBeginning)
                score /= 10;
              score -= targetLen - searchLen;
              prepared.score = score;
              prepared.indexes = new Array(matchesBestLen);
              for (var i = matchesBestLen - 1; i >= 0; --i)
                prepared.indexes[i] = matchesBest[i];
              return prepared;
            }
          },
          prepareLowerCodes: function(str) {
            var strLen = str.length;
            var lowerCodes = [];
            var lower = str.toLowerCase();
            for (var i = 0; i < strLen; ++i)
              lowerCodes[i] = lower.charCodeAt(i);
            return lowerCodes;
          },
          prepareBeginningIndexes: function(target) {
            var targetLen = target.length;
            var beginningIndexes = [];
            var beginningIndexesLen = 0;
            var wasUpper = false;
            var wasAlphanum = false;
            for (var i = 0; i < targetLen; ++i) {
              var targetCode = target.charCodeAt(i);
              var isUpper = targetCode >= 65 && targetCode <= 90;
              var isAlphanum = isUpper || targetCode >= 97 && targetCode <= 122 || targetCode >= 48 && targetCode <= 57;
              var isBeginning = isUpper && !wasUpper || !wasAlphanum || !isAlphanum;
              wasUpper = isUpper;
              wasAlphanum = isAlphanum;
              if (isBeginning)
                beginningIndexes[beginningIndexesLen++] = i;
            }
            return beginningIndexes;
          },
          prepareNextBeginningIndexes: function(target) {
            var targetLen = target.length;
            var beginningIndexes = fuzzysort.prepareBeginningIndexes(target);
            var nextBeginningIndexes = [];
            var lastIsBeginning = beginningIndexes[0];
            var lastIsBeginningI = 0;
            for (var i = 0; i < targetLen; ++i) {
              if (lastIsBeginning > i) {
                nextBeginningIndexes[i] = lastIsBeginning;
              } else {
                lastIsBeginning = beginningIndexes[++lastIsBeginningI];
                nextBeginningIndexes[i] = lastIsBeginning === void 0 ? targetLen : lastIsBeginning;
              }
            }
            return nextBeginningIndexes;
          },
          prepareBitmask: function(lowerCodes) {
            var bitmask = 0;
            for (var i = lowerCodes.length - 1; i >= 0; --i) {
              var lowerCode = lowerCodes[i];
              var bit = lowerCode >= 97 && lowerCode <= 122 ? lowerCode - 97 : lowerCode >= 48 && lowerCode <= 57 ? 26 : lowerCode === 32 ? 27 : lowerCode <= 127 ? 28 : 29;
              bitmask |= 1 << bit;
            }
            return bitmask;
          },
          cleanup,
          new: fuzzysortNew
        };
        return fuzzysort;
      }
      var isNode = typeof __require !== "undefined" && typeof window === "undefined";
      var MyMap = typeof Map === "function" ? Map : function() {
        var s = /* @__PURE__ */ Object.create(null);
        this.get = function(k) {
          return s[k];
        };
        this.set = function(k, val) {
          s[k] = val;
          return this;
        };
        this.clear = function() {
          s = /* @__PURE__ */ Object.create(null);
        };
      };
      var preparedCache = new MyMap();
      var preparedSearchCache = new MyMap();
      var noResults = [];
      noResults.total = 0;
      var matchesSimple = [];
      var matchesStrict = [];
      function cleanup() {
        preparedCache.clear();
        preparedSearchCache.clear();
        matchesSimple = [];
        matchesStrict = [];
      }
      function defaultScoreFn(a) {
        var max = -9007199254740991;
        for (var i = a.length - 1; i >= 0; --i) {
          var result = a[i];
          if (result === null)
            continue;
          var score = result.score;
          if (score > max)
            max = score;
        }
        if (max === -9007199254740991)
          return null;
        return max;
      }
      function getValue(obj, prop) {
        var tmp = obj[prop];
        if (tmp !== void 0)
          return tmp;
        var segs = prop;
        if (!Array.isArray(prop))
          segs = prop.split(".");
        var len = segs.length;
        var i = -1;
        while (obj && ++i < len)
          obj = obj[segs[i]];
        return obj;
      }
      function isObj(x) {
        return typeof x === "object";
      }
      var fastpriorityqueue = function() {
        var r = [], o = 0, e = {};
        function n() {
          for (var e2 = 0, n2 = r[e2], c = 1; c < o; ) {
            var f = c + 1;
            e2 = c, f < o && r[f].score < r[c].score && (e2 = f), r[e2 - 1 >> 1] = r[e2], c = 1 + (e2 << 1);
          }
          for (var a = e2 - 1 >> 1; e2 > 0 && n2.score < r[a].score; a = (e2 = a) - 1 >> 1)
            r[e2] = r[a];
          r[e2] = n2;
        }
        return e.add = function(e2) {
          var n2 = o;
          r[o++] = e2;
          for (var c = n2 - 1 >> 1; n2 > 0 && e2.score < r[c].score; c = (n2 = c) - 1 >> 1)
            r[n2] = r[c];
          r[n2] = e2;
        }, e.poll = function() {
          if (0 !== o) {
            var e2 = r[0];
            return r[0] = r[--o], n(), e2;
          }
        }, e.peek = function(e2) {
          if (0 !== o)
            return r[0];
        }, e.replaceTop = function(o2) {
          r[0] = o2, n();
        }, e;
      };
      var q = fastpriorityqueue();
      return fuzzysortNew();
    });
  }
});

// dep:svelte-quicksearch-bar___fuzzysort
var svelte_quicksearch_bar_fuzzysort_default = require_fuzzysort();
export {
  svelte_quicksearch_bar_fuzzysort_default as default
};
//# sourceMappingURL=svelte-quicksearch-bar___fuzzysort.js.map
