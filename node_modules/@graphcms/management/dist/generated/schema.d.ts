export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: any;
    DateTime: any;
};
export declare enum GraphQLCacheControlScope {
    Public = "PUBLIC",
    Private = "PRIVATE"
}
/** ### ASSETS: */
export declare type GraphQLIAssetConfig = {
    apiKey: Scalars["String"];
};
export declare type GraphQLFilestackSecurityOptions = {
    __typename?: "FilestackSecurityOptions";
    enabled: Scalars["Boolean"];
    auth?: Maybe<GraphQLFilestackSecurityAuthOptions>;
    globalExpires: Scalars["String"];
    stageOverrides: Array<GraphQLStageFilestackSecurityOptions>;
};
export declare type GraphQLFilestackSecurityAuthOptions = {
    __typename?: "FilestackSecurityAuthOptions";
    policy: Scalars["String"];
    signature: Scalars["String"];
};
export declare type GraphQLStageFilestackSecurityOptions = {
    __typename?: "StageFilestackSecurityOptions";
    stage: GraphQLStage;
    expires: Scalars["String"];
};
export declare type GraphQLFilestack = GraphQLIAssetConfig & {
    __typename?: "Filestack";
    apiKey: Scalars["String"];
    path: Scalars["String"];
    bucket: Scalars["String"];
    isManagedBucket: Scalars["Boolean"];
    security: GraphQLFilestackSecurityOptions;
};
export declare type GraphQLCommonFilestackSecurityOptions = {
    __typename?: "CommonFilestackSecurityOptions";
    enabled: Scalars["Boolean"];
    auth?: Maybe<GraphQLFilestackSecurityAuthOptions>;
};
export declare type GraphQLCommonFilestack = {
    __typename?: "CommonFilestack";
    apiKey: Scalars["String"];
    path: Scalars["String"];
    security: GraphQLCommonFilestackSecurityOptions;
};
export declare type GraphQLUpdateFilestackSecurityOptionsInput = {
    environmentId: Scalars["ID"];
    enabled?: Maybe<Scalars["Boolean"]>;
    globalExpires?: Maybe<Scalars["String"]>;
    stageOverrides?: Maybe<Array<GraphQLUpdateStageFilestackSecurityOptionsInput>>;
};
export declare type GraphQLUpdateStageFilestackSecurityOptionsInput = {
    stageId: Scalars["ID"];
    expires: Scalars["String"];
};
export declare type GraphQLUpdateFilestackSecurityOptionsPayload = {
    __typename?: "UpdateFilestackSecurityOptionsPayload";
    updatedEnvironment: GraphQLEnvironment;
    updatedFilestack: GraphQLFilestack;
};
export declare type GraphQLContentModel = {
    __typename?: "ContentModel";
    models: Array<GraphQLIModel>;
    components: Array<GraphQLComponent>;
    model: GraphQLIModel;
    component: GraphQLComponent;
    assetModel: GraphQLIModel;
    enumerations: Array<GraphQLEnumeration>;
    locales: Array<GraphQLLocale>;
    unions: Array<Maybe<GraphQLUnion>>;
    stages: Array<GraphQLStage>;
};
export declare type GraphQLContentModelModelsArgs = {
    includeSystemModels?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLContentModelComponentsArgs = {
    includeSystemComponents?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLContentModelModelArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLContentModelComponentArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLContentModelEnumerationsArgs = {
    includeSystemEnumerations?: Maybe<Scalars["Boolean"]>;
};
export declare enum GraphQLContentViewType {
    BuiltIn = "BUILT_IN",
    Public = "PUBLIC"
}
export declare enum GraphQLColumnOrderByDir {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type GraphQLOrderBy = {
    __typename?: "OrderBy";
    orderByField: GraphQLIField;
    orderDir: GraphQLColumnOrderByDir;
};
export declare type GraphQLContentView = {
    __typename?: "ContentView";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    model: GraphQLIModel;
    type: GraphQLContentViewType;
    isSystem: Scalars["Boolean"];
    orderBy?: Maybe<GraphQLOrderBy>;
    columns: Array<GraphQLContentViewColumn>;
    viewGroup: GraphQLViewGroup;
    position?: Maybe<Scalars["Int"]>;
    filters: Scalars["JSON"];
};
export declare type GraphQLCreateContentViewPayload = {
    __typename?: "CreateContentViewPayload";
    createdContentView: GraphQLContentView;
};
export declare type GraphQLUpdateContentViewPayload = {
    __typename?: "UpdateContentViewPayload";
    updatedContentView: GraphQLContentView;
};
export declare type GraphQLMoveContentViewPayload = {
    __typename?: "MoveContentViewPayload";
    movedContentView: GraphQLContentView;
    updatedViewGroups: Array<GraphQLViewGroup>;
};
export declare type GraphQLDeleteContentViewPayload = {
    __typename?: "DeleteContentViewPayload";
    deletedContentViewId: Scalars["ID"];
};
export declare type GraphQLContentViewColumn = {
    __typename?: "ContentViewColumn";
    id: Scalars["ID"];
    field: GraphQLIField;
    isVisible: Scalars["Boolean"];
    width?: Maybe<Scalars["Int"]>;
    position: Scalars["Int"];
};
export declare type GraphQLContentViewFilterInput = {
    skip?: Maybe<Scalars["Int"]>;
    limit?: Maybe<Scalars["Int"]>;
    search?: Maybe<Scalars["String"]>;
};
export declare type GraphQLOrderByInput = {
    orderByField: Scalars["ID"];
    orderDir: GraphQLColumnOrderByDir;
};
export declare type GraphQLContentViewColumnInput = {
    fieldId: Scalars["ID"];
    isVisible: Scalars["Boolean"];
    width?: Maybe<Scalars["Int"]>;
};
export declare type GraphQLCreateContentViewInput = {
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    modelId: Scalars["ID"];
    columns: Array<GraphQLContentViewColumnInput>;
    orderBy?: Maybe<GraphQLOrderByInput>;
    viewGroupId?: Maybe<Scalars["ID"]>;
    filters?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLUpdateContentViewInput = {
    id: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    columns: Array<GraphQLContentViewColumnInput>;
    orderBy?: Maybe<GraphQLOrderByInput>;
    viewGroupId?: Maybe<Scalars["ID"]>;
    filters?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLMoveContentViewInput = {
    id: Scalars["ID"];
    viewGroupId: Scalars["ID"];
    position: Scalars["Int"];
};
export declare type GraphQLDeleteContentViewInput = {
    id: Scalars["ID"];
};
export declare type GraphQLInvite = {
    __typename?: "Invite";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    expirationDate: Scalars["DateTime"];
    email: Scalars["String"];
    code: Scalars["String"];
    issuer?: Maybe<GraphQLMember>;
    project: GraphQLProject;
    acceptedAt?: Maybe<Scalars["DateTime"]>;
    roles: Array<GraphQLRole>;
    origin?: Maybe<Scalars["String"]>;
};
export declare type GraphQLSendInviteInput = {
    email: Scalars["String"];
    projectId: Scalars["ID"];
    roleIds: Array<Scalars["ID"]>;
    origin?: Maybe<Scalars["String"]>;
};
export declare type GraphQLRevokeInviteInput = {
    id: Scalars["ID"];
};
export declare type GraphQLAcceptInviteInput = {
    code: Scalars["String"];
};
export declare type GraphQLSendInvitePayload = {
    __typename?: "SendInvitePayload";
    invite: GraphQLInvite;
};
export declare type GraphQLRevokeInvitePayload = {
    __typename?: "RevokeInvitePayload";
    revokedInviteId: Scalars["ID"];
};
export declare type GraphQLAcceptInvitePayload = {
    __typename?: "AcceptInvitePayload";
    invite: GraphQLInvite;
};
export declare enum GraphQLLimitType {
    Roles = "ROLES",
    Locales = "LOCALES",
    Environments = "ENVIRONMENTS",
    Webhooks = "WEBHOOKS",
    Models = "MODELS",
    Records = "RECORDS",
    AssetTraffic = "ASSET_TRAFFIC",
    ApiOperations = "API_OPERATIONS",
    Seats = "SEATS",
    WorkflowSteps = "WORKFLOW_STEPS",
    Integrations = "INTEGRATIONS",
    Versions = "VERSIONS",
    VersionRetentionPeriod = "VERSION_RETENTION_PERIOD",
    ContentModels = "CONTENT_MODELS",
    ContentStages = "CONTENT_STAGES",
    AuditLogsRetentionPeriod = "AUDIT_LOGS_RETENTION_PERIOD",
    RemoteSources = "REMOTE_SOURCES",
    RemoteFields = "REMOTE_FIELDS",
    RemoteFieldsMaxExecutionTime = "REMOTE_FIELDS_MAX_EXECUTION_TIME",
    RemoteFieldsMaxResponseSize = "REMOTE_FIELDS_MAX_RESPONSE_SIZE",
    RemoteFieldsHttpWorkers = "REMOTE_FIELDS_HTTP_WORKERS",
    RateLimitPerSecond = "RATE_LIMIT_PER_SECOND",
    ContentPermissions = "CONTENT_PERMISSIONS",
    PermanentAuthTokens = "PERMANENT_AUTH_TOKENS",
    SchedulingPendingReleases = "SCHEDULING_PENDING_RELEASES",
    SchedulingPendingOperations = "SCHEDULING_PENDING_OPERATIONS",
    SchedulingOperationsInRelease = "SCHEDULING_OPERATIONS_IN_RELEASE"
}
export declare type GraphQLLimit = {
    __typename?: "Limit";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    name: Scalars["String"];
    type: GraphQLLimitType;
    amount?: Maybe<Scalars["Float"]>;
    addOnCode?: Maybe<Scalars["String"]>;
    plan: GraphQLPlan;
};
export declare type GraphQLMetaInfo = {
    __typename?: "MetaInfo";
    serverVersion: Scalars["String"];
};
export declare type GraphQLStats = {
    __typename?: "Stats";
    time: Scalars["DateTime"];
    value: Scalars["Float"];
};
export declare type GraphQLMetrics = {
    __typename?: "Metrics";
    /** The number of API operations */
    apiOperations: Array<GraphQLStats>;
    /** The asset traffic in Byte */
    assetTraffic: Array<GraphQLStats>;
    /** The number of used asset transformations */
    assetTransformations: Array<GraphQLStats>;
};
export declare type GraphQLMetricsApiOperationsArgs = {
    start: Scalars["DateTime"];
    end: Scalars["DateTime"];
    resolution: Scalars["Int"];
};
export declare type GraphQLMetricsAssetTrafficArgs = {
    start: Scalars["DateTime"];
    end: Scalars["DateTime"];
};
export declare type GraphQLMetricsAssetTransformationsArgs = {
    start: Scalars["DateTime"];
    end: Scalars["DateTime"];
};
export declare type GraphQLPaymentAccount = {
    __typename?: "PaymentAccount";
    id: Scalars["ID"];
    accountName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    isClosed: Scalars["Boolean"];
    isMain: Scalars["Boolean"];
    hostedPageUrl?: Maybe<Scalars["String"]>;
    hostedBillingUrl?: Maybe<Scalars["String"]>;
    accountManagementUrl?: Maybe<Scalars["String"]>;
    user: GraphQLIUser;
    paymentSubscriptions: Array<GraphQLPaymentSubscription>;
};
export declare type GraphQLPaymentAccountHostedPageUrlArgs = {
    planName: Scalars["String"];
    projectId: Scalars["ID"];
};
export declare type GraphQLStartTrialPayload = {
    __typename?: "StartTrialPayload";
    project: GraphQLProject;
};
export declare type GraphQLLeaveTrialPayload = {
    __typename?: "LeaveTrialPayload";
    project: GraphQLProject;
};
export declare type GraphQLBillingPeriod = {
    __typename?: "BillingPeriod";
    from: Scalars["DateTime"];
    to: Scalars["DateTime"];
};
export declare type GraphQLPaymentSubscription = {
    __typename?: "PaymentSubscription";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    renewsAt?: Maybe<Scalars["DateTime"]>;
    projects: Array<GraphQLProject>;
    identifier?: Maybe<Scalars["String"]>;
    paymentAccount: GraphQLPaymentAccount;
    plan: GraphQLPlan;
    billingPeriod: GraphQLBillingPeriod;
    isCanceled: Scalars["Boolean"];
};
export declare type GraphQLSwitchPaymentSubscriptionInput = {
    planName: Scalars["String"];
    subscriptionId: Scalars["ID"];
};
export declare type GraphQLSwitchPaymentSubscriptionPayload = {
    __typename?: "SwitchPaymentSubscriptionPayload";
    subscription: GraphQLPaymentSubscription;
    project: GraphQLProject;
};
export declare type GraphQLStartTrialInput = {
    projectId: Scalars["ID"];
    planId: Scalars["ID"];
};
export declare type GraphQLLeaveTrialInput = {
    projectId: Scalars["ID"];
};
/** ### TOKENS: */
export declare enum GraphQLPermanentAuthTokenAudience {
    ContentApi = "CONTENT_API",
    ManagementApi = "MANAGEMENT_API"
}
export declare type GraphQLPermanentAuthToken = {
    __typename?: "PermanentAuthToken";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    token: Scalars["String"];
    defaults: GraphQLPermanentAuthTokenDefaults;
    contentPermissions: Array<GraphQLIContentPermission>;
    managementPermissions: Array<GraphQLManagementPermission>;
};
export declare type GraphQLPermanentAuthTokenDefaults = {
    __typename?: "PermanentAuthTokenDefaults";
    stage: GraphQLStage;
};
export declare type GraphQLManagementPermission = {
    __typename?: "ManagementPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    description?: Maybe<Scalars["String"]>;
    action: GraphQLPermissionAction;
};
export declare type GraphQLCreatePermanentAuthTokenPayload = {
    __typename?: "CreatePermanentAuthTokenPayload";
    createdPermanentAuthToken: GraphQLPermanentAuthToken;
};
export declare type GraphQLUpdatePermanentAuthTokenPayload = {
    __typename?: "UpdatePermanentAuthTokenPayload";
    updatedPermanentAuthToken: GraphQLPermanentAuthToken;
};
export declare type GraphQLDeletePermanentAuthTokenPayload = {
    __typename?: "DeletePermanentAuthTokenPayload";
    deletedPermanentAuthTokenId: Scalars["ID"];
};
export declare enum GraphQLPermissionAction {
    /**
     * Project-level
     * Virtual permission used to perform a project ownership check
     */
    ProjectClone = "PROJECT_CLONE",
    ProjectUpdate = "PROJECT_UPDATE",
    /** Virtual permission used to perform a project ownership check */
    ProjectDelete = "PROJECT_DELETE",
    /** Virtual permission used to perform a project ownership check */
    ManagePayment = "MANAGE_PAYMENT",
    PlaygroundUse = "PLAYGROUND_USE",
    AuditLogsRead = "AUDIT_LOGS_READ",
    /** View Permissions that need to be moved to a new concept eventually */
    ViewTeamMemberSettings = "VIEW_TEAM_MEMBER_SETTINGS",
    ViewRolePermissionSettings = "VIEW_ROLE_PERMISSION_SETTINGS",
    ViewSchema = "VIEW_SCHEMA",
    /** Environments */
    EnvironmentCreate = "ENVIRONMENT_CREATE",
    EnvironmentRead = "ENVIRONMENT_READ",
    EnvironmentUpdate = "ENVIRONMENT_UPDATE",
    EnvironmentDelete = "ENVIRONMENT_DELETE",
    EnvironmentPromote = "ENVIRONMENT_PROMOTE",
    /** Models */
    ModelCreate = "MODEL_CREATE",
    ModelRead = "MODEL_READ",
    ModelUpdate = "MODEL_UPDATE",
    ModelDelete = "MODEL_DELETE",
    /** Components */
    ComponentCreate = "COMPONENT_CREATE",
    ComponentRead = "COMPONENT_READ",
    ComponentUpdate = "COMPONENT_UPDATE",
    ComponentDelete = "COMPONENT_DELETE",
    /** Locales */
    LocaleCreate = "LOCALE_CREATE",
    LocaleRead = "LOCALE_READ",
    LocaleUpdate = "LOCALE_UPDATE",
    LocaleDelete = "LOCALE_DELETE",
    /** Stages */
    StageCreate = "STAGE_CREATE",
    StageRead = "STAGE_READ",
    StageUpdate = "STAGE_UPDATE",
    StageDelete = "STAGE_DELETE",
    /** Enumerations */
    EnumerationCreate = "ENUMERATION_CREATE",
    EnumerationRead = "ENUMERATION_READ",
    EnumerationUpdate = "ENUMERATION_UPDATE",
    EnumerationDelete = "ENUMERATION_DELETE",
    /** Fields */
    FieldCreate = "FIELD_CREATE",
    FieldRead = "FIELD_READ",
    FieldUpdate = "FIELD_UPDATE",
    FieldDelete = "FIELD_DELETE",
    /** Remote Sources */
    RemoteSourceCreate = "REMOTE_SOURCE_CREATE",
    RemoteSourceRead = "REMOTE_SOURCE_READ",
    RemoteSourceUpdate = "REMOTE_SOURCE_UPDATE",
    RemoteSourceDelete = "REMOTE_SOURCE_DELETE",
    /** PATs */
    PatCreate = "PAT_CREATE",
    PatRead = "PAT_READ",
    PatUpdate = "PAT_UPDATE",
    PatDelete = "PAT_DELETE",
    /** Content Views */
    ContentviewCreate = "CONTENTVIEW_CREATE",
    ContentviewRead = "CONTENTVIEW_READ",
    ContentviewUpdate = "CONTENTVIEW_UPDATE",
    ContentviewSystemUpdate = "CONTENTVIEW_SYSTEM_UPDATE",
    ContentviewDelete = "CONTENTVIEW_DELETE",
    /** Project Storage Buckets */
    StorageBucketCreate = "STORAGE_BUCKET_CREATE",
    StorageBucketRead = "STORAGE_BUCKET_READ",
    StorageBucketUpdate = "STORAGE_BUCKET_UPDATE",
    StorageBucketDelete = "STORAGE_BUCKET_DELETE",
    /** Roles */
    RoleCreate = "ROLE_CREATE",
    RoleUpdate = "ROLE_UPDATE",
    RoleDelete = "ROLE_DELETE",
    /** Webhooks */
    WebhookCreate = "WEBHOOK_CREATE",
    WebhookRead = "WEBHOOK_READ",
    WebhookUpdate = "WEBHOOK_UPDATE",
    WebhookDelete = "WEBHOOK_DELETE",
    /** Users */
    UserInvite = "USER_INVITE",
    UserAssignrole = "USER_ASSIGNROLE",
    UserRemove = "USER_REMOVE",
    /** View Groups */
    ViewGroupCreate = "VIEW_GROUP_CREATE",
    ViewGroupRead = "VIEW_GROUP_READ",
    ViewGroupUpdate = "VIEW_GROUP_UPDATE",
    ViewGroupDelete = "VIEW_GROUP_DELETE",
    /**
     * deprecated!
     * Content (actual Content API permission)
     */
    ContentCreate = "CONTENT_CREATE",
    ContentRead = "CONTENT_READ",
    ContentUpdate = "CONTENT_UPDATE",
    ContentDelete = "CONTENT_DELETE",
    ContentPublish = "CONTENT_PUBLISH",
    ContentUpdatePublished = "CONTENT_UPDATE_PUBLISHED",
    /** Content Permissions */
    ContentPermissionCreate = "CONTENT_PERMISSION_CREATE",
    ContentPermissionRead = "CONTENT_PERMISSION_READ",
    ContentPermissionUpdate = "CONTENT_PERMISSION_UPDATE",
    ContentPermissionDelete = "CONTENT_PERMISSION_DELETE",
    /** Integration */
    IntegrationCreate = "INTEGRATION_CREATE",
    IntegrationRead = "INTEGRATION_READ",
    IntegrationUpdate = "INTEGRATION_UPDATE",
    IntegrationDelete = "INTEGRATION_DELETE",
    NetlifyTriggerBuild = "NETLIFY_TRIGGER_BUILD",
    VercelTriggerBuild = "VERCEL_TRIGGER_BUILD",
    /** Extension */
    ExtensionCreate = "EXTENSION_CREATE",
    ExtensionRead = "EXTENSION_READ",
    ExtensionUpdate = "EXTENSION_UPDATE",
    ExtensionDelete = "EXTENSION_DELETE",
    /** App */
    AppCreate = "APP_CREATE",
    AppUpdate = "APP_UPDATE",
    AppDelete = "APP_DELETE",
    /** App Installation */
    AppInstallationCreate = "APP_INSTALLATION_CREATE",
    AppInstallationUpdate = "APP_INSTALLATION_UPDATE",
    AppInstallationDelete = "APP_INSTALLATION_DELETE"
}
export declare type GraphQLPermanentAuthTokenDefaultsInput = {
    stage: Scalars["ID"];
};
export declare type GraphQLCreatePermanentAuthTokenInput = {
    environmentId: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    defaults?: Maybe<GraphQLPermanentAuthTokenDefaultsInput>;
    managementPermissionIds?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdatePermanentAuthTokenInput = {
    id: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    defaults?: Maybe<GraphQLPermanentAuthTokenDefaultsInput>;
    managementPermissionIds?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLDeletePermanentAuthTokenInput = {
    id: Scalars["ID"];
};
export declare type GraphQLUpdatePublicEndpointInput = {
    environmentId: Scalars["ID"];
    defaults?: Maybe<GraphQLUpdatePublicEndpointDefaultsInput>;
};
export declare type GraphQLUpdatePublicEndpointDefaultsInput = {
    stage: Scalars["ID"];
};
export declare type GraphQLUpdatePublicPermissionInput = {
    allowMutations: Scalars["Boolean"];
    allowQueriesOnStages: Array<Scalars["ID"]>;
};
export declare type GraphQLUpdatePublicPermissionsPayload = {
    __typename?: "UpdatePublicPermissionsPayload";
    environment: GraphQLEnvironment;
};
export declare type GraphQLPlan = {
    __typename?: "Plan";
    id: Scalars["ID"];
    name: Scalars["String"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    price: Scalars["Float"];
    isFree: Scalars["Boolean"];
    limits: Array<GraphQLLimit>;
    isSwitchable?: Maybe<Scalars["Boolean"]>;
    isEnterprise: Scalars["Boolean"];
    billingPeriodMonths: Scalars["Int"];
};
export declare type GraphQLPlanIsSwitchableArgs = {
    projectId: Scalars["ID"];
};
export declare type GraphQLAuditLogWhereInput = {
    timestamp?: Maybe<Scalars["DateTime"]>;
    timestamp_lt?: Maybe<Scalars["DateTime"]>;
    timestamp_gt?: Maybe<Scalars["DateTime"]>;
    timestamp_lte?: Maybe<Scalars["DateTime"]>;
    timestamp_gte?: Maybe<Scalars["DateTime"]>;
    triggeredBy?: Maybe<Scalars["String"]>;
    action?: Maybe<GraphQLAuditLogAction>;
    triggerType?: Maybe<GraphQLAuditLogTriggerType>;
    environmentName?: Maybe<Scalars["String"]>;
    entityId?: Maybe<Scalars["String"]>;
    resource?: Maybe<GraphQLAuditLogResource>;
};
export declare enum GraphQLAuditLogOrderByInput {
    TimestampAsc = "timestamp_ASC",
    TimestampDesc = "timestamp_DESC"
}
export declare enum GraphQLAuditLogResource {
    Project = "PROJECT",
    Environment = "ENVIRONMENT",
    Model = "MODEL",
    Stage = "STAGE",
    Locale = "LOCALE",
    Pat = "PAT",
    Enumeration = "ENUMERATION",
    Field = "FIELD",
    Content = "CONTENT",
    Webhook = "WEBHOOK",
    Member = "MEMBER",
    Role = "ROLE",
    Viewgroup = "VIEWGROUP",
    Contentview = "CONTENTVIEW",
    Extension = "EXTENSION",
    EnumerationValue = "ENUMERATION_VALUE",
    Invite = "INVITE",
    Component = "COMPONENT"
}
export declare enum GraphQLAuditLogAction {
    Create = "CREATE",
    Update = "UPDATE",
    Delete = "DELETE",
    Publish = "PUBLISH",
    Unpublish = "UNPUBLISH",
    Accept = "ACCEPT"
}
export declare enum GraphQLAuditLogTriggerType {
    User = "USER",
    Pat = "PAT",
    ThirdParty = "THIRD_PARTY",
    Open = "OPEN"
}
export declare type GraphQLAuditLogTriggeredBy = GraphQLPermanentAuthToken | GraphQLMember;
export declare type GraphQLAuditLog = {
    __typename?: "AuditLog";
    id: Scalars["String"];
    entityId?: Maybe<Scalars["String"]>;
    timestamp: Scalars["DateTime"];
    resource: GraphQLAuditLogResource;
    action: GraphQLAuditLogAction;
    environmentName?: Maybe<Scalars["String"]>;
    payload?: Maybe<Scalars["JSON"]>;
    triggeredBy?: Maybe<GraphQLAuditLogTriggeredBy>;
    triggerType: GraphQLAuditLogTriggerType;
};
export declare type GraphQLAuditLogsPayload = {
    __typename?: "AuditLogsPayload";
    logs: Array<GraphQLAuditLog>;
    total: Scalars["Float"];
};
export declare enum GraphQLLifecycleStepType {
    SchemaSetup = "SCHEMA_SETUP",
    ContentAdded = "CONTENT_ADDED",
    ExploreContentApi = "EXPLORE_CONTENT_API",
    ApiPermissionsSet = "API_PERMISSIONS_SET",
    ExternalTraffic = "EXTERNAL_TRAFFIC"
}
export declare type GraphQLLifecycleStep = {
    __typename?: "LifecycleStep";
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    done: Scalars["Boolean"];
    type: GraphQLLifecycleStepType;
};
export declare type GraphQLLifecycle = {
    __typename?: "Lifecycle";
    steps?: Maybe<Array<GraphQLLifecycleStep>>;
    progress: Scalars["Float"];
};
export declare type GraphQLMembersAggregate = {
    __typename?: "MembersAggregate";
    count: Scalars["Int"];
};
export declare type GraphQLPageInfo = {
    __typename?: "PageInfo";
    hasNextPage: Scalars["Boolean"];
    hasPreviousPage: Scalars["Boolean"];
    pageSize: Scalars["Int"];
};
export declare type GraphQLMembersConnection = {
    __typename?: "MembersConnection";
    pageInfo: GraphQLPageInfo;
    edges: Array<GraphQLMemberEdge>;
    aggregate: GraphQLMembersAggregate;
};
export declare type GraphQLMemberEdge = {
    __typename?: "MemberEdge";
    node: GraphQLMember;
};
export declare type GraphQLProject = {
    __typename?: "Project";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    picture?: Maybe<Scalars["String"]>;
    subscription: GraphQLPaymentSubscription;
    invites: Array<GraphQLInvite>;
    owner: GraphQLMember;
    /** Will be null if viewer is not a user */
    viewerAsMember?: Maybe<GraphQLMember>;
    region: GraphQLRegion;
    existingRoles: Array<GraphQLRole>;
    existingRole: GraphQLRole;
    environments: Array<GraphQLEnvironment>;
    environment: GraphQLEnvironment;
    /** List of all members of the given project */
    members: Array<GraphQLMember>;
    membersConnection: GraphQLMembersConnection;
    quotas: GraphQLQuota;
    lifecycle: GraphQLLifecycle;
    inTrial?: Maybe<Scalars["Boolean"]>;
    trialExpiresIn?: Maybe<Scalars["DateTime"]>;
    isCloning?: Maybe<Scalars["Boolean"]>;
    meta: Scalars["JSON"];
    auditLogs: GraphQLAuditLogsPayload;
    /** List all Permissions usable/assignable to roles in this project */
    availableManagementPermissions: Array<GraphQLManagementPermission>;
    cloningProjects: Array<GraphQLCloningProject>;
    /** if this is `null` it means the project is not publicly clone-able */
    publicCloneAccess?: Maybe<GraphQLPublicCloneAccess>;
};
export declare type GraphQLProjectExistingRoleArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLProjectEnvironmentArgs = {
    name: Scalars["String"];
};
export declare type GraphQLProjectMembersConnectionArgs = {
    skip?: Scalars["Int"];
    first?: Scalars["Int"];
};
export declare type GraphQLProjectAuditLogsArgs = {
    where?: Maybe<GraphQLAuditLogWhereInput>;
    limit?: Maybe<Scalars["Int"]>;
    skip?: Maybe<Scalars["Int"]>;
    orderBy?: Maybe<GraphQLAuditLogOrderByInput>;
};
export declare type GraphQLPublicCloneAccess = {
    __typename?: "PublicCloneAccess";
    id: Scalars["ID"];
    enabled: Scalars["Boolean"];
    includeContent: Scalars["Boolean"];
    includeWebhooks: Scalars["Boolean"];
};
export declare type GraphQLDeleteProjectPayload = {
    __typename?: "DeleteProjectPayload";
    deletedProjectId: Scalars["ID"];
};
export declare type GraphQLLeaveProjectPayload = {
    __typename?: "LeaveProjectPayload";
    leftProjectId: Scalars["ID"];
};
export declare type GraphQLTemplateResourceInput = {
    title: Scalars["String"];
    url: Scalars["String"];
};
export declare type GraphQLTechnologyStackInput = {
    image: Scalars["String"];
    title: Scalars["String"];
    url?: Maybe<Scalars["String"]>;
};
export declare type GraphQLUpsertTemplateInput = {
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQLUpsertTemplatePayload = {
    __typename?: "UpsertTemplatePayload";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQLMaxComplexityInput = {
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQLMaxComplexityPayload = {
    __typename?: "MaxComplexityPayload";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_UpdatePlanTrialInput = {
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_UpdatePlanTrialPayload = {
    __typename?: "_UpdatePlanTrialPayload";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_SwitchOwnerInput = {
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_SwitchOwnerPayload = {
    __typename?: "_SwitchOwnerPayload";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_ResetContentConfigInput = {
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_ResetContentConfigPayload = {
    __typename?: "_ResetContentConfigPayload";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_BookOverLimitInput = {
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_BookOverLimitAddonUsage = {
    __typename?: "_BookOverLimitAddonUsage";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_OverLimitProjectUsage = {
    __typename?: "_OverLimitProjectUsage";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_OverLimitProjectAddonsValues = {
    __typename?: "_OverLimitProjectAddonsValues";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_OverLimitProjectAddons = {
    __typename?: "_OverLimitProjectAddons";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_OverLimitProject = {
    __typename?: "_OverLimitProject";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQL_BookOverLimitPayload = {
    __typename?: "_BookOverLimitPayload";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQLLeaveProjectInput = {
    id: Scalars["ID"];
};
/** create project from a template */
export declare type GraphQLCreateProjectTemplateInput = {
    /** id of template (if it's marked as template) or id of a project you are an owner of */
    templateId: Scalars["ID"];
    /** Set to false to not include content */
    content?: Scalars["Boolean"];
    /** Set to true to include webhooks. If webhooks are included, they will be disabled initially in the created project. */
    webhooks?: Scalars["Boolean"];
};
/** clone project from a template */
export declare type GraphQLCloneProjectTemplateInput = {
    /** id of template (if it's marked as template) or id of a project you are an owner of */
    templateId: Scalars["ID"];
    /** Set to false to not include content */
    content?: Scalars["Boolean"];
    /** Set to true to include webhooks. If webhooks are included, they will be disabled initially in the cloned project. */
    webhooks?: Scalars["Boolean"];
};
export declare type GraphQLCloneProjectInput = {
    region: Scalars["String"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /** required to clone from a template or a project you are an owner of */
    template: GraphQLCloneProjectTemplateInput;
};
/** This is used to clone a project that someone made publicly clone-able. */
export declare type GraphQLClonePublicProjectInput = {
    region: Scalars["String"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /** Usually extracted from the public clone url. */
    publicCloneAccessId: Scalars["ID"];
};
export declare type GraphQLCreateProjectInput = {
    region: Scalars["String"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /** optional argument used for creating the project from a template or a project you are an owner of */
    template?: Maybe<GraphQLCreateProjectTemplateInput>;
};
export declare type GraphQLUpdatePublicCloneAccessInput = {
    enabled: Scalars["Boolean"];
    includeContent: Scalars["Boolean"];
    includeWebhooks: Scalars["Boolean"];
};
export declare type GraphQLUpdateProjectInput = {
    id: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    picture?: Maybe<Scalars["String"]>;
    publicCloneAccess?: Maybe<GraphQLUpdatePublicCloneAccessInput>;
};
export declare type GraphQLDeleteProjectInput = {
    id: Scalars["ID"];
};
export declare type GraphQLProgress = {
    __typename?: "Progress";
    current: Scalars["Float"];
    max?: Maybe<Scalars["Float"]>;
    percent?: Maybe<Scalars["Float"]>;
    estimate?: Maybe<Scalars["Float"]>;
};
export declare type GraphQLQuota = {
    __typename?: "Quota";
    apiOperations: GraphQLProgress;
    assetTraffic: GraphQLProgress;
    records: GraphQLProgress;
    seats: GraphQLProgress;
    environments: GraphQLProgress;
    roles: GraphQLProgress;
};
export declare type GraphQLEnvironmentLevelQuota = {
    __typename?: "EnvironmentLevelQuota";
    locales: GraphQLProgress;
    webhooks: GraphQLProgress;
    models: GraphQLProgress;
    stages: GraphQLProgress;
    contentPermissions: GraphQLProgress;
    remoteSources: GraphQLProgress;
};
export declare type GraphQLRegion = {
    __typename?: "Region";
    id: Scalars["String"];
    name: Scalars["String"];
    isBeta: Scalars["Boolean"];
    pingUrl?: Maybe<Scalars["String"]>;
    isReadOnly: Scalars["Boolean"];
};
export declare type GraphQLDeleteRolePayload = {
    __typename?: "DeleteRolePayload";
    deletedId: Scalars["ID"];
};
export declare type GraphQLRole = {
    __typename?: "Role";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    isDefault: Scalars["Boolean"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /**
     * Returns contentPermissions for a role.
     * Optionally filtered by environment.
     */
    contentPermissions: Array<GraphQLIContentPermission>;
    managementPermissions: Array<GraphQLManagementPermission>;
    /** List of all members that have at least this role */
    members: Array<GraphQLMember>;
    membersConnection: GraphQLMembersConnection;
};
export declare type GraphQLRoleContentPermissionsArgs = {
    environmentId?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLRoleMembersConnectionArgs = {
    skip?: Scalars["Int"];
    first?: Scalars["Int"];
};
export declare type GraphQLCreateRoleInput = {
    projectId: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    managementPermissionIds?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateRoleInput = {
    id: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    managementPermissionIds?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLDeleteRoleInput = {
    id: Scalars["ID"];
};
export declare type GraphQLContentPermissionRoleTarget = {
    __typename?: "ContentPermissionRoleTarget";
    role: GraphQLRole;
    environment: GraphQLEnvironment;
};
export declare type GraphQLContentPermissionPermanentAuthTokenTarget = {
    __typename?: "ContentPermissionPermanentAuthTokenTarget";
    permanentAuthToken: GraphQLPermanentAuthToken;
};
export declare type GraphQLContentPermissionPublicTarget = {
    __typename?: "ContentPermissionPublicTarget";
    environment: GraphQLEnvironment;
};
export declare type GraphQLContentPermissionTarget = GraphQLContentPermissionRoleTarget | GraphQLContentPermissionPermanentAuthTokenTarget | GraphQLContentPermissionPublicTarget;
export declare type GraphQLIContentPermission = {
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    enabled: Scalars["Boolean"];
    target: GraphQLContentPermissionTarget;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLIModel>;
};
export declare type GraphQLReadContentPermission = GraphQLIContentPermission & {
    __typename?: "ReadContentPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    enabled: Scalars["Boolean"];
    target: GraphQLContentPermissionTarget;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLIModel>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<GraphQLLocale>>;
    /** Allows only access to specific stages. If null all stages are allowed */
    stages?: Maybe<Array<GraphQLStage>>;
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateReadContentPermissionModelInput = {
    /** model id */
    id: Scalars["ID"];
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare enum GraphQLContentPermissionTargetKind {
    Role = "ROLE",
    Pat = "PAT",
    Public = "PUBLIC"
}
/**
 * CreateContentPermissionTargetInput describes the target of a Create<Action>ContentPermissionInput
 * Depending on the kind you need to pass different ids:
 * - ROLE: roleId & environmentId
 * - PAT: patId
 * - PUBLIC: environmentId
 */
export declare type GraphQLCreateContentPermissionTargetInput = {
    kind: GraphQLContentPermissionTargetKind;
    patId?: Maybe<Scalars["ID"]>;
    roleId?: Maybe<Scalars["ID"]>;
    environmentId?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLCreateReadContentPermissionInput = {
    target: GraphQLCreateContentPermissionTargetInput;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateReadContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
    /** Allows only access to specific stages. If null all stages are allowed */
    stages?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateReadContentPermissionInput = {
    /** Id of the read permission that should be updated. */
    permissionId: Scalars["ID"];
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateReadContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
    /** Allows only access to specific stages. If null all stages are allowed */
    stages?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLCreateReadContentPermissionPayload = {
    __typename?: "CreateReadContentPermissionPayload";
    permission: GraphQLReadContentPermission;
};
export declare type GraphQLUpdateReadContentPermissionPayload = {
    __typename?: "UpdateReadContentPermissionPayload";
    permission: GraphQLReadContentPermission;
};
export declare type GraphQLReadVersionContentPermission = GraphQLIContentPermission & {
    __typename?: "ReadVersionContentPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    enabled: Scalars["Boolean"];
    target: GraphQLContentPermissionTarget;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLIModel>;
};
export declare type GraphQLCreateReadVersionContentPermissionInput = {
    target: GraphQLCreateContentPermissionTargetInput;
    /** Allows only access to this model. If null, all models are allowed. */
    modelId?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLUpdateReadVersionContentPermissionInput = {
    /** Id of the read permission that should be updated. */
    permissionId: Scalars["ID"];
    /** Allows only access to this model. If null, all models are allowed. */
    modelId?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLCreateReadVersionContentPermissionPayload = {
    __typename?: "CreateReadVersionContentPermissionPayload";
    permission: GraphQLReadVersionContentPermission;
};
export declare type GraphQLUpdateReadVersionContentPermissionPayload = {
    __typename?: "UpdateReadVersionContentPermissionPayload";
    permission: GraphQLReadVersionContentPermission;
};
export declare type GraphQLCreateContentPermission = GraphQLIContentPermission & {
    __typename?: "CreateContentPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    enabled: Scalars["Boolean"];
    target: GraphQLContentPermissionTarget;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLIModel>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<GraphQLLocale>>;
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateCreateContentPermissionModelInput = {
    /** model id */
    id: Scalars["ID"];
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateCreateContentPermissionInput = {
    target: GraphQLCreateContentPermissionTargetInput;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateCreateContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateCreateContentPermissionInput = {
    /** Id of the read permission that should be updated. */
    permissionId: Scalars["ID"];
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateCreateContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLCreateCreateContentPermissionPayload = {
    __typename?: "CreateCreateContentPermissionPayload";
    permission: GraphQLCreateContentPermission;
};
export declare type GraphQLUpdateCreateContentPermissionPayload = {
    __typename?: "UpdateCreateContentPermissionPayload";
    permission: GraphQLCreateContentPermission;
};
export declare type GraphQLUpdateContentPermission = GraphQLIContentPermission & {
    __typename?: "UpdateContentPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    enabled: Scalars["Boolean"];
    target: GraphQLContentPermissionTarget;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLIModel>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<GraphQLLocale>>;
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateUpdateContentPermissionModelInput = {
    /** model id */
    id: Scalars["ID"];
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateUpdateContentPermissionInput = {
    target: GraphQLCreateContentPermissionTargetInput;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateUpdateContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateUpdateContentPermissionInput = {
    /** Id of the update permission that should be updated. */
    permissionId: Scalars["ID"];
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateUpdateContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLCreateUpdateContentPermissionPayload = {
    __typename?: "CreateUpdateContentPermissionPayload";
    permission: GraphQLUpdateContentPermission;
};
export declare type GraphQLUpdateUpdateContentPermissionPayload = {
    __typename?: "UpdateUpdateContentPermissionPayload";
    permission: GraphQLUpdateContentPermission;
};
export declare type GraphQLDeleteContentPermission = GraphQLIContentPermission & {
    __typename?: "DeleteContentPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    enabled: Scalars["Boolean"];
    target: GraphQLContentPermissionTarget;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLIModel>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<GraphQLLocale>>;
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateDeleteContentPermissionModelInput = {
    /** model id */
    id: Scalars["ID"];
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateDeleteContentPermissionInput = {
    target: GraphQLCreateContentPermissionTargetInput;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateDeleteContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateDeleteContentPermissionInput = {
    /** Id of the delete permission that should be updated. */
    permissionId: Scalars["ID"];
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateUpdateContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLCreateDeleteContentPermissionPayload = {
    __typename?: "CreateDeleteContentPermissionPayload";
    permission: GraphQLDeleteContentPermission;
};
export declare type GraphQLUpdateDeleteContentPermissionPayload = {
    __typename?: "UpdateDeleteContentPermissionPayload";
    permission: GraphQLDeleteContentPermission;
};
export declare type GraphQLPublishContentPermission = GraphQLIContentPermission & {
    __typename?: "PublishContentPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    enabled: Scalars["Boolean"];
    target: GraphQLContentPermissionTarget;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLIModel>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<GraphQLLocale>>;
    /** Allows only to publish from specific stages. If null all stages are allowed */
    fromStages?: Maybe<Array<GraphQLStage>>;
    /** Allows only to publish to specific stages. If null all stages are allowed */
    toStages?: Maybe<Array<GraphQLStage>>;
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreatePublishContentPermissionModelInput = {
    /** model id */
    id: Scalars["ID"];
    /**
     * Allows only access to specific fields. If null, all fields are allowed
     * Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions.
     */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreatePublishContentPermissionInput = {
    target: GraphQLCreateContentPermissionTargetInput;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreatePublishContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
    /** Allows only to publish from specific stages. If null all stages are allowed */
    fromStages?: Maybe<Array<Scalars["ID"]>>;
    /** Allows only to publish to specific stages. If null all stages are allowed */
    toStages?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLCreatePublishContentPermissionPayload = {
    __typename?: "CreatePublishContentPermissionPayload";
    permission: GraphQLPublishContentPermission;
};
export declare type GraphQLUpdatePublishContentPermissionModelInput = {
    /** model id */
    id: Scalars["ID"];
    /**
     * Allows only access to specific fields. If null, all fields are allowed
     * Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions.
     */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLUpdatePublishContentPermissionInput = {
    /** Id of the delete permission that should be updated. */
    permissionId: Scalars["ID"];
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreatePublishContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
    /** Allows only to publish from specific stages. If null all stages are allowed */
    fromStages?: Maybe<Array<Scalars["ID"]>>;
    /** Allows only to publish to specific stages. If null all stages are allowed */
    toStages?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdatePublishContentPermissionPayload = {
    __typename?: "UpdatePublishContentPermissionPayload";
    permission: GraphQLPublishContentPermission;
};
export declare type GraphQLUnpublishContentPermission = GraphQLIContentPermission & {
    __typename?: "UnpublishContentPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    enabled: Scalars["Boolean"];
    target: GraphQLContentPermissionTarget;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLIModel>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<GraphQLLocale>>;
    /** Allows only to publish from specific stages. If null all stages are allowed */
    stages?: Maybe<Array<GraphQLStage>>;
    /** Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions. */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateUnpublishContentPermissionModelInput = {
    /** model id */
    id: Scalars["ID"];
    /**
     * Allows only access to specific fields. If null, all fields are allowed
     * Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions.
     */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateUnpublishContentPermissionInput = {
    target: GraphQLCreateContentPermissionTargetInput;
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLCreateUnpublishContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
    /** Allows only to publish from specific stages. If null all stages are allowed */
    stages?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLCreateUnpublishContentPermissionPayload = {
    __typename?: "CreateUnpublishContentPermissionPayload";
    permission: GraphQLUnpublishContentPermission;
};
export declare type GraphQLUpdateUnpublishContentPermissionModelInput = {
    /** model id */
    id: Scalars["ID"];
    /**
     * Allows only access to specific fields. If null, all fields are allowed
     * Allows access when conditions are met. Condition is a stringified JSON matching a usual where input. Ignored if there are no conditions.
     */
    condition?: Maybe<Scalars["String"]>;
};
export declare type GraphQLUpdateUnpublishContentPermissionInput = {
    /** Id of the delete permission that should be updated. */
    permissionId: Scalars["ID"];
    /** Allows only access to this model. If null, all models are allowed. */
    model?: Maybe<GraphQLUpdateUnpublishContentPermissionModelInput>;
    /** Allows only access to specific locales. If null, all locales are allowed */
    locales?: Maybe<Array<Scalars["ID"]>>;
    /** Allows only to publish from specific stages. If null all stages are allowed */
    stages?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateUnpublishContentPermissionPayload = {
    __typename?: "UpdateUnpublishContentPermissionPayload";
    permission: GraphQLUnpublishContentPermission;
};
export declare type GraphQLUpdateContentPermissionEnabledInput = {
    permissionId: Scalars["ID"];
    enabled: Scalars["Boolean"];
};
export declare type GraphQLUpdateContentPermissionEnabledPayload = {
    __typename?: "UpdateContentPermissionEnabledPayload";
    permission: GraphQLIContentPermission;
};
export declare type GraphQLDeleteContentPermissionInput = {
    permissionId: Scalars["ID"];
};
export declare type GraphQLDeleteContentPermissionPayload = {
    __typename?: "DeleteContentPermissionPayload";
    deletedPermissionId: Scalars["ID"];
};
export declare type GraphQLUpdateMemberRolesInput = {
    memberId: Scalars["ID"];
    roleIds: Array<Scalars["ID"]>;
};
export declare enum GraphQLMigrationStatus {
    Queued = "QUEUED",
    Running = "RUNNING",
    Success = "SUCCESS",
    Timeout = "TIMEOUT",
    Failed = "FAILED"
}
export declare type GraphQLMigration = {
    __typename?: "Migration";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    finishedAt?: Maybe<Scalars["DateTime"]>;
    /** @deprecated This will be replaced by a union of Member | PermanentAuthToken */
    triggeredBy?: Maybe<GraphQLMember>;
    status: GraphQLMigrationStatus;
    errors?: Maybe<Scalars["String"]>;
    /** @deprecated Field no longer supported */
    operationType: GraphQLMigrationOperationType;
    /** @deprecated Field no longer supported */
    resourceId?: Maybe<Scalars["ID"]>;
};
export declare enum GraphQLRemote_Graphql_Type {
    Scalar = "SCALAR",
    Object = "OBJECT",
    Interface = "INTERFACE",
    Union = "UNION",
    Enum = "ENUM",
    InputObject = "INPUT_OBJECT"
}
export declare type GraphQLIRemoteSource = {
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    prefix: Scalars["String"];
    url: Scalars["String"];
    /**
     * Optional headers that will be sent to the remote source on every remote field. In case the remote field is using the same
     * Header Keys, the values will be overridden
     */
    headers?: Maybe<Scalars["JSON"]>;
    type: GraphQLRemoteSourceType;
    remoteTypeDefinitionsConnection: GraphQLRemoteTypeDefinitionsConnection;
    debugEnabled: Scalars["Boolean"];
};
export declare type GraphQLIRemoteSourceRemoteTypeDefinitionsConnectionArgs = {
    remoteGraphQLTypes?: Maybe<Array<GraphQLRemote_Graphql_Type>>;
    isUserDefined?: Maybe<Scalars["Boolean"]>;
    skip?: Scalars["Int"];
    first?: Scalars["Int"];
};
export declare type GraphQLGraphQlRemoteSource = GraphQLIRemoteSource & {
    __typename?: "GraphQLRemoteSource";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    prefix: Scalars["String"];
    url: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    type: GraphQLRemoteSourceType;
    remoteTypeDefinitionsConnection: GraphQLRemoteTypeDefinitionsConnection;
    debugEnabled: Scalars["Boolean"];
    /**
     * Specific URL that will be used for introspection if the introspection is available on another url than the regular url.
     * Can be ignored if the introspection url is the same as the url of the remote source.
     */
    introspectionUrl?: Maybe<Scalars["String"]>;
    /** HTTP Headers that will be used when sending the introspection only */
    introspectionHeaders?: Maybe<Scalars["JSON"]>;
    /** HTTP method that will be used for introspection */
    introspectionMethod: GraphQLGraphQlRemoteSourceIntrospectionMethod;
    schema: Scalars["String"];
};
export declare type GraphQLGraphQlRemoteSourceRemoteTypeDefinitionsConnectionArgs = {
    remoteGraphQLTypes?: Maybe<Array<GraphQLRemote_Graphql_Type>>;
    isUserDefined?: Maybe<Scalars["Boolean"]>;
    skip?: Scalars["Int"];
    first?: Scalars["Int"];
};
export declare type GraphQLRestRemoteSource = GraphQLIRemoteSource & {
    __typename?: "RESTRemoteSource";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    prefix: Scalars["String"];
    url: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    type: GraphQLRemoteSourceType;
    remoteTypeDefinitionsConnection: GraphQLRemoteTypeDefinitionsConnection;
    debugEnabled: Scalars["Boolean"];
};
export declare type GraphQLRestRemoteSourceRemoteTypeDefinitionsConnectionArgs = {
    remoteGraphQLTypes?: Maybe<Array<GraphQLRemote_Graphql_Type>>;
    isUserDefined?: Maybe<Scalars["Boolean"]>;
    skip?: Scalars["Int"];
    first?: Scalars["Int"];
};
export declare type GraphQLRemoteTypeDefinitionEdge = {
    __typename?: "RemoteTypeDefinitionEdge";
    node: GraphQLRemoteTypeDefinition;
};
export declare type GraphQLRemoteTypeDefinitionsAggregate = {
    __typename?: "RemoteTypeDefinitionsAggregate";
    count: Scalars["Int"];
};
export declare type GraphQLRemoteTypeDefinitionsConnection = {
    __typename?: "RemoteTypeDefinitionsConnection";
    pageInfo: GraphQLPageInfo;
    edges: Array<GraphQLRemoteTypeDefinitionEdge>;
    aggregate: GraphQLRemoteTypeDefinitionsAggregate;
};
export declare type GraphQLEnvironment = {
    __typename?: "Environment";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    name: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    endpoint: Scalars["String"];
    assetConfig: GraphQLIAssetConfig;
    metrics: GraphQLMetrics;
    webhook: GraphQLWebhook;
    webhooks: Array<GraphQLWebhook>;
    permanentAuthTokens: Array<GraphQLPermanentAuthToken>;
    authToken: Scalars["String"];
    contentView: GraphQLContentView;
    contentViews: Array<GraphQLContentView>;
    viewGroups: Array<GraphQLViewGroup>;
    contentModel: GraphQLContentModel;
    remoteSources: Array<GraphQLIRemoteSource>;
    remoteSource: GraphQLIRemoteSource;
    /** @deprecated Revisions are no longer maintained */
    revisionCount: Scalars["Int"];
    migrations: Array<GraphQLMigration>;
    migration: GraphQLMigration;
    runningMigration?: Maybe<GraphQLMigration>;
    publicContentAPI: GraphQLPublicContentApi;
    isCloning?: Maybe<Scalars["Boolean"]>;
    quotas: GraphQLEnvironmentLevelQuota;
    integrations: Array<GraphQLIIntegration>;
    integration: GraphQLIIntegration;
    extensions: Array<GraphQLIExtension>;
    extension: GraphQLIExtension;
    appInstallations: Array<GraphQLAppInstallation>;
    appInstallation: GraphQLAppInstallation;
    diff: GraphQLDiffEnvironmentPayload;
};
export declare type GraphQLEnvironmentWebhookArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLEnvironmentContentViewArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLEnvironmentContentViewsArgs = {
    includeSystemModels?: Maybe<Scalars["Boolean"]>;
    filter?: Maybe<GraphQLContentViewFilterInput>;
};
export declare type GraphQLEnvironmentRemoteSourceArgs = {
    prefix: Scalars["String"];
};
export declare type GraphQLEnvironmentMigrationArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLEnvironmentIntegrationArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLEnvironmentExtensionArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLEnvironmentAppInstallationsArgs = {
    status?: Maybe<GraphQLAppInstallationStatus>;
};
export declare type GraphQLEnvironmentAppInstallationArgs = {
    appApiId: Scalars["String"];
};
export declare type GraphQLEnvironmentDiffArgs = {
    environmentName: Scalars["String"];
};
export declare type GraphQLPublicContentApiDefauts = {
    __typename?: "PublicContentAPIDefauts";
    stage: GraphQLStage;
};
export declare type GraphQLPublicContentApi = {
    __typename?: "PublicContentAPI";
    defaults: GraphQLPublicContentApiDefauts;
    /** returns configured content permissions used for public access of the environment */
    contentPermissions: Array<GraphQLIContentPermission>;
};
export declare enum GraphQLIntegration_Provider {
    Netlify = "NETLIFY",
    Vercel = "VERCEL",
    GatsbyCloud = "GATSBY_CLOUD"
}
export declare type GraphQLIIntegration = {
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLNetlifyIntegration = GraphQLIIntegration & {
    __typename?: "NetlifyIntegration";
    /** Integration ID */
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    /** Integration display name on GCMS */
    displayName?: Maybe<Scalars["String"]>;
    /** Integration description on GCMS */
    description?: Maybe<Scalars["String"]>;
    /** Configured sites for netlify integration */
    sites: Array<GraphQLNetlifySite>;
    models: Array<GraphQLIModel>;
};
export declare type GraphQLVercelIntegration = GraphQLIIntegration & {
    __typename?: "VercelIntegration";
    /** Integration ID */
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    /** Integration display name on GCMS */
    displayName?: Maybe<Scalars["String"]>;
    /** Integration description on GCMS */
    description?: Maybe<Scalars["String"]>;
    /** Configured projects for vercel integration */
    projects: Array<GraphQLVercelProject>;
    models: Array<GraphQLIModel>;
};
export declare type GraphQLGatsbyCloudIntegration = GraphQLIIntegration & {
    __typename?: "GatsbyCloudIntegration";
    /** Integration ID */
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    /** Integration display name on GCMS */
    displayName?: Maybe<Scalars["String"]>;
    /** Integration description on GCMS */
    description?: Maybe<Scalars["String"]>;
    /** URL to your site */
    siteURL: Scalars["String"];
    /** Prefix of your site */
    sitePrefix: Scalars["String"];
    /** URL to the preview of your site */
    previewURL: Scalars["String"];
    /** URL to the production deployment of your site */
    productionURL: Scalars["String"];
    /** URL to trigger a Deploy Build. This webhook will be triggered when publishing and unpublishing entries. */
    buildWebhookURL: Scalars["String"];
    /** URL to trigger a CMS Preview build */
    previewWebhookURL: Scalars["String"];
};
export declare type GraphQLNetlifySite = {
    __typename?: "NetlifySite";
    id: Scalars["String"];
    displayName: Scalars["String"];
    url: Scalars["String"];
    /** Contains information of the last time the build state was changing. */
    lastState?: Maybe<GraphQLNetlifyState>;
};
export declare type GraphQLVercelProject = {
    __typename?: "VercelProject";
    id: Scalars["String"];
    displayName: Scalars["String"];
    url: Scalars["String"];
    /** Git branch to trigger the build from */
    ref: Scalars["String"];
    /** Contains information of the last time the build state was changing. */
    lastState?: Maybe<GraphQLVercelState>;
};
export declare type GraphQLNetlifyState = {
    __typename?: "NetlifyState";
    /** Current state the site is in */
    buildState: GraphQLNetlifyBuildState;
    /** Time when the build of the site was started */
    buildStartedAt?: Maybe<Scalars["DateTime"]>;
    /** Time when the build of the site was prepared */
    buildPreparedAt?: Maybe<Scalars["DateTime"]>;
    /** Time when the build of the site was finished */
    buildFinishedAt?: Maybe<Scalars["DateTime"]>;
    /** Member in the project who triggered a build. If the build was triggered externally this will be null. */
    triggeredBy?: Maybe<GraphQLNetlifyStateTriggeredBy>;
};
export declare type GraphQLVercelState = {
    __typename?: "VercelState";
    /** Current state the site is in */
    buildState: GraphQLVercelBuildState;
    /** Time when the build of the site was started */
    buildStartedAt?: Maybe<Scalars["DateTime"]>;
    /** Time when the build of the site was prepared */
    buildPreparedAt?: Maybe<Scalars["DateTime"]>;
    /** Time when the build of the site was finished */
    buildFinishedAt?: Maybe<Scalars["DateTime"]>;
    /** Member in the project who triggered a build. If the build was triggered externally this will be null. */
    triggeredBy?: Maybe<GraphQLVercelStateTriggeredBy>;
};
export declare type GraphQLNetlifyStateTriggeredBy = GraphQLPermanentAuthToken | GraphQLMember;
export declare type GraphQLVercelStateTriggeredBy = GraphQLPermanentAuthToken | GraphQLMember;
export declare enum GraphQLColorPalette {
    Pink = "PINK",
    Purple = "PURPLE",
    Orange = "ORANGE",
    Red = "RED",
    Brown = "BROWN",
    Teal = "TEAL",
    Green = "GREEN",
    Yellow = "YELLOW"
}
export declare type GraphQLStage = {
    __typename?: "Stage";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    color: Scalars["String"];
    colorPaletteId: GraphQLColorPalette;
    backgroundColor: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    position: Scalars["Int"];
};
export declare type GraphQLProfile = {
    __typename?: "Profile";
    id: Scalars["ID"];
    email: Scalars["String"];
    name: Scalars["String"];
    picture?: Maybe<Scalars["String"]>;
    role?: Maybe<Scalars["String"]>;
    purpose?: Maybe<Scalars["String"]>;
    companyName?: Maybe<Scalars["String"]>;
    companySize?: Maybe<Scalars["String"]>;
};
export declare type GraphQLIUser = {
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    profile: GraphQLProfile;
};
export declare type GraphQLCreateUserPayload = {
    __typename?: "CreateUserPayload";
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQLLegacyProject = {
    __typename?: "LegacyProject";
    id: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    url: Scalars["String"];
    picture?: Maybe<Scalars["String"]>;
    isOwner: Scalars["Boolean"];
    isMigrated: Scalars["Boolean"];
};
export declare type GraphQLITemplate = {
    id: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    picture?: Maybe<Scalars["String"]>;
    details?: Maybe<Scalars["String"]>;
    coverPicture?: Maybe<Scalars["String"]>;
    resources: Array<GraphQLTemplateResource>;
};
export declare type GraphQLTemplate = GraphQLITemplate & {
    __typename?: "Template";
    id: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    picture?: Maybe<Scalars["String"]>;
    details?: Maybe<Scalars["String"]>;
    coverPicture?: Maybe<Scalars["String"]>;
    resources: Array<GraphQLTemplateResource>;
};
export declare type GraphQLStarterTemplate = GraphQLITemplate & {
    __typename?: "StarterTemplate";
    id: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    picture?: Maybe<Scalars["String"]>;
    details?: Maybe<Scalars["String"]>;
    coverPicture?: Maybe<Scalars["String"]>;
    resources: Array<GraphQLTemplateResource>;
    stack: Array<GraphQLTechnologyStack>;
};
export declare type GraphQLTemplateResource = {
    __typename?: "TemplateResource";
    title: Scalars["String"];
    url: Scalars["String"];
};
export declare type GraphQLTechnologyStack = {
    __typename?: "TechnologyStack";
    image: Scalars["String"];
    title: Scalars["String"];
    url?: Maybe<Scalars["String"]>;
};
/**
 * Represents the logged in user
 * Will be removed soon
 */
export declare type GraphQLViewer = GraphQLIUser & {
    __typename?: "Viewer";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    profile: GraphQLProfile;
    pendingInvites: Array<GraphQLInvite>;
    pendingInvite?: Maybe<GraphQLInvite>;
    projects: Array<GraphQLProject>;
    plans: Array<GraphQLPlan>;
    project?: Maybe<GraphQLProject>;
    templates: Array<GraphQLITemplate>;
    paymentAccounts: Array<GraphQLPaymentAccount>;
    paymentAccount: GraphQLPaymentAccount;
    regions: Array<GraphQLRegion>;
    availableIntegrations: Array<GraphQLIntegration_Provider>;
    availableExtensionSrcTypes: Array<GraphQLExtensionSrcType>;
    availableExtensionPermissions: Array<GraphQLAvailableExtensionPermission>;
};
/**
 * Represents the logged in user
 * Will be removed soon
 */
export declare type GraphQLViewerPendingInviteArgs = {
    code: Scalars["String"];
};
/**
 * Represents the logged in user
 * Will be removed soon
 */
export declare type GraphQLViewerProjectArgs = {
    id: Scalars["ID"];
};
/**
 * Represents the logged in user
 * Will be removed soon
 */
export declare type GraphQLViewerPaymentAccountArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLIViewer = {
    id: Scalars["ID"];
    project?: Maybe<GraphQLProject>;
    plans: Array<GraphQLPlan>;
    templates: Array<GraphQLITemplate>;
    regions: Array<GraphQLRegion>;
    availableIntegrations: Array<GraphQLIntegration_Provider>;
    availableExtensionSrcTypes: Array<GraphQLExtensionSrcType>;
    availableExtensionPermissions: Array<GraphQLAvailableExtensionPermission>;
};
export declare type GraphQLIViewerProjectArgs = {
    id?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLUser = GraphQLIUser & {
    __typename?: "User";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    profile: GraphQLProfile;
};
export declare type GraphQLUserViewer = GraphQLIViewer & {
    __typename?: "UserViewer";
    id: Scalars["ID"];
    user: GraphQLUser;
    pendingInvites: Array<GraphQLInvite>;
    pendingInvite?: Maybe<GraphQLInvite>;
    plans: Array<GraphQLPlan>;
    templates: Array<GraphQLITemplate>;
    paymentAccounts: Array<GraphQLPaymentAccount>;
    paymentAccount: GraphQLPaymentAccount;
    regions: Array<GraphQLRegion>;
    availableIntegrations: Array<GraphQLIntegration_Provider>;
    availableExtensionSrcTypes: Array<GraphQLExtensionSrcType>;
    availableExtensionPermissions: Array<GraphQLAvailableExtensionPermission>;
    pendingProjects: Array<GraphQLIPendingProject>;
    pendingProject?: Maybe<GraphQLIPendingProject>;
    projects: Array<GraphQLProject>;
    project?: Maybe<GraphQLProject>;
    commonAssetConfig: GraphQLCommonFilestack;
    apps: Array<GraphQLApp>;
    app: GraphQLApp;
};
export declare type GraphQLUserViewerPendingInviteArgs = {
    code: Scalars["String"];
};
export declare type GraphQLUserViewerPaymentAccountArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLUserViewerPendingProjectArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLUserViewerProjectArgs = {
    id?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLUserViewerAppArgs = {
    apiId: Scalars["String"];
};
export declare type GraphQLTokenViewer = GraphQLIViewer & {
    __typename?: "TokenViewer";
    id: Scalars["ID"];
    project?: Maybe<GraphQLProject>;
    regions: Array<GraphQLRegion>;
    templates: Array<GraphQLITemplate>;
    plans: Array<GraphQLPlan>;
    availableIntegrations: Array<GraphQLIntegration_Provider>;
    availableExtensionSrcTypes: Array<GraphQLExtensionSrcType>;
    availableExtensionPermissions: Array<GraphQLAvailableExtensionPermission>;
};
export declare type GraphQLTokenViewerProjectArgs = {
    id?: Maybe<Scalars["ID"]>;
};
/** Represents a user in a project */
export declare type GraphQLMember = GraphQLIUser & {
    __typename?: "Member";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    profile: GraphQLProfile;
    roles: Array<GraphQLRole>;
    isOwner: Scalars["Boolean"];
};
export declare type GraphQLUserAnalytics = {
    __typename?: "UserAnalytics";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    landingPage?: Maybe<Scalars["String"]>;
    conversionPage?: Maybe<Scalars["String"]>;
    referrer?: Maybe<Scalars["String"]>;
    gclid?: Maybe<Scalars["String"]>;
    utmSource?: Maybe<Scalars["String"]>;
    utmMedium?: Maybe<Scalars["String"]>;
    utmCampaign?: Maybe<Scalars["String"]>;
    utmTerm?: Maybe<Scalars["String"]>;
    utmContent?: Maybe<Scalars["String"]>;
    hubspotutk?: Maybe<Scalars["String"]>;
};
export declare type GraphQLRemoveMemberPayload = {
    __typename?: "RemoveMemberPayload";
    removedMemberId: Scalars["ID"];
};
export declare type GraphQLDeleteAccountPayload = {
    __typename?: "DeleteAccountPayload";
    deletedUserId: Scalars["ID"];
};
export declare type GraphQLRemoveMemberInput = {
    memberId: Scalars["ID"];
};
export declare type GraphQLSetUserAnalyticsInput = {
    landingPage?: Maybe<Scalars["String"]>;
    conversionPage?: Maybe<Scalars["String"]>;
    referrer?: Maybe<Scalars["String"]>;
    gclid?: Maybe<Scalars["String"]>;
    utmSource?: Maybe<Scalars["String"]>;
    utmMedium?: Maybe<Scalars["String"]>;
    utmCampaign?: Maybe<Scalars["String"]>;
    utmTerm?: Maybe<Scalars["String"]>;
    utmContent?: Maybe<Scalars["String"]>;
    hubspotutk?: Maybe<Scalars["String"]>;
};
export declare enum GraphQLTrackEvent {
    CreatedContent = "CREATED_CONTENT",
    UsedPlayground = "USED_PLAYGROUND",
    CheckedQuickstart = "CHECKED_QUICKSTART"
}
export declare type GraphQLTrackInput = {
    projectId: Scalars["ID"];
    event: GraphQLTrackEvent;
    meta?: Maybe<Scalars["String"]>;
};
export declare type GraphQLTrackPayload = {
    __typename?: "TrackPayload";
    success: Scalars["Boolean"];
};
export declare type GraphQLUpdateProfileInput = {
    name?: Maybe<Scalars["String"]>;
    company?: Maybe<Scalars["String"]>;
    jobTitle?: Maybe<Scalars["String"]>;
    jobRole?: Maybe<GraphQLProfileJobRole>;
    picture?: Maybe<Scalars["String"]>;
    role?: Maybe<Scalars["String"]>;
    purpose?: Maybe<Scalars["String"]>;
    companyName?: Maybe<Scalars["String"]>;
    companySize?: Maybe<Scalars["String"]>;
};
export declare enum GraphQLProfileJobRole {
    DeveloperEngineering = "DEVELOPER_ENGINEERING",
    EditorialContent = "EDITORIAL_CONTENT",
    Management = "MANAGEMENT",
    Procurement = "PROCUREMENT",
    ProductManagement = "PRODUCT_MANAGEMENT",
    ProjectManagement = "PROJECT_MANAGEMENT",
    Sales = "SALES",
    SecurityLegal = "SECURITY_LEGAL",
    Other = "OTHER"
}
export declare type GraphQLCreateUserInput = {
    gcms?: Maybe<Scalars["String"]>;
};
export declare type GraphQLDeleteAccountInput = {
    churnQuestions?: Maybe<Scalars["JSON"]>;
};
export declare enum GraphQLViewGroupType {
    Custom = "CUSTOM",
    System = "SYSTEM",
    UserCreated = "USER_CREATED"
}
export declare enum GraphQLViewGroupContentType {
    Default = "DEFAULT",
    Asset = "ASSET"
}
export declare type GraphQLViewGroup = {
    __typename?: "ViewGroup";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    environment: GraphQLEnvironment;
    type: GraphQLViewGroupType;
    contentType: GraphQLViewGroupContentType;
    position: Scalars["Int"];
    createdBy?: Maybe<GraphQLMember>;
    contentViews: Array<GraphQLContentView>;
};
export declare type GraphQLViewGroupContentViewsArgs = {
    filter?: Maybe<GraphQLContentViewFilterInput>;
};
export declare type GraphQLCreateViewGroupPayload = {
    __typename?: "CreateViewGroupPayload";
    createdViewGroup: GraphQLViewGroup;
};
export declare type GraphQLUpdateViewGroupPayload = {
    __typename?: "UpdateViewGroupPayload";
    updatedViewGroup: GraphQLViewGroup;
};
export declare type GraphQLDeleteViewGroupPayload = {
    __typename?: "DeleteViewGroupPayload";
    deletedViewGroupId: Scalars["ID"];
};
export declare type GraphQLMoveViewGroupPayload = {
    __typename?: "MoveViewGroupPayload";
    movedViewGroups: Array<GraphQLViewGroup>;
};
export declare type GraphQLCreateViewGroupInput = {
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    type?: Maybe<GraphQLViewGroupContentType>;
    environmentId: Scalars["ID"];
};
export declare type GraphQLUpdateViewGroupInput = {
    id: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLDeleteViewGroupInput = {
    id: Scalars["ID"];
};
export declare type GraphQLMoveViewGroupInput = {
    id: Scalars["ID"];
    position: Scalars["Int"];
};
export declare type GraphQLWebhook = {
    __typename?: "Webhook";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    url: Scalars["String"];
    headers: Scalars["JSON"];
    isActive: Scalars["Boolean"];
    environment: GraphQLEnvironment;
    /**
     * List of models on which the webhook will be triggered.
     * In case of any model, this array will be empty.
     */
    models: Array<GraphQLIModel>;
    /**
     * List of stages on which the webhook will be triggered.
     * In case of any stage, this array will be empty.
     */
    stages: Array<GraphQLStage>;
    /** The type of trigger the webhook is registered */
    triggerType: GraphQLWebhookTriggerType;
    /** When one of the actions happen, the webhook will be triggered */
    triggerActions: Array<GraphQLWebhookTriggerAction>;
    /**
     * Defines wether the data of the changed data will be sent
     * in the webhook payload or not
     */
    includePayload: Scalars["Boolean"];
    hasSecretKey?: Maybe<Scalars["Boolean"]>;
    logs: GraphQLWebhookLogsPayload;
    log?: Maybe<GraphQLWebhookLog>;
    triggerSources?: Maybe<Array<GraphQLWebhookTriggerSource>>;
};
export declare type GraphQLWebhookLogsArgs = {
    where?: Maybe<GraphQLWebhookLogsWhereInput>;
    limit?: Maybe<Scalars["Int"]>;
    skip?: Maybe<Scalars["Int"]>;
    after?: Maybe<Scalars["String"]>;
    orderBy?: Maybe<GraphQLWebhookLogOrderByInput>;
};
export declare type GraphQLWebhookLogArgs = {
    id: Scalars["String"];
};
export declare enum GraphQLWebhookTriggerSource {
    Pat = "PAT",
    Member = "MEMBER",
    Public = "PUBLIC"
}
export declare type GraphQLWebhookLogsPayload = {
    __typename?: "WebhookLogsPayload";
    total: Scalars["Int"];
    entries: Array<GraphQLWebhookLog>;
};
export declare type GraphQLWebhookLogsWhereInput = {
    action_eq?: Maybe<GraphQLWebhookTriggerAction>;
    modelId_eq?: Maybe<Scalars["ID"]>;
    status_eq?: Maybe<Scalars["Int"]>;
    status_in?: Maybe<Array<Maybe<Scalars["Int"]>>>;
    status_gt?: Maybe<Scalars["Int"]>;
    status_gte?: Maybe<Scalars["Int"]>;
    status_lt?: Maybe<Scalars["Int"]>;
    status_lte?: Maybe<Scalars["Int"]>;
};
export declare enum GraphQLWebhookLogOrderByInput {
    CalledAtAsc = "calledAt_ASC",
    CalledAtDesc = "calledAt_DESC"
}
export declare type GraphQLWebhookLog = {
    __typename?: "WebhookLog";
    id: Scalars["String"];
    /**
     * """
     * Payload that was send as the payload
     * """
     */
    requestPayload?: Maybe<Scalars["JSON"]>;
    /**
     * """
     * Payload that was return by the webhook
     * """
     */
    responsePayload?: Maybe<Scalars["String"]>;
    /**
     * """
     *  Size of the response payload in bytes
     * """
     */
    responsePayloadSize?: Maybe<Scalars["Int"]>;
    /**
     * """
     *  Time when the webhook was called
     * """
     */
    calledAt: Scalars["DateTime"];
    /**
     * """
     *  Status code of the response
     * """
     */
    statusCode: Scalars["Int"];
    /**
     * """
     * Model on which the webhook was triggered
     * """
     */
    model?: Maybe<GraphQLIModel>;
    /**
     * """
     * Action which triggered the webhook
     * """
     */
    triggerAction: GraphQLWebhookTriggerAction;
    /**
     * """
     *  In case of errors shows how many retry attempts happened
     * """
     */
    attempts: Scalars["Int"];
    /**
     * """
     *  Duration the request call took in milliseconds
     * """
     */
    duration: Scalars["Float"];
};
export declare type GraphQLCreateWebhookPayload = {
    __typename?: "CreateWebhookPayload";
    createdWebhook: GraphQLWebhook;
};
export declare type GraphQLUpdateWebhookPayload = {
    __typename?: "UpdateWebhookPayload";
    updatedWebhook: GraphQLWebhook;
};
export declare type GraphQLDeleteWebhookPayload = {
    __typename?: "DeleteWebhookPayload";
    deletedWebhookId: Scalars["ID"];
};
/** Defines the type of the trigger */
export declare enum GraphQLWebhookTriggerType {
    ContentModel = "CONTENT_MODEL"
}
/**
 * Defines which operation will trigger the webhook.
 * Some operations rely on the type of stage. E.g. on a
 * publishing stage, the webhook will only be triggered for
 * PUBLISH and UNPUBLISH events. On other stages, only
 * CREATE, UPDATE and DELETE are triggering the webhook.
 */
export declare enum GraphQLWebhookTriggerAction {
    Create = "CREATE",
    Update = "UPDATE",
    Delete = "DELETE",
    Publish = "PUBLISH",
    Unpublish = "UNPUBLISH"
}
export declare type GraphQLCreateWebhookInput = {
    environmentId: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    url: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    isActive: Scalars["Boolean"];
    includePayload: Scalars["Boolean"];
    /**
     * Pass an empty array for all existing models.
     * This will also setup the webook for models
     * created in the future
     */
    models: Array<Scalars["ID"]>;
    /**
     * Pass an empty array for all existing stages.
     * This will also setup the webook for stages
     * created in the future
     */
    stages: Array<Scalars["ID"]>;
    triggerType: GraphQLWebhookTriggerType;
    triggerActions: Array<GraphQLWebhookTriggerAction>;
    secretKey?: Maybe<Scalars["String"]>;
    triggerSources?: Maybe<Array<GraphQLWebhookTriggerSource>>;
};
export declare type GraphQLUpdateWebhookInput = {
    webhookId: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    headers?: Maybe<Scalars["JSON"]>;
    url?: Maybe<Scalars["String"]>;
    isActive?: Maybe<Scalars["Boolean"]>;
    includePayload?: Maybe<Scalars["Boolean"]>;
    stages?: Maybe<Array<Scalars["ID"]>>;
    models?: Maybe<Array<Scalars["ID"]>>;
    triggerType?: Maybe<GraphQLWebhookTriggerType>;
    triggerActions?: Maybe<Array<GraphQLWebhookTriggerAction>>;
    secretKey?: Maybe<Scalars["String"]>;
    triggerSources?: Maybe<Array<GraphQLWebhookTriggerSource>>;
};
export declare type GraphQLDeleteWebhookInput = {
    webhookId: Scalars["ID"];
};
export declare type GraphQLRetriggerWebhookInput = {
    webhookId: Scalars["ID"];
    logId: Scalars["String"];
};
export declare type GraphQLRetriggerWebhookPayload = {
    __typename?: "RetriggerWebhookPayload";
    logId: Scalars["String"];
};
export declare enum GraphQLAvailableExtensionSrcType {
    Inline = "INLINE",
    Sdk = "SDK"
}
export declare enum GraphQLAvailableExtensionPermissionAction {
    Input = "INPUT",
    Form = "FORM",
    Api = "API"
}
export declare enum GraphQLExtensionFieldType {
    Id = "ID",
    String = "STRING",
    Richtext = "RICHTEXT",
    Int = "INT",
    Float = "FLOAT",
    Boolean = "BOOLEAN",
    Json = "JSON",
    Datetime = "DATETIME",
    Date = "DATE",
    Location = "LOCATION",
    Color = "COLOR",
    Graphql = "GRAPHQL",
    Rest = "REST",
    Enumeration = "ENUMERATION",
    Relation = "RELATION",
    Asset = "ASSET",
    Union = "UNION"
}
export declare type GraphQLExtensionSrcType = {
    __typename?: "ExtensionSrcType";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    description?: Maybe<Scalars["String"]>;
    name: Scalars["String"];
    type: GraphQLAvailableExtensionSrcType;
};
export declare type GraphQLAvailableExtensionPermission = {
    __typename?: "AvailableExtensionPermission";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    description?: Maybe<Scalars["String"]>;
    name: GraphQLAvailableExtensionPermissionAction;
};
export declare type GraphQLIExtension = {
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    createdBy?: Maybe<GraphQLMember>;
    updatedBy?: Maybe<GraphQLMember>;
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    apiId: Scalars["String"];
    /** The type indicating where the source for the extension will be obtained from */
    srcType: GraphQLExtensionSrcType;
    /** Location for the source if the source type is an external one */
    src: Scalars["String"];
    environment: GraphQLEnvironment;
    config: Scalars["JSON"];
    isActive: Scalars["Boolean"];
    meta?: Maybe<Scalars["JSON"]>;
    neededPermissions: Array<GraphQLAvailableExtensionPermission>;
};
export declare type GraphQLFieldExtension = GraphQLIExtension & {
    __typename?: "FieldExtension";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    createdBy?: Maybe<GraphQLMember>;
    updatedBy?: Maybe<GraphQLMember>;
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    apiId: Scalars["String"];
    /** The type indicating where the source for the extension will be obtained from */
    srcType: GraphQLExtensionSrcType;
    /** Location for the source if the source type is an external one */
    src: Scalars["String"];
    environment: GraphQLEnvironment;
    config: Scalars["JSON"];
    isActive: Scalars["Boolean"];
    meta?: Maybe<Scalars["JSON"]>;
    neededPermissions: Array<GraphQLAvailableExtensionPermission>;
    fieldType: GraphQLExtensionFieldType;
    hasFormRenderer: Scalars["Boolean"];
    hasListRenderer: Scalars["Boolean"];
    hasTableRenderer: Scalars["Boolean"];
    fields: Array<GraphQLIField>;
};
export declare type GraphQLSidebarExtension = GraphQLIExtension & {
    __typename?: "SidebarExtension";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    createdBy?: Maybe<GraphQLMember>;
    updatedBy?: Maybe<GraphQLMember>;
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    apiId: Scalars["String"];
    /** The type indicating where the source for the extension will be obtained from */
    srcType: GraphQLExtensionSrcType;
    /** Location for the source if the source type is an external one */
    src: Scalars["String"];
    environment: GraphQLEnvironment;
    config: Scalars["JSON"];
    isActive: Scalars["Boolean"];
    meta?: Maybe<Scalars["JSON"]>;
    neededPermissions: Array<GraphQLAvailableExtensionPermission>;
    sidebarElements: Array<GraphQLISidebarElement>;
};
export declare type GraphQLCreateFieldExtensionPayload = {
    __typename?: "CreateFieldExtensionPayload";
    createdExtension: GraphQLFieldExtension;
};
export declare type GraphQLUpdateFieldExtensionPayload = {
    __typename?: "UpdateFieldExtensionPayload";
    updatedExtension: GraphQLFieldExtension;
};
export declare type GraphQLCreateSidebarExtensionPayload = {
    __typename?: "CreateSidebarExtensionPayload";
    createdExtension: GraphQLSidebarExtension;
};
export declare type GraphQLUpdateSidebarExtensionPayload = {
    __typename?: "UpdateSidebarExtensionPayload";
    updatedExtension: GraphQLSidebarExtension;
};
export declare type GraphQLDeleteExtensionPayload = {
    __typename?: "DeleteExtensionPayload";
    deletedExtensionId: Scalars["ID"];
};
export declare type GraphQLCreateFieldExtensionInput = {
    environmentId: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    apiId: Scalars["String"];
    srcTypeId: Scalars["ID"];
    src: Scalars["String"];
    config: Scalars["JSON"];
    isActive: Scalars["Boolean"];
    meta?: Maybe<Scalars["JSON"]>;
    fieldType: GraphQLExtensionFieldType;
    hasFormRenderer: Scalars["Boolean"];
    hasListRenderer: Scalars["Boolean"];
    hasTableRenderer: Scalars["Boolean"];
    neededPermissions?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateFieldExtensionInput = {
    extensionId: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    apiId: Scalars["String"];
    srcTypeId?: Maybe<Scalars["ID"]>;
    src?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    isActive?: Maybe<Scalars["Boolean"]>;
    meta?: Maybe<Scalars["JSON"]>;
    fieldType?: Maybe<GraphQLExtensionFieldType>;
    hasFormRenderer?: Maybe<Scalars["Boolean"]>;
    hasListRenderer?: Maybe<Scalars["Boolean"]>;
    hasTableRenderer?: Maybe<Scalars["Boolean"]>;
    neededPermissions?: Maybe<Array<GraphQLAvailableExtensionPermissionAction>>;
};
export declare type GraphQLCreateSidebarExtensionInput = {
    environmentId: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    apiId: Scalars["String"];
    srcTypeId: Scalars["ID"];
    src: Scalars["String"];
    config: Scalars["JSON"];
    isActive: Scalars["Boolean"];
    meta?: Maybe<Scalars["JSON"]>;
    neededPermissions?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateSidebarExtensionInput = {
    extensionId: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    apiId: Scalars["String"];
    srcTypeId?: Maybe<Scalars["ID"]>;
    src?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    isActive?: Maybe<Scalars["Boolean"]>;
    meta?: Maybe<Scalars["JSON"]>;
    neededPermissions?: Maybe<Array<GraphQLAvailableExtensionPermissionAction>>;
};
export declare type GraphQLDeleteExtensionInput = {
    extensionId: Scalars["ID"];
};
/** ### APP: */
export declare enum GraphQLAppPublicationStatus {
    Private = "PRIVATE",
    Pending = "PENDING",
    Public = "PUBLIC"
}
export declare type GraphQLApp = {
    __typename?: "App";
    id: Scalars["ID"];
    author: Scalars["ID"];
    name: Scalars["String"];
    apiId: Scalars["String"];
    setupUrl: Scalars["String"];
    webhookUrl?: Maybe<Scalars["String"]>;
    configurationUrl?: Maybe<Scalars["String"]>;
    elements?: Maybe<Array<GraphQLIAppElement>>;
    avatarUrl: Scalars["String"];
    description: Scalars["String"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    publicationStatus: GraphQLAppPublicationStatus;
};
export declare enum GraphQLAppElementType {
    Field = "field",
    FormSidebar = "formSidebar",
    Page = "page"
}
export declare type GraphQLIAppElement = {
    id: Scalars["ID"];
    name: Scalars["String"];
    apiId: Scalars["String"];
    type: GraphQLAppElementType;
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    src: Scalars["String"];
    app: GraphQLApp;
};
export declare enum GraphQLFieldAppElementFeature {
    FieldRenderer = "FieldRenderer",
    ListRenderer = "ListRenderer",
    TableRenderer = "TableRenderer"
}
export declare type GraphQLFieldAppElement = GraphQLIAppElement & {
    __typename?: "FieldAppElement";
    id: Scalars["ID"];
    name: Scalars["String"];
    apiId: Scalars["String"];
    type: GraphQLAppElementType;
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    src: Scalars["String"];
    /** --- */
    features: Array<GraphQLFieldAppElementFeature>;
    fieldType: GraphQLSimpleFieldType;
    app: GraphQLApp;
};
export declare type GraphQLFormSidebarAppElement = GraphQLIAppElement & {
    __typename?: "FormSidebarAppElement";
    id: Scalars["ID"];
    name: Scalars["String"];
    apiId: Scalars["String"];
    type: GraphQLAppElementType;
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    src: Scalars["String"];
    app: GraphQLApp;
};
export declare type GraphQLPageAppElement = GraphQLIAppElement & {
    __typename?: "PageAppElement";
    id: Scalars["ID"];
    name: Scalars["String"];
    apiId: Scalars["String"];
    type: GraphQLAppElementType;
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    src: Scalars["String"];
    app: GraphQLApp;
};
export declare type GraphQLCreateAppInput = {
    name: Scalars["String"];
    apiId: Scalars["String"];
    setupUrl: Scalars["String"];
    avatarUrl: Scalars["String"];
    description: Scalars["String"];
    webhookUrl?: Maybe<Scalars["String"]>;
    elements?: Maybe<Array<GraphQLAppElementInput>>;
    configurationUrl?: Maybe<Scalars["String"]>;
};
export declare type GraphQLAppElementInput = {
    id: Scalars["ID"];
    apiId: Scalars["String"];
    name: Scalars["String"];
    type: GraphQLAppElementType;
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    src: Scalars["String"];
    features?: Maybe<Array<GraphQLFieldAppElementFeature>>;
    fieldType?: Maybe<GraphQLSimpleFieldType>;
};
export declare type GraphQLUpdateAppInput = {
    apiId: Scalars["String"];
    name?: Maybe<Scalars["String"]>;
    setupUrl?: Maybe<Scalars["String"]>;
    webhookUrl?: Maybe<Scalars["String"]>;
    elements?: Maybe<Array<GraphQLAppElementInput>>;
    avatarUrl?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    configurationUrl?: Maybe<Scalars["String"]>;
};
export declare type GraphQLDeleteAppInput = {
    apiId: Scalars["String"];
};
export declare type GraphQLCreateAppPayload = {
    __typename?: "CreateAppPayload";
    createdApp: GraphQLApp;
};
export declare type GraphQLUpdateAppPayload = {
    __typename?: "UpdateAppPayload";
    updatedApp: GraphQLApp;
};
export declare type GraphQLDeleteAppPayload = {
    __typename?: "DeleteAppPayload";
    deletedAppId: Scalars["ID"];
};
export declare enum GraphQLAppInstallationStatus {
    Pending = "PENDING",
    Completed = "COMPLETED",
    Disabled = "DISABLED"
}
export declare type GraphQLAppInstallation = {
    __typename?: "AppInstallation";
    id: Scalars["ID"];
    environment: GraphQLEnvironment;
    fields: Array<GraphQLIField>;
    sidebarElements: Array<GraphQLAppSidebarElement>;
    app: GraphQLApp;
    config: Scalars["JSON"];
    status: GraphQLAppInstallationStatus;
    authToken: Scalars["String"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
};
export declare type GraphQLCreateAppInstallationInput = {
    environment: Scalars["ID"];
    appApiId: Scalars["String"];
    status?: Maybe<GraphQLAppInstallationStatus>;
    config: Scalars["JSON"];
};
export declare type GraphQLUpdateAppInstallationInput = {
    appInstallationId: Scalars["ID"];
    config: Scalars["JSON"];
    status?: Maybe<GraphQLAppInstallationStatus>;
};
export declare type GraphQLDeleteAppInstallationInput = {
    appInstallationId: Scalars["ID"];
};
export declare type GraphQLCreateAppInstallationPayload = {
    __typename?: "CreateAppInstallationPayload";
    createdAppInstallation: GraphQLAppInstallation;
};
export declare type GraphQLUpdateAppInstallationPayload = {
    __typename?: "UpdateAppInstallationPayload";
    updatedAppInstallation: GraphQLAppInstallation;
};
export declare type GraphQLDeleteAppInstallationPayload = {
    __typename?: "DeleteAppInstallationPayload";
    deletedAppInstallationId: Scalars["ID"];
};
export declare type GraphQLEnumerationValue = {
    __typename?: "EnumerationValue";
    id: Scalars["ID"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
};
export declare type GraphQLEnumeration = {
    __typename?: "Enumeration";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    environment: GraphQLEnvironment;
    values: Array<GraphQLEnumerationValue>;
    isSystem: Scalars["Boolean"];
};
export declare type GraphQLCreateEnumerationInput = {
    environmentId: Scalars["ID"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    values: Array<GraphQLEnumerationValueCreateInput>;
};
export declare type GraphQLDeleteEnumerationInput = {
    id: Scalars["ID"];
};
export declare type GraphQLUpdateEnumerationInput = {
    id: Scalars["ID"];
    /**
     * New Api identifier to use,
     * will impact Content API
     */
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    /** List of values to create */
    valuesToCreate?: Maybe<Array<GraphQLEnumerationValueCreateInput>>;
    /** List of existing values to update */
    valuesToUpdate?: Maybe<Array<GraphQLEnumerationValueUpdateInput>>;
    /** List of value IDs to delete */
    valuesToDelete?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLEnumerationValueCreateInput = {
    apiId: Scalars["String"];
    displayName: Scalars["String"];
};
export declare type GraphQLEnumerationValueUpdateInput = {
    id: Scalars["ID"];
    /** Update enumeration value API identifier */
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
};
export declare type GraphQLIRequireableField = {
    isRequired: Scalars["Boolean"];
};
export declare type GraphQLIUniqueableField = {
    isUnique: Scalars["Boolean"];
};
export declare type GraphQLILocalizableField = {
    isLocalized: Scalars["Boolean"];
};
export declare type GraphQLITitleableField = {
    isTitle: Scalars["Boolean"];
};
export declare type GraphQLFieldValidationFloatRange = {
    __typename?: "FieldValidationFloatRange";
    min?: Maybe<Scalars["Float"]>;
    max?: Maybe<Scalars["Float"]>;
    errorMessage?: Maybe<Scalars["String"]>;
};
export declare type GraphQLFieldValidationRange = {
    __typename?: "FieldValidationRange";
    min?: Maybe<Scalars["Int"]>;
    max?: Maybe<Scalars["Int"]>;
    errorMessage?: Maybe<Scalars["String"]>;
};
export declare type GraphQLFieldValidationRegEx = {
    __typename?: "FieldValidationRegEx";
    regex?: Maybe<Scalars["String"]>;
    flags?: Maybe<Array<Scalars["String"]>>;
    errorMessage?: Maybe<Scalars["String"]>;
};
export declare type GraphQLFieldValidationIntRange = {
    __typename?: "FieldValidationIntRange";
    min?: Maybe<Scalars["Int"]>;
    max?: Maybe<Scalars["Int"]>;
    errorMessage?: Maybe<Scalars["String"]>;
};
export declare type GraphQLStringFieldValidations = {
    __typename?: "StringFieldValidations";
    characters?: Maybe<GraphQLFieldValidationRange>;
    listItemCount?: Maybe<GraphQLFieldValidationRange>;
    matches?: Maybe<GraphQLFieldValidationRegEx>;
    notMatches?: Maybe<GraphQLFieldValidationRegEx>;
};
export declare type GraphQLIntFieldValidations = {
    __typename?: "IntFieldValidations";
    range?: Maybe<GraphQLFieldValidationRange>;
    listItemCount?: Maybe<GraphQLFieldValidationRange>;
};
export declare type GraphQLFloatFieldValidations = {
    __typename?: "FloatFieldValidations";
    range?: Maybe<GraphQLFieldValidationFloatRange>;
    listItemCount?: Maybe<GraphQLFieldValidationRange>;
};
export declare type GraphQLSimpleFieldValidations = GraphQLStringFieldValidations | GraphQLIntFieldValidations | GraphQLFloatFieldValidations;
export declare type GraphQLIField = {
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
/** Field types */
export declare enum GraphQLSimpleFieldType {
    Id = "ID",
    String = "STRING",
    Richtext = "RICHTEXT",
    Int = "INT",
    Float = "FLOAT",
    Boolean = "BOOLEAN",
    Json = "JSON",
    Datetime = "DATETIME",
    Date = "DATE",
    Location = "LOCATION",
    Color = "COLOR"
}
export declare enum GraphQLRemoteFieldType {
    Graphql = "GRAPHQL",
    Rest = "REST"
}
export declare enum GraphQLRemoteFieldApiMethod {
    Get = "GET",
    Post = "POST"
}
export declare enum GraphQLGraphQlRemoteSourceIntrospectionMethod {
    Get = "GET",
    Post = "POST"
}
export declare enum GraphQLEnumerableFieldType {
    Enumeration = "ENUMERATION"
}
export declare enum GraphQLRelationalFieldType {
    Relation = "RELATION",
    Asset = "ASSET"
}
export declare enum GraphQLComponentFieldType {
    Component = "COMPONENT"
}
export declare enum GraphQLUnionFieldType {
    Union = "UNION"
}
export declare enum GraphQLComponentUnionFieldType {
    ComponentUnion = "COMPONENT_UNION"
}
export declare enum GraphQLVisibilityTypes {
    /** Field can be read and edited */
    ReadWrite = "READ_WRITE",
    /** Field is shown but can't be edited in the UI, only through the API */
    ReadOnly = "READ_ONLY",
    /** Field is not shown, but can be used by other fields such as slugs or UI Extensions */
    Hidden = "HIDDEN",
    /** Field is not shown, and can only be read or edited through the API */
    ApiOnly = "API_ONLY"
}
export declare type GraphQLSimpleField = GraphQLIField & GraphQLIRequireableField & GraphQLIUniqueableField & GraphQLILocalizableField & GraphQLITitleableField & {
    __typename?: "SimpleField";
    id: Scalars["ID"];
    type: GraphQLSimpleFieldType;
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    isRequired: Scalars["Boolean"];
    isUnique: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    isLocalized: Scalars["Boolean"];
    initialValue?: Maybe<Scalars["String"]>;
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    isTitle: Scalars["Boolean"];
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    extensions?: Maybe<Scalars["JSON"]>;
    validations?: Maybe<GraphQLSimpleFieldValidations>;
    meta?: Maybe<Scalars["JSON"]>;
    embedsEnabled?: Maybe<Scalars["Boolean"]>;
    /** list of embeddable models */
    embeddableModels?: Maybe<Array<GraphQLIModel>>;
};
export declare type GraphQLRemoteTypeDefinition = {
    __typename?: "RemoteTypeDefinition";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    sdl: Scalars["String"];
    graphqlType: GraphQLRemote_Graphql_Type;
    isSystem: Scalars["Boolean"];
};
export declare type GraphQLIRemoteFieldConfig = {
    returnType: GraphQLRemoteTypeDefinition;
    /** Headers that will be sent to the remote source. Those headers will override the headers defined on the remote source if setup */
    headers?: Maybe<Scalars["JSON"]>;
    method: GraphQLRemoteFieldApiMethod;
    cacheTTLSeconds?: Maybe<Scalars["Int"]>;
    remoteSource: GraphQLIRemoteSource;
    forwardClientHeaders: Scalars["Boolean"];
};
export declare type GraphQLGraphQlRemoteFieldConfig = GraphQLIRemoteFieldConfig & {
    __typename?: "GraphQLRemoteFieldConfig";
    returnType: GraphQLRemoteTypeDefinition;
    headers?: Maybe<Scalars["JSON"]>;
    method: GraphQLRemoteFieldApiMethod;
    cacheTTLSeconds?: Maybe<Scalars["Int"]>;
    forwardClientHeaders: Scalars["Boolean"];
    /** In case of apiType GraphQL graphqlQuery contains the GraphQL query that will be sent to the remote source */
    query?: Maybe<Scalars["String"]>;
    operationName?: Maybe<Scalars["String"]>;
    remoteSource: GraphQLGraphQlRemoteSource;
};
export declare type GraphQLRestRemoteFieldConfig = GraphQLIRemoteFieldConfig & {
    __typename?: "RestRemoteFieldConfig";
    returnType: GraphQLRemoteTypeDefinition;
    headers?: Maybe<Scalars["JSON"]>;
    method: GraphQLRemoteFieldApiMethod;
    cacheTTLSeconds?: Maybe<Scalars["Int"]>;
    forwardClientHeaders: Scalars["Boolean"];
    path?: Maybe<Scalars["String"]>;
    remoteSource: GraphQLRestRemoteSource;
};
export declare type GraphQLRemoteField = GraphQLIField & {
    __typename?: "RemoteField";
    id: Scalars["ID"];
    type: GraphQLRemoteFieldType;
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    isList: Scalars["Boolean"];
    isRequired: Scalars["Boolean"];
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
    remoteConfig: GraphQLIRemoteFieldConfig;
    inputArgs?: Maybe<Array<GraphQLFieldInputArg>>;
};
export declare type GraphQLEnumerableField = GraphQLIField & GraphQLIRequireableField & GraphQLIUniqueableField & GraphQLILocalizableField & GraphQLITitleableField & {
    __typename?: "EnumerableField";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    type: GraphQLEnumerableFieldType;
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    isRequired: Scalars["Boolean"];
    isUnique: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    isLocalized: Scalars["Boolean"];
    initialValue?: Maybe<GraphQLEnumerationValue>;
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    isTitle: Scalars["Boolean"];
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    enumeration: GraphQLEnumeration;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLRelationalField = GraphQLIField & GraphQLIRequireableField & {
    __typename?: "RelationalField";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    type: GraphQLRelationalFieldType;
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    isRequired: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    relatedModel: GraphQLIModel;
    relatedField: GraphQLRelationalField;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLUniDirectionalRelationalField = GraphQLIField & GraphQLIRequireableField & {
    __typename?: "UniDirectionalRelationalField";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    type: GraphQLRelationalFieldType;
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    isRequired: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    relatedModel: GraphQLIModel;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLComponentField = GraphQLIField & GraphQLIRequireableField & {
    __typename?: "ComponentField";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    type: GraphQLComponentFieldType;
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    isRequired: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    hasEmptyValues: Scalars["Boolean"];
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    component: GraphQLComponent;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
/** rename to RelationUnionField maybe at some point */
export declare type GraphQLUnionField = GraphQLIField & GraphQLIUnionField & {
    __typename?: "UnionField";
    id: Scalars["ID"];
    type: GraphQLUnionFieldType;
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    /** True if this field is the reverse side of the initally created union field */
    isMemberType: Scalars["Boolean"];
    union: GraphQLUnion;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
/** TODO: ModularComponentField is the name the designs use right now?! */
export declare type GraphQLComponentUnionField = GraphQLIField & GraphQLIRequireableField & {
    __typename?: "ComponentUnionField";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    type: GraphQLComponentUnionFieldType;
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    isRequired: Scalars["Boolean"];
    position: Scalars["Int"];
    /** @deprecated Use visibility instead */
    isHidden: Scalars["Boolean"];
    visibility: GraphQLVisibilityTypes;
    /**
     * This will throw a runtime error for fields that are on a component instead of model!
     * @deprecated Use parent instead
     */
    model: GraphQLIModel;
    parent: GraphQLIFieldParent;
    tableConfig: GraphQLFieldConfig;
    formConfig: GraphQLFieldConfig;
    components: Array<GraphQLComponent>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLUnion = {
    __typename?: "Union";
    id: Scalars["ID"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    memberTypes: Array<GraphQLUnionField>;
    field: GraphQLUnionField;
};
export declare type GraphQLIUnionField = {
    /** True if this field is the reverse side of the initally created union field */
    isMemberType: Scalars["Boolean"];
    union: GraphQLUnion;
};
export declare type GraphQLFieldConfig = {
    __typename?: "FieldConfig";
    config: Scalars["JSON"];
    id: Scalars["String"];
    renderer: Scalars["String"];
    extension?: Maybe<GraphQLFieldExtension>;
    appInstallation?: Maybe<GraphQLAppInstallation>;
    appElement?: Maybe<GraphQLFieldAppElement>;
};
export declare type GraphQLMoveFieldPayload = {
    __typename?: "MoveFieldPayload";
    movedFields: Array<GraphQLIField>;
};
export declare type GraphQLMoveSidebarElementPayload = {
    __typename?: "MoveSidebarElementPayload";
    movedSidebarElements: Array<GraphQLISidebarElement>;
};
export declare type GraphQLFieldValidationIntRangeInput = {
    min?: Maybe<Scalars["Int"]>;
    max?: Maybe<Scalars["Int"]>;
    errorMessage?: Maybe<Scalars["String"]>;
};
export declare type GraphQLFieldValidationFloatRangeInput = {
    min?: Maybe<Scalars["Float"]>;
    max?: Maybe<Scalars["Float"]>;
    errorMessage?: Maybe<Scalars["String"]>;
};
export declare type GraphQLFieldValidationRegExInput = {
    regex?: Maybe<Scalars["String"]>;
    flags?: Maybe<Array<Scalars["String"]>>;
    errorMessage?: Maybe<Scalars["String"]>;
};
export declare type GraphQLIntFieldValidationsInput = {
    range?: Maybe<GraphQLFieldValidationIntRangeInput>;
    listItemCount?: Maybe<GraphQLFieldValidationIntRangeInput>;
};
export declare type GraphQLFloatFieldValidationsInput = {
    range?: Maybe<GraphQLFieldValidationFloatRangeInput>;
    listItemCount?: Maybe<GraphQLFieldValidationIntRangeInput>;
};
export declare type GraphQLStringFieldValidationsInput = {
    characters?: Maybe<GraphQLFieldValidationIntRangeInput>;
    listItemCount?: Maybe<GraphQLFieldValidationIntRangeInput>;
    matches?: Maybe<GraphQLFieldValidationRegExInput>;
    notMatches?: Maybe<GraphQLFieldValidationRegExInput>;
};
export declare type GraphQLSimpleFieldValidationsInput = {
    Int?: Maybe<GraphQLIntFieldValidationsInput>;
    Float?: Maybe<GraphQLFloatFieldValidationsInput>;
    String?: Maybe<GraphQLStringFieldValidationsInput>;
};
export declare type GraphQLEmbeddableModelsInput = {
    modelsToAdd?: Maybe<Array<Scalars["ID"]>>;
    modelsToRemove?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateSimpleFieldInput = {
    id: Scalars["ID"];
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    isUnique?: Maybe<Scalars["Boolean"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isLocalized?: Maybe<Scalars["Boolean"]>;
    isTitle?: Maybe<Scalars["Boolean"]>;
    initialValue?: Maybe<Scalars["String"]>;
    migrationValue?: Maybe<Scalars["String"]>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    validations?: Maybe<GraphQLSimpleFieldValidationsInput>;
    meta?: Maybe<Scalars["JSON"]>;
    embedsEnabled?: Maybe<Scalars["Boolean"]>;
    /** id's of embeddable models. */
    embeddableModels?: Maybe<GraphQLEmbeddableModelsInput>;
};
export declare type GraphQLUpdateRemoteFieldInput = {
    id: Scalars["ID"];
    apiId?: Maybe<Scalars["String"]>;
    remoteConfig?: Maybe<GraphQLUpdateRemoteFieldConfigInput>;
    inputArgs?: Maybe<GraphQLUpsertFieldInputArgInput>;
    isList?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLUpdateEnumerableFieldInput = {
    id: Scalars["ID"];
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isUnique?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isLocalized?: Maybe<Scalars["Boolean"]>;
    isTitle?: Maybe<Scalars["Boolean"]>;
    initialValue?: Maybe<Scalars["String"]>;
    migrationValue?: Maybe<Scalars["String"]>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLUpdateRelationalFieldInput = {
    id: Scalars["ID"];
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isUnidirectional?: Maybe<Scalars["Boolean"]>;
    /**
     * Marks the field as required.
     * Note: This is only supported for RelationFieldType ASSET!
     */
    isRequired?: Maybe<Scalars["Boolean"]>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLUpdateComponentFieldInput = {
    id: Scalars["ID"];
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLUpdateComponentUnionFieldInput = {
    id: Scalars["ID"];
    components?: Maybe<Array<Scalars["ID"]>>;
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLCreateMemberFieldInput = {
    /** ID of member model to add */
    modelId: Scalars["ID"];
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLUpdateUnionInput = {
    apiId?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    /** Models and member fields to add */
    membersToAdd?: Maybe<Array<GraphQLCreateMemberFieldInput>>;
    /** Models to remove from union (accepts Model ID) */
    membersToRemove?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLUpdateUnionFieldInput = {
    id: Scalars["ID"];
    union?: Maybe<GraphQLUpdateUnionInput>;
    apiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLFieldConfigInput = {
    renderer: Scalars["String"];
    config: Scalars["JSON"];
    extensionId?: Maybe<Scalars["ID"]>;
    appInstallationId?: Maybe<Scalars["ID"]>;
    appElementId?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLFieldConfigUpdateInput = {
    renderer?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    extensionId?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLCreateSimpleFieldInput = {
    modelId?: Maybe<Scalars["ID"]>;
    /**
     * This can be a model or component id, modelId must be empty when parentId is used
     * either modelId or parentId needs to be set and is required via validation, it will be made required.
     */
    parentId?: Maybe<Scalars["ID"]>;
    apiId: Scalars["String"];
    type: GraphQLSimpleFieldType;
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isRequired: Scalars["Boolean"];
    isUnique: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    isLocalized: Scalars["Boolean"];
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isTitle?: Maybe<Scalars["Boolean"]>;
    initialValue?: Maybe<Scalars["String"]>;
    migrationValue?: Maybe<Scalars["String"]>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    validations?: Maybe<GraphQLSimpleFieldValidationsInput>;
    meta?: Maybe<Scalars["JSON"]>;
    position?: Maybe<Scalars["Int"]>;
    embedsEnabled?: Maybe<Scalars["Boolean"]>;
    /** id's of embeddable models. Optional, but should be provided if embedsEnabled is true */
    embeddableModels?: Maybe<Array<Scalars["ID"]>>;
};
export declare type GraphQLRemoteFieldConfigInput = {
    /** Remote Type definitions apiId of the type the remote field should return. */
    returnTypeApiId: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    method: GraphQLRemoteFieldApiMethod;
    cacheTTLSeconds?: Maybe<Scalars["Int"]>;
    remoteSourceId: Scalars["ID"];
    /** In case of apiType GraphQL graphqlQuery contains the GraphQL query that will be sent to the remote source */
    graphQLQuery?: Maybe<Scalars["String"]>;
    /** In case of apiType REST restPath contains the path that will be appended to the API base url */
    restPath?: Maybe<Scalars["String"]>;
    /** If true, headers that are sent by the client will be forwarded to the remote source */
    forwardClientHeaders?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLUpdateRemoteFieldConfigInput = {
    /** Remote Type definitions apiId of the type the remote field should return. */
    returnTypeApiId?: Maybe<Scalars["String"]>;
    headers?: Maybe<Scalars["JSON"]>;
    method?: Maybe<GraphQLRemoteFieldApiMethod>;
    forwardClientHeaders?: Maybe<Scalars["Boolean"]>;
    /** In case of apiType GraphQL graphqlQuery contains the GraphQL query that will be sent to the remote source */
    graphQLQuery?: Maybe<Scalars["String"]>;
    /** In case of apiType REST restPath contains the path that will be appended to the base url of the api */
    restPath?: Maybe<Scalars["String"]>;
    cacheTTLSeconds?: Maybe<Scalars["Int"]>;
    remoteSourceId?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLUpsertFieldInputArgInputToCreateInput = {
    remoteTypeId: Scalars["ID"];
    apiId: Scalars["String"];
    isRequired: Scalars["Boolean"];
    isList: Scalars["Boolean"];
};
export declare type GraphQLUpsertFieldInputArgInputToUpdateInput = {
    inputArgId: Scalars["ID"];
    remoteTypeId?: Maybe<Scalars["ID"]>;
    apiId?: Maybe<Scalars["String"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    isList?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLUpsertFieldInputArgInputToDeleteInput = {
    inputArgId: Scalars["ID"];
};
export declare type GraphQLUpsertFieldInputArgInput = {
    fieldInputArgsToCreate?: Maybe<Array<GraphQLUpsertFieldInputArgInputToCreateInput>>;
    fieldInputArgsToDelete?: Maybe<Array<GraphQLUpsertFieldInputArgInputToDeleteInput>>;
    fieldInputArgsToUpdate?: Maybe<Array<GraphQLUpsertFieldInputArgInputToUpdateInput>>;
};
export declare type GraphQLCreateFieldInputArgInput = {
    remoteTypeId: Scalars["ID"];
    apiId: Scalars["String"];
    isRequired: Scalars["Boolean"];
    isList: Scalars["Boolean"];
};
export declare type GraphQLFieldInputArg = {
    __typename?: "FieldInputArg";
    id: Scalars["ID"];
    apiId: Scalars["String"];
    isRequired: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    remoteType: GraphQLRemoteTypeDefinition;
};
export declare type GraphQLBatchMigrationRemoteFieldInputArgInput = {
    remoteTypeApiId: Scalars["String"];
    apiId: Scalars["String"];
    isRequired: Scalars["Boolean"];
    isList: Scalars["Boolean"];
};
export declare type GraphQLBatchMigrationRemoteFieldConfigInput = {
    returnTypeApiId: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    method: GraphQLRemoteFieldApiMethod;
    cacheTTLSeconds?: Maybe<Scalars["Int"]>;
    remoteSourcePrefix: Scalars["String"];
    /** In case of apiType GraphQL graphqlQuery contains the GraphQL query that will be sent to the remote source */
    graphQLQuery?: Maybe<Scalars["String"]>;
    /** In case of apiType REST restPath contains the path that will be appended to the API base url */
    restPath?: Maybe<Scalars["String"]>;
    /** If true, headers that are sent by the client will be forwarded to the remote source */
    forwardClientHeaders?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLBatchMigrationUpdateRemoteFieldConfigInput = {
    returnTypeApiId?: Maybe<Scalars["String"]>;
    remoteSourcePrefix?: Maybe<Scalars["String"]>;
    headers?: Maybe<Scalars["JSON"]>;
    method?: Maybe<GraphQLRemoteFieldApiMethod>;
    cacheTTLSeconds?: Maybe<Scalars["Int"]>;
    /** In case of apiType GraphQL graphqlQuery contains the GraphQL query that will be sent to the remote source */
    graphQLQuery?: Maybe<Scalars["String"]>;
    /** In case of apiType REST restPath contains the path that will be appended to the API base url */
    restPath?: Maybe<Scalars["String"]>;
    /** If true, headers that are sent by the client will be forwarded to the remote source */
    forwardClientHeaders?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLBatchMigrationUpsertFieldInputArgInputToCreateInput = {
    remoteTypeApiId: Scalars["String"];
    apiId: Scalars["String"];
    isRequired: Scalars["Boolean"];
    isList: Scalars["Boolean"];
};
export declare type GraphQLBatchMigrationUpsertFieldInputArgInputToUpdateInput = {
    argApiId: Scalars["String"];
    remoteTypeApiId?: Maybe<Scalars["String"]>;
    apiId?: Maybe<Scalars["String"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    isList?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLBatchMigrationUpsertFieldInputArgInputToDeleteInput = {
    argApiId: Scalars["String"];
};
export declare type GraphQLBatchMigrationUpsertFieldInputArgInput = {
    fieldInputArgsToCreate?: Maybe<Array<GraphQLBatchMigrationUpsertFieldInputArgInputToCreateInput>>;
    fieldInputArgsToDelete?: Maybe<Array<GraphQLBatchMigrationUpsertFieldInputArgInputToDeleteInput>>;
    fieldInputArgsToUpdate?: Maybe<Array<GraphQLBatchMigrationUpsertFieldInputArgInputToUpdateInput>>;
};
export declare type GraphQLCreateRemoteFieldInput = {
    modelId?: Maybe<Scalars["ID"]>;
    /**
     * This can be a model or component id, modelId must be empty when parentId is used
     * either modelId or parentId needs to be set and is required via validation, it will be made required.
     */
    parentId?: Maybe<Scalars["ID"]>;
    apiId: Scalars["String"];
    type: GraphQLRemoteFieldType;
    remoteConfig: GraphQLRemoteFieldConfigInput;
    inputArgs?: Maybe<Array<GraphQLCreateFieldInputArgInput>>;
    isList: Scalars["Boolean"];
    isRequired: Scalars["Boolean"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLCreateEnumerableFieldInput = {
    modelId?: Maybe<Scalars["ID"]>;
    /**
     * This can be a model or component id, modelId must be empty when parentId is used
     * either modelId or parentId needs to be set and is required via validation, it will be made required.
     */
    parentId?: Maybe<Scalars["ID"]>;
    enumerationId: Scalars["ID"];
    type: GraphQLEnumerableFieldType;
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isRequired: Scalars["Boolean"];
    isList: Scalars["Boolean"];
    isUnique: Scalars["Boolean"];
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isLocalized?: Maybe<Scalars["Boolean"]>;
    isTitle?: Maybe<Scalars["Boolean"]>;
    initialValue?: Maybe<Scalars["String"]>;
    migrationValue?: Maybe<Scalars["String"]>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
    position?: Maybe<Scalars["Int"]>;
};
export declare type GraphQLCreateReverseField = {
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isList: Scalars["Boolean"];
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLCreateReverseRelationSide = {
    modelId: Scalars["ID"];
    field?: Maybe<GraphQLCreateReverseField>;
};
export declare type GraphQLCreateRelationalFieldInput = {
    modelId?: Maybe<Scalars["ID"]>;
    /**
     * This can be a model or component id, modelId must be empty when parentId is used
     * either modelId or parentId needs to be set and is required via validation, it will be made required.
     */
    parentId?: Maybe<Scalars["ID"]>;
    type: GraphQLRelationalFieldType;
    relationApiId?: Maybe<Scalars["String"]>;
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isList: Scalars["Boolean"];
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    /**
     * Marks the field as required.
     * Note: This is only supported for RelationFieldType ASSET!
     */
    isRequired?: Maybe<Scalars["Boolean"]>;
    reverseSide: GraphQLCreateReverseRelationSide;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
    position?: Maybe<Scalars["Int"]>;
};
export declare type GraphQLCreateUnionInput = {
    apiId: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    displayName: Scalars["String"];
    /** IDs of models to add to union */
    modelIds: Array<Scalars["ID"]>;
};
export declare type GraphQLCreateUnionFieldInput = {
    modelId?: Maybe<Scalars["ID"]>;
    /**
     * This can be a model or component id, modelId must be empty when parentId is used
     * either modelId or parentId needs to be set and is required via validation, it will be made required.
     */
    parentId?: Maybe<Scalars["ID"]>;
    type: GraphQLUnionFieldType;
    union: GraphQLCreateUnionInput;
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isList: Scalars["Boolean"];
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    reverseSide?: Maybe<GraphQLCreateReverseField>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
    position?: Maybe<Scalars["Int"]>;
};
export declare type GraphQLCreateComponentFieldInput = {
    /** This can be a model or component id */
    parentId: Scalars["ID"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isList: Scalars["Boolean"];
    visibility?: GraphQLVisibilityTypes;
    isRequired: Scalars["Boolean"];
    component: Scalars["ID"];
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
    position?: Maybe<Scalars["Int"]>;
};
export declare type GraphQLCreateComponentUnionFieldInput = {
    /** This can be a model or component id */
    parentId: Scalars["ID"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isList: Scalars["Boolean"];
    visibility?: GraphQLVisibilityTypes;
    components: Array<Scalars["ID"]>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
    position?: Maybe<Scalars["Int"]>;
};
export declare type GraphQLMoveFieldInput = {
    id: Scalars["ID"];
    position: Scalars["Int"];
};
export declare type GraphQLMoveSidebarElementInput = {
    id: Scalars["ID"];
    position: Scalars["Int"];
};
export declare type GraphQLUpdateSidebarElementInput = {
    id: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLResetSidebarElementsInput = {
    modelId: Scalars["ID"];
};
export declare type GraphQLResetSidebarElementsPayload = {
    __typename?: "ResetSidebarElementsPayload";
    model?: Maybe<GraphQLIModel>;
};
export declare type GraphQLUpdateSidebarElementPayload = {
    __typename?: "UpdateSidebarElementPayload";
    updatedSidebarElement: GraphQLISidebarElement;
};
export declare type GraphQLCreateCustomSidebarElementInput = {
    modelId: Scalars["ID"];
    extensionId?: Maybe<Scalars["ID"]>;
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    appElementId?: Maybe<Scalars["ID"]>;
    appInstallationId?: Maybe<Scalars["ID"]>;
};
export declare type GraphQLCreateSystemSidebarElementInput = {
    modelId: Scalars["ID"];
    type: GraphQLSystemSidebarElementType;
    config?: Maybe<Scalars["JSON"]>;
};
export declare type GraphQLCreateSidebarElementPayload = {
    __typename?: "CreateSidebarElementPayload";
    createdSidebarElement?: Maybe<GraphQLISidebarElement>;
};
export declare type GraphQLDeleteSidebarElementInput = {
    sidebarElementId: Scalars["ID"];
};
export declare type GraphQLDeleteSidebarElementPayload = {
    __typename?: "DeleteSidebarElementPayload";
    deletedSidebarElementId: Scalars["ID"];
};
export declare type GraphQLDeleteFieldInput = {
    id: Scalars["ID"];
};
/**
 * This types holds a superset of the allowed read operations on a model.
 * This means even if this states access is allowed, it could still potentially be denied.
 */
export declare type GraphQLModelViewerReadContentPermission = {
    __typename?: "ModelViewerReadContentPermission";
    allowedWithCondition: Scalars["Boolean"];
    allowedLocales: Array<GraphQLLocale>;
};
export declare type GraphQLModelViewerReadContentPermissionByStage = {
    __typename?: "ModelViewerReadContentPermissionByStage";
    stage: GraphQLStage;
    /**
     * If the current viewer is allowed to read this models content for the provided stage,
     * this field will return the potential limitations that must be met.
     * `null` means not allowed!
     */
    allowed?: Maybe<GraphQLModelViewerReadContentPermission>;
};
export declare type GraphQLModelViewerContentPermission = {
    __typename?: "ModelViewerContentPermission";
    /** Lists all stages and the corresponding read permissions the user has on those stages. */
    readByStages: Array<GraphQLModelViewerReadContentPermissionByStage>;
    readVersion: Scalars["Boolean"];
};
/** Simplified computed version of the permissions the current viewer has on this model */
export declare type GraphQLModelViewerPermission = {
    __typename?: "ModelViewerPermission";
    content: GraphQLModelViewerContentPermission;
};
export declare type GraphQLIFieldParent = {
    id: Scalars["ID"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
};
export declare type GraphQLIModel = {
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    apiIdPlural: Scalars["String"];
    isLocalized: Scalars["Boolean"];
    titleFields: Array<GraphQLIField>;
    fields: Array<GraphQLIField>;
    field: GraphQLIField;
    environment: GraphQLEnvironment;
    contentViews: Array<GraphQLContentView>;
    /** Model has at least one document */
    hasContent: Scalars["Boolean"];
    isVersioned: Scalars["Boolean"];
    viewerPermission: GraphQLModelViewerPermission;
    sidebarElements: Array<GraphQLISidebarElement>;
    hasLocalizedComponents: Scalars["Boolean"];
};
export declare type GraphQLIModelFieldsArgs = {
    includeHiddenFields?: Maybe<Scalars["Boolean"]>;
    includeApiOnlyFields?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLIModelFieldArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLIModelContentViewsArgs = {
    includeSystemContentViews?: Maybe<Scalars["Boolean"]>;
    filter?: Maybe<GraphQLContentViewFilterInput>;
};
export declare type GraphQLSidebarElements = GraphQLSystemSidebarElement | GraphQLAppSidebarElement | GraphQLExtensionSidebarElement | GraphQLCustomSidebarElement;
export declare type GraphQLISidebarElement = {
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    position: Scalars["Int"];
    isEnabled: Scalars["Boolean"];
    model: GraphQLIModel;
};
export declare type GraphQLCustomSidebarElement = GraphQLISidebarElement & {
    __typename?: "CustomSidebarElement";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    position: Scalars["Int"];
    isEnabled: Scalars["Boolean"];
    model: GraphQLIModel;
    extension: GraphQLSidebarExtension;
};
export declare enum GraphQLSystemSidebarElementType {
    Information = "INFORMATION",
    Stages = "STAGES",
    Localizations = "LOCALIZATIONS",
    Versions = "VERSIONS",
    PreviewUrls = "PREVIEW_URLS",
    Releases = "RELEASES"
}
export declare type GraphQLSystemSidebarElement = GraphQLISidebarElement & {
    __typename?: "SystemSidebarElement";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    position: Scalars["Int"];
    isEnabled: Scalars["Boolean"];
    model: GraphQLIModel;
    type: GraphQLSystemSidebarElementType;
};
export declare type GraphQLExtensionSidebarElement = GraphQLISidebarElement & {
    __typename?: "ExtensionSidebarElement";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    position: Scalars["Int"];
    isEnabled: Scalars["Boolean"];
    model: GraphQLIModel;
    extension: GraphQLSidebarExtension;
};
export declare type GraphQLAppSidebarElement = GraphQLISidebarElement & {
    __typename?: "AppSidebarElement";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    config?: Maybe<Scalars["JSON"]>;
    position: Scalars["Int"];
    isEnabled: Scalars["Boolean"];
    model: GraphQLIModel;
    appElement: GraphQLFormSidebarAppElement;
    appInstallation: GraphQLAppInstallation;
};
export declare type GraphQLModel = GraphQLIModel & GraphQLIFieldParent & {
    __typename?: "Model";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    apiIdPlural: Scalars["String"];
    /** Is true when at least one field is marked as localized */
    isLocalized: Scalars["Boolean"];
    titleFields: Array<GraphQLIField>;
    fields: Array<GraphQLIField>;
    field: GraphQLIField;
    environment: GraphQLEnvironment;
    contentViews: Array<GraphQLContentView>;
    /** Model has at least one document */
    hasContent: Scalars["Boolean"];
    isVersioned: Scalars["Boolean"];
    viewerPermission: GraphQLModelViewerPermission;
    sidebarElements: Array<GraphQLISidebarElement>;
    hasLocalizedComponents: Scalars["Boolean"];
};
export declare type GraphQLModelFieldsArgs = {
    includeHiddenFields?: Maybe<Scalars["Boolean"]>;
    includeApiOnlyFields?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLModelFieldArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLModelContentViewsArgs = {
    includeSystemContentViews?: Maybe<Scalars["Boolean"]>;
    filter?: Maybe<GraphQLContentViewFilterInput>;
};
export declare type GraphQLComponent = GraphQLIFieldParent & {
    __typename?: "Component";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    apiIdPlural: Scalars["String"];
    isSystem: Scalars["Boolean"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /** Is true when at least one field is marked as localized */
    isLocalized: Scalars["Boolean"];
    titleFields: Array<GraphQLIField>;
    fields: Array<GraphQLIField>;
    environment: GraphQLEnvironment;
    /** Component has at least one instance in any of its usages */
    hasContent: Scalars["Boolean"];
};
export declare type GraphQLComponentFieldsArgs = {
    includeHiddenFields?: Maybe<Scalars["Boolean"]>;
    includeApiOnlyFields?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLAssetModel = GraphQLIModel & GraphQLIFieldParent & {
    __typename?: "AssetModel";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    apiIdPlural: Scalars["String"];
    isLocalized: Scalars["Boolean"];
    titleFields: Array<GraphQLIField>;
    fields: Array<GraphQLIField>;
    field: GraphQLIField;
    environment: GraphQLEnvironment;
    contentViews: Array<GraphQLContentView>;
    /** Model has at least one document */
    hasContent: Scalars["Boolean"];
    isVersioned: Scalars["Boolean"];
    viewerPermission: GraphQLModelViewerPermission;
    sidebarElements: Array<GraphQLISidebarElement>;
    hasLocalizedComponents: Scalars["Boolean"];
};
export declare type GraphQLAssetModelFieldsArgs = {
    includeHiddenFields?: Maybe<Scalars["Boolean"]>;
    includeApiOnlyFields?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLAssetModelFieldArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLAssetModelContentViewsArgs = {
    includeSystemContentViews?: Maybe<Scalars["Boolean"]>;
    filter?: Maybe<GraphQLContentViewFilterInput>;
};
export declare type GraphQLUserModel = GraphQLIModel & GraphQLIFieldParent & {
    __typename?: "UserModel";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    apiIdPlural: Scalars["String"];
    isLocalized: Scalars["Boolean"];
    titleFields: Array<GraphQLIField>;
    fields: Array<GraphQLIField>;
    field: GraphQLIField;
    environment: GraphQLEnvironment;
    contentViews: Array<GraphQLContentView>;
    /** Model has at least one document */
    hasContent: Scalars["Boolean"];
    isVersioned: Scalars["Boolean"];
    viewerPermission: GraphQLModelViewerPermission;
    sidebarElements: Array<GraphQLISidebarElement>;
    hasLocalizedComponents: Scalars["Boolean"];
};
export declare type GraphQLUserModelFieldsArgs = {
    includeHiddenFields?: Maybe<Scalars["Boolean"]>;
    includeApiOnlyFields?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLUserModelFieldArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLUserModelContentViewsArgs = {
    includeSystemContentViews?: Maybe<Scalars["Boolean"]>;
    filter?: Maybe<GraphQLContentViewFilterInput>;
};
export declare type GraphQLSchedulingModel = GraphQLIModel & GraphQLIFieldParent & {
    __typename?: "SchedulingModel";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isSystem: Scalars["Boolean"];
    apiIdPlural: Scalars["String"];
    isLocalized: Scalars["Boolean"];
    titleFields: Array<GraphQLIField>;
    fields: Array<GraphQLIField>;
    field: GraphQLIField;
    environment: GraphQLEnvironment;
    contentViews: Array<GraphQLContentView>;
    /** Model has at least one document */
    hasContent: Scalars["Boolean"];
    isVersioned: Scalars["Boolean"];
    viewerPermission: GraphQLModelViewerPermission;
    sidebarElements: Array<GraphQLISidebarElement>;
    hasLocalizedComponents: Scalars["Boolean"];
};
export declare type GraphQLSchedulingModelFieldsArgs = {
    includeHiddenFields?: Maybe<Scalars["Boolean"]>;
    includeApiOnlyFields?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLSchedulingModelFieldArgs = {
    id: Scalars["ID"];
};
export declare type GraphQLSchedulingModelContentViewsArgs = {
    includeSystemContentViews?: Maybe<Scalars["Boolean"]>;
    filter?: Maybe<GraphQLContentViewFilterInput>;
};
export declare type GraphQLCreateModelInput = {
    environmentId: Scalars["ID"];
    apiId: Scalars["String"];
    apiIdPlural: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLDuplicateModelInput = {
    modelId: Scalars["ID"];
    apiId: Scalars["String"];
    apiIdPlural: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLUpdateModelInput = {
    id: Scalars["ID"];
    /**
     * Rename singular API ID to
     * specified value
     */
    apiId?: Maybe<Scalars["String"]>;
    /**
     * Rename plural API ID to
     * specified value
     */
    apiIdPlural?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLDeleteModelInput = {
    id: Scalars["ID"];
};
export declare type GraphQLCreateComponentInput = {
    environmentId: Scalars["ID"];
    apiId: Scalars["String"];
    apiIdPlural: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLDuplicateComponentInput = {
    componentId: Scalars["ID"];
    apiId: Scalars["String"];
    apiIdPlural: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLUpdateComponentInput = {
    id: Scalars["ID"];
    /**
     * Rename singular API ID to
     * specified value
     */
    apiId?: Maybe<Scalars["String"]>;
    /**
     * Rename plural API ID to
     * specified value
     */
    apiIdPlural?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLDeleteComponentInput = {
    id: Scalars["ID"];
};
export declare type GraphQLLocale = {
    __typename?: "Locale";
    id: Scalars["ID"];
    createdAt: Scalars["DateTime"];
    updatedAt: Scalars["DateTime"];
    /**
     * Specifies if the locale is used as the
     * default locale which impacts the Content API
     */
    isDefault: Scalars["Boolean"];
    /**
     * Determines how the locale is
     * exposed in the Content API
     */
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateLocaleInput = {
    environmentId: Scalars["ID"];
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLUpdateLocaleInput = {
    /** ID of locale to update */
    id: Scalars["ID"];
    /**
     * Mark locale as default,
     * will impact the Content API
     */
    isDefault?: Maybe<Scalars["Boolean"]>;
    /**
     * Rename Locale apiId,
     * will impact the Content API
     */
    apiId?: Maybe<Scalars["String"]>;
    /**
     * Update the Locale's
     * display name
     */
    displayName?: Maybe<Scalars["String"]>;
    /** Update locale description */
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLDeleteLocaleInput = {
    /** ID of Locale to delete */
    id: Scalars["ID"];
    /**
     * Delete all localizations for this locale.
     * This will prevent an exception from
     * being raised if documents were previously
     * localized in this locale
     */
    force?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLCreateStageInput = {
    environmentId: Scalars["ID"];
    /**
     * Identifier to be used in
     * Content API Schema
     */
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    /** Color that will be used in the webapp */
    colorPaletteId: GraphQLColorPalette;
    description?: Maybe<Scalars["String"]>;
    position?: Maybe<Scalars["Int"]>;
};
export declare type GraphQLUpdateStageInput = {
    /** ID of stage to update */
    id: Scalars["ID"];
    /** Color that will be used in the webapp */
    colorPaletteId?: Maybe<GraphQLColorPalette>;
    /**
     * Rename Stage apiId,
     * will impact the Content API
     */
    apiId?: Maybe<Scalars["String"]>;
    /**
     * Update the Stage
     * display name
     */
    displayName?: Maybe<Scalars["String"]>;
    /** Update stage description */
    description?: Maybe<Scalars["String"]>;
    position?: Maybe<Scalars["Int"]>;
};
export declare type GraphQLDeleteStageInput = {
    /** ID of Stage to delete */
    id: Scalars["ID"];
    /**
     * Delete all documents in stage.
     * This will prevent an exception from
     * being raised if documents were previously
     * published to this stage
     */
    force?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLEnvironmentPermissions = {
    __typename?: "EnvironmentPermissions";
    /** True if mutations on this stage are allowed */
    allowMutations: Scalars["Boolean"];
};
/** Permissions of an environment */
export declare type GraphQLEnvironmentPermissionsInput = {
    /** True if mutations on this environment are allowed */
    allowMutations: Scalars["Boolean"];
};
export declare type GraphQLUpdateEnvironmentInput = {
    /** ID of environment to update */
    id: Scalars["ID"];
    /** Update the environment display name */
    displayName?: Maybe<Scalars["String"]>;
    /** Update the environment description */
    description?: Maybe<Scalars["String"]>;
};
export declare type GraphQLUpdateEnvironmentPayload = {
    __typename?: "UpdateEnvironmentPayload";
    updatedEnvironment: GraphQLEnvironment;
};
export declare type GraphQLQuery = {
    __typename?: "Query";
    metaInfo: GraphQLMetaInfo;
    viewer: GraphQLIViewer;
    /** @deprecated Use viewer instead */
    _viewer: GraphQLIViewer;
};
export declare type GraphQLAsyncOperationPayload = {
    __typename?: "AsyncOperationPayload";
    migration: GraphQLMigration;
};
export declare type GraphQLCreateEnvironmentInput = {
    /**
     * This will be used in your
     * API endpoint and has to be
     * an all-lowercase alphanumeric
     * string between 1 and 16 characters
     */
    name: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /**
     * Specify which environment to use
     * as origin
     */
    fromEnvironment: Scalars["ID"];
    /**
     * Allows to create environment
     * with content of origin environment
     */
    withContent?: Maybe<Scalars["Boolean"]>;
    /**
     * Allows to create environment
     * with webhooks of the origin environment.
     * By default cloned environments will get the same webhooks that will be initially deactivated.
     */
    withWebhooks?: Scalars["Boolean"];
};
export declare type GraphQLDeleteEnvironmentInput = {
    id: Scalars["ID"];
};
export declare type GraphQLCreateEnvironmentPayload = {
    __typename?: "CreateEnvironmentPayload";
    createdEnvironment: GraphQLEnvironment;
};
export declare type GraphQLDeleteEnvironmentPayload = {
    __typename?: "DeleteEnvironmentPayload";
    deletedEnvironmentId: Scalars["ID"];
};
/** Creating a model. */
export declare type GraphQLBatchMigrationCreateModelInput = {
    apiId: Scalars["String"];
    apiIdPlural: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
/** Updating a model. */
export declare type GraphQLBatchMigrationUpdateModelInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    apiIdPlural?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
};
/** Deleting a model. */
export declare type GraphQLBatchMigrationDeleteModelInput = {
    apiId: Scalars["String"];
};
/** Creating a component. */
export declare type GraphQLBatchMigrationCreateComponentInput = {
    apiId: Scalars["String"];
    apiIdPlural: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
/** Updating a component. */
export declare type GraphQLBatchMigrationUpdateComponentInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    apiIdPlural?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
};
/** Deleting a component. */
export declare type GraphQLBatchMigrationDeleteComponentInput = {
    apiId: Scalars["String"];
};
/** Creating a custom type definition */
export declare type GraphQLBatchMigrationCreateCustomTypeDefinitionInput = {
    /**
     * GraphQL type definition in SDL format
     * Can be enum or object type
     */
    sdl: Scalars["String"];
};
/** Creating a custom input type definition */
export declare type GraphQLBatchMigrationCreateCustomInputTypeDefinitionInput = {
    /** GraphQL type input definition in SDL format */
    sdl: Scalars["String"];
};
/** Delete an existing custom input type definition */
export declare type GraphQLBatchMigrationDeleteCustomInputTypeDefinitionInput = {
    apiId: Scalars["String"];
};
/** Delete an existing custom type definition */
export declare type GraphQLBatchMigrationDeleteRemoteTypeDefinitionInput = {
    apiId: Scalars["String"];
};
/** Deleting a stage. */
export declare type GraphQLBatchMigrationDeleteStageInput = {
    apiId: Scalars["String"];
};
/** Updating a stage */
export declare type GraphQLBatchMigrationUpdateStageInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    color?: Maybe<GraphQLColorPalette>;
    display?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    position?: Maybe<Scalars["Int"]>;
};
/** Creating a stage. */
export declare type GraphQLBatchMigrationCreateStageInput = {
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    color: GraphQLColorPalette;
    description?: Maybe<Scalars["String"]>;
    position?: Maybe<Scalars["Int"]>;
};
/** Deleting a field. */
export declare type GraphQLBatchMigrationDeleteFieldInput = {
    apiId: Scalars["String"];
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
};
/** Creating a simple field. */
export declare type GraphQLBatchMigrationEmbeddableModelsInput = {
    modelsToAdd?: Maybe<Array<Scalars["String"]>>;
    modelsToRemove?: Maybe<Array<Scalars["String"]>>;
};
/** Creating a simple field. */
export declare type GraphQLBatchMigrationCreateSimpleFieldInput = {
    apiId: Scalars["String"];
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
    type: GraphQLSimpleFieldType;
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    tableRenderer?: Maybe<Scalars["String"]>;
    formRenderer?: Maybe<Scalars["String"]>;
    tableExtension?: Maybe<Scalars["String"]>;
    formExtension?: Maybe<Scalars["String"]>;
    formConfig?: Maybe<Scalars["JSON"]>;
    tableConfig?: Maybe<Scalars["JSON"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isLocalized?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    isUnique?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isTitle?: Maybe<Scalars["Boolean"]>;
    position?: Maybe<Scalars["Int"]>;
    validations?: Maybe<GraphQLSimpleFieldValidationsInput>;
    migrationValue?: Maybe<Scalars["String"]>;
    embedsEnabled?: Maybe<Scalars["Boolean"]>;
    /** id's of embeddable models. Optional, but should be provided if embedsEnabled is true */
    embeddableModels?: Maybe<Array<Scalars["String"]>>;
};
/**
 * """
 * Creating a remote field.
 * """
 */
export declare type GraphQLBatchMigrationCreateRemoteFieldInput = {
    apiId: Scalars["String"];
    parentApiId: Scalars["String"];
    type: GraphQLRemoteFieldType;
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    tableRenderer?: Maybe<Scalars["String"]>;
    formRenderer?: Maybe<Scalars["String"]>;
    tableExtension?: Maybe<Scalars["String"]>;
    formExtension?: Maybe<Scalars["String"]>;
    formConfig?: Maybe<Scalars["JSON"]>;
    tableConfig?: Maybe<Scalars["JSON"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    position?: Maybe<Scalars["Int"]>;
    remoteConfig: GraphQLBatchMigrationRemoteFieldConfigInput;
    inputArgs?: Maybe<Array<GraphQLBatchMigrationRemoteFieldInputArgInput>>;
};
export declare type GraphQLBatchMigrationUpdateRemoteFieldInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    parentApiId: Scalars["String"];
    remoteConfig?: Maybe<GraphQLBatchMigrationUpdateRemoteFieldConfigInput>;
    inputArgs?: Maybe<GraphQLBatchMigrationUpsertFieldInputArgInput>;
    isList?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    formConfig?: Maybe<GraphQLFieldConfigInput>;
    tableConfig?: Maybe<GraphQLFieldConfigInput>;
    extensions?: Maybe<Scalars["JSON"]>;
    meta?: Maybe<Scalars["JSON"]>;
};
/** Creating an enumerable field. */
export declare type GraphQLBatchMigrationCreateEnumerableFieldInput = {
    apiId: Scalars["String"];
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
    enumerationApiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    tableRenderer?: Maybe<Scalars["String"]>;
    formRenderer?: Maybe<Scalars["String"]>;
    tableExtension?: Maybe<Scalars["String"]>;
    formExtension?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isLocalized?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    isUnique?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isTitle?: Maybe<Scalars["Boolean"]>;
    position?: Maybe<Scalars["Int"]>;
};
/** updating a union field */
export declare type GraphQLBatchMigrationUpdateUnionFieldInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    reverseField?: Maybe<GraphQLBatchMigrationUpdateReverseUnionFieldInput>;
};
/** Creating a union field */
export declare type GraphQLBatchMigrationCreateUnionFieldInput = {
    apiId: Scalars["String"];
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    tableRenderer?: Maybe<Scalars["String"]>;
    formRenderer?: Maybe<Scalars["String"]>;
    tableExtension?: Maybe<Scalars["String"]>;
    formExtension?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    reverseField: GraphQLBatchMigrationCreateReverseUnionFieldInput;
};
/** updating a component-union field */
export declare type GraphQLBatchMigrationUpdateComponentUnionFieldInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    parentApiId: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    componentApiIds?: Maybe<Array<Scalars["String"]>>;
};
/** Creating a component-union field */
export declare type GraphQLBatchMigrationCreateComponentUnionFieldInput = {
    apiId: Scalars["String"];
    parentApiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    tableRenderer?: Maybe<Scalars["String"]>;
    formRenderer?: Maybe<Scalars["String"]>;
    tableExtension?: Maybe<Scalars["String"]>;
    formExtension?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    componentApiIds: Array<Scalars["String"]>;
};
/** reverse field args */
export declare type GraphQLBatchMigrationCreateReverseUnionFieldInput = {
    apiId?: Maybe<Scalars["String"]>;
    modelApiIds: Array<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
};
/** reverse field args */
export declare type GraphQLBatchMigrationUpdateReverseUnionFieldInput = {
    modelApiIds: Array<Scalars["String"]>;
};
/** Creating a relational field */
export declare type GraphQLBatchMigrationCreateRelationalFieldInput = {
    apiId: Scalars["String"];
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
    type: GraphQLRelationalFieldType;
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    tableRenderer?: Maybe<Scalars["String"]>;
    formRenderer?: Maybe<Scalars["String"]>;
    tableExtension?: Maybe<Scalars["String"]>;
    formExtension?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    /**
     * Marks the field as required.
     * Note: This is only supported for RelationFieldType ASSET!
     */
    isRequired?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    reverseField: GraphQLBatchMigrationCreateReverseRelationalFieldInput;
};
/** Creating a component field */
export declare type GraphQLBatchMigrationCreateComponentFieldInput = {
    apiId: Scalars["String"];
    /** model or content */
    parentApiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    tableRenderer?: Maybe<Scalars["String"]>;
    formRenderer?: Maybe<Scalars["String"]>;
    tableExtension?: Maybe<Scalars["String"]>;
    formExtension?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    componentApiId: Scalars["String"];
    position?: Maybe<Scalars["Int"]>;
};
/** reverse field args */
export declare type GraphQLBatchMigrationCreateReverseRelationalFieldInput = {
    apiId: Scalars["String"];
    modelApiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isUnidirectional?: Maybe<Scalars["Boolean"]>;
};
/** Updating relational field */
export declare type GraphQLBatchMigrationUpdateRelationalFieldInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isUnidirectional?: Maybe<Scalars["Boolean"]>;
    /**
     * Marks the field as required.
     * Note: This is only supported for RelationFieldType ASSET!
     */
    isRequired?: Maybe<Scalars["Boolean"]>;
};
/** Updating component field */
export declare type GraphQLBatchMigrationUpdateComponentFieldInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    parentApiId: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isRequired?: Maybe<Scalars["Boolean"]>;
};
/** Updating simple field */
export declare type GraphQLBatchMigrationUpdateSimpleFieldInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isLocalized?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    isUnique?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isTitle?: Maybe<Scalars["Boolean"]>;
    position?: Maybe<Scalars["Int"]>;
    initialValue?: Maybe<Scalars["String"]>;
    migrationValue?: Maybe<Scalars["String"]>;
    validations?: Maybe<GraphQLSimpleFieldValidationsInput>;
    embedsEnabled?: Maybe<Scalars["Boolean"]>;
    tableRenderer?: Maybe<Scalars["String"]>;
    formRenderer?: Maybe<Scalars["String"]>;
    tableExtension?: Maybe<Scalars["String"]>;
    formExtension?: Maybe<Scalars["String"]>;
    formConfig?: Maybe<Scalars["JSON"]>;
    tableConfig?: Maybe<Scalars["JSON"]>;
    /** id's of embeddable models. */
    embeddableModels?: Maybe<GraphQLBatchMigrationEmbeddableModelsInput>;
};
/** Updating enumerable field */
export declare type GraphQLBatchMigrationUpdateEnumerableFieldInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    /** either modelApiId or parentApiId needs to be set */
    modelApiId?: Maybe<Scalars["String"]>;
    parentApiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    isList?: Maybe<Scalars["Boolean"]>;
    isLocalized?: Maybe<Scalars["Boolean"]>;
    isRequired?: Maybe<Scalars["Boolean"]>;
    isUnique?: Maybe<Scalars["Boolean"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    visibility?: Maybe<GraphQLVisibilityTypes>;
    isTitle?: Maybe<Scalars["Boolean"]>;
    position?: Maybe<Scalars["Int"]>;
    initialValue?: Maybe<Scalars["String"]>;
    migrationValue?: Maybe<Scalars["String"]>;
};
/** Deleting enumarable field */
export declare type GraphQLBatchMigrationDeleteEnumerationInput = {
    apiId: Scalars["String"];
};
/** Creating enumeration */
export declare type GraphQLBatchMigrationCreateEnumerationInput = {
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    values: Array<GraphQLBatchMigrationCreateEnumerationValueInput>;
};
/** Updating enumeration */
export declare type GraphQLBatchMigrationUpdateEnumerationInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    valuesToCreate?: Maybe<Array<GraphQLBatchMigrationCreateEnumerationValueInput>>;
    valuesToUpdate?: Maybe<Array<GraphQLBatchMigrationUpdateEnumerationValueInput>>;
    valuesToDelete?: Maybe<Array<Scalars["String"]>>;
};
/** enumeration value */
export declare type GraphQLBatchMigrationCreateEnumerationValueInput = {
    apiId: Scalars["String"];
    displayName: Scalars["String"];
};
/** update enumeration value */
export declare type GraphQLBatchMigrationUpdateEnumerationValueInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    displayName?: Maybe<Scalars["String"]>;
};
/** Creating locale */
export declare type GraphQLBatchMigrationCreateLocaleInput = {
    apiId: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
};
/** Updating locale */
export declare type GraphQLBatchMigrationUpdateLocaleInput = {
    apiId: Scalars["String"];
    newApiId?: Maybe<Scalars["String"]>;
    isDefault?: Maybe<Scalars["Boolean"]>;
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
};
/** Deleting locale */
export declare type GraphQLBatchMigrationDeleteLocaleInput = {
    apiId: Scalars["String"];
    force?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLBatchMigrationCreateGraphQlRemoteSourceInput = {
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /** Unique prefix that will be prepended to all of the remote types. This value cannot be changed! */
    prefix: Scalars["String"];
    url: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    /**
     * Specific URL that will be used for introspection if the introspection is available on another url than the regular url.
     * Can be ignored if the introspection url is the same as the url of the remote source.
     */
    introspectionUrl?: Maybe<Scalars["String"]>;
    /** HTTP method that will be used for introspection */
    introspectionMethod: GraphQLGraphQlRemoteSourceIntrospectionMethod;
    /** HTTP headers that will be used for introspection */
    introspectionHeaders?: Maybe<Scalars["JSON"]>;
    /** Custom GraphQL input types that can be used as arguments in remote fields that belong to this remoteSource */
    remoteTypeDefinitions?: Maybe<GraphQLBatchMigrationCreateRemoteTypeDefinitionInput>;
    debugEnabled?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLBatchMigrationUpdateGraphQlRemoteSourceInput = {
    prefix: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    url?: Maybe<Scalars["String"]>;
    headers?: Maybe<Scalars["JSON"]>;
    introspectionUrl?: Maybe<Scalars["String"]>;
    introspectionMethod?: Maybe<GraphQLGraphQlRemoteSourceIntrospectionMethod>;
    introspectionHeaders?: Maybe<Scalars["JSON"]>;
    remoteTypeDefinitionsToUpsert?: Maybe<GraphQLBatchMigrationUpsertRemoteTypeDefinitionsInput>;
    debugEnabled?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLBatchMigrationCreateRestRemoteSourceInput = {
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /** Unique prefix that will be prepended to all of the remote types. This value cannot be changed! */
    prefix: Scalars["String"];
    url: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    /** Remote type definitions that the remote source supports or input types that can be used by any remote field of this remote source */
    remoteTypeDefinitions?: Maybe<GraphQLBatchMigrationCreateRemoteTypeDefinitionInput>;
    debugEnabled?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLBatchMigrationUpdateRestRemoteSourceInput = {
    prefix: Scalars["String"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    url?: Maybe<Scalars["String"]>;
    headers?: Maybe<Scalars["JSON"]>;
    remoteTypeDefinitionsToUpsert?: Maybe<GraphQLBatchMigrationUpsertRemoteTypeDefinitionsInput>;
    debugEnabled?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLBatchMigrationCreateRemoteTypeDefinitionInput = {
    sdl: Scalars["String"];
};
export declare type GraphQLBatchMigrationDeleteRemoteSourceInput = {
    prefix: Scalars["String"];
};
export declare type GraphQLBatchMigrationChangeInput = {
    /** Models */
    createModel?: Maybe<GraphQLBatchMigrationCreateModelInput>;
    updateModel?: Maybe<GraphQLBatchMigrationUpdateModelInput>;
    deleteModel?: Maybe<GraphQLBatchMigrationDeleteModelInput>;
    /** Components */
    createComponent?: Maybe<GraphQLBatchMigrationCreateComponentInput>;
    updateComponent?: Maybe<GraphQLBatchMigrationUpdateComponentInput>;
    deleteComponent?: Maybe<GraphQLBatchMigrationDeleteComponentInput>;
    /** Fields */
    createSimpleField?: Maybe<GraphQLBatchMigrationCreateSimpleFieldInput>;
    updateSimpleField?: Maybe<GraphQLBatchMigrationUpdateSimpleFieldInput>;
    createRemoteField?: Maybe<GraphQLBatchMigrationCreateRemoteFieldInput>;
    updateRemoteField?: Maybe<GraphQLBatchMigrationUpdateRemoteFieldInput>;
    createRelationalField?: Maybe<GraphQLBatchMigrationCreateRelationalFieldInput>;
    updateRelationalField?: Maybe<GraphQLBatchMigrationUpdateRelationalFieldInput>;
    createUnionField?: Maybe<GraphQLBatchMigrationCreateUnionFieldInput>;
    updateUnionField?: Maybe<GraphQLBatchMigrationUpdateUnionFieldInput>;
    createComponentField?: Maybe<GraphQLBatchMigrationCreateComponentFieldInput>;
    updateComponentField?: Maybe<GraphQLBatchMigrationUpdateComponentFieldInput>;
    createComponentUnionField?: Maybe<GraphQLBatchMigrationCreateComponentUnionFieldInput>;
    updateComponentUnionField?: Maybe<GraphQLBatchMigrationUpdateComponentUnionFieldInput>;
    createEnumerableField?: Maybe<GraphQLBatchMigrationCreateEnumerableFieldInput>;
    updateEnumerableField?: Maybe<GraphQLBatchMigrationUpdateEnumerableFieldInput>;
    deleteField?: Maybe<GraphQLBatchMigrationDeleteFieldInput>;
    /** Enumerations */
    createEnumeration?: Maybe<GraphQLBatchMigrationCreateEnumerationInput>;
    updateEnumeration?: Maybe<GraphQLBatchMigrationUpdateEnumerationInput>;
    deleteEnumeration?: Maybe<GraphQLBatchMigrationDeleteEnumerationInput>;
    /** Stage */
    createStage?: Maybe<GraphQLBatchMigrationCreateStageInput>;
    deleteStage?: Maybe<GraphQLBatchMigrationDeleteStageInput>;
    updateStage?: Maybe<GraphQLBatchMigrationUpdateStageInput>;
    /** Locale */
    createLocale?: Maybe<GraphQLBatchMigrationCreateLocaleInput>;
    deleteLocale?: Maybe<GraphQLBatchMigrationDeleteLocaleInput>;
    updateLocale?: Maybe<GraphQLBatchMigrationUpdateLocaleInput>;
    /** Remote Sources */
    createGraphQLRemoteSource?: Maybe<GraphQLBatchMigrationCreateGraphQlRemoteSourceInput>;
    updateGraphQLRemoteSource?: Maybe<GraphQLBatchMigrationUpdateGraphQlRemoteSourceInput>;
    createRESTRemoteSource?: Maybe<GraphQLBatchMigrationCreateRestRemoteSourceInput>;
    updateRESTRemoteSource?: Maybe<GraphQLBatchMigrationUpdateRestRemoteSourceInput>;
    deleteRemoteSource?: Maybe<GraphQLBatchMigrationDeleteRemoteSourceInput>;
};
export declare type GraphQLDiffEnvironmentPayload = {
    __typename?: "DiffEnvironmentPayload";
    changes: Array<Scalars["JSON"]>;
};
export declare type GraphQLBatchMigrationInput = {
    environmentId: Scalars["ID"];
    name?: Maybe<Scalars["String"]>;
    changes: Array<GraphQLBatchMigrationChangeInput>;
};
export declare type GraphQLNetlifySiteInput = {
    id: Scalars["String"];
    displayName: Scalars["String"];
};
export declare type GraphQLVercelProjectInput = {
    id: Scalars["String"];
    ref: Scalars["String"];
    displayName: Scalars["String"];
};
export declare type GraphQLCreateNetlifyIntegrationInput = {
    environmentId: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    /**
     * A selection of models where the integration should be displayed in the frontend.
     * If the integration should be displayed on every model, pass null or an empty array here.
     */
    models?: Maybe<Array<Scalars["ID"]>>;
    sites: Array<GraphQLNetlifySiteInput>;
    /**
     * This token is used to create the needed BuildHook and BuildNotifications in Netlify.
     * This token is only used once and won't be stored anywhere
     */
    accessToken: Scalars["String"];
};
export declare type GraphQLCreateVercelIntegrationInput = {
    environmentId: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    /**
     * A selection of models where the integration should be displayed in the frontend.
     * If the integration should be displayed on every model, pass null or an empty array here.
     */
    models?: Maybe<Array<Scalars["ID"]>>;
    projects: Array<GraphQLVercelProjectInput>;
    /**
     * This token is used to create the needed BuildHook and BuildNotifications in Netlify.
     * This token is only used once and won't be stored anywhere
     */
    accessToken: Scalars["String"];
};
export declare type GraphQLCreateGatsbyCloudIntegrationInput = {
    environmentId: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    /**
     * Prefix of your site
     * Only lower case alphabetical characters, numbers and underscores are allowed.
     */
    sitePrefix: Scalars["String"];
    /** URL to trigger a Deploy Build. */
    buildWebhookURL: Scalars["String"];
    /** URL to trigger a CMS Preview build. */
    previewWebhookURL: Scalars["String"];
};
export declare type GraphQLUpdateNetlifyIntegrationInput = {
    integrationId: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    models?: Maybe<Array<Scalars["ID"]>>;
    /** Overrides the currently setup netlify sites. Omit if you don't want to update the existing sites. */
    sites?: Maybe<Array<GraphQLNetlifySiteInput>>;
    /**
     * This token is used to create the needed BuildHook and BuildNotifications in Netlify.
     * This token is only used once and won't be stored anywhere
     */
    accessToken: Scalars["String"];
};
export declare type GraphQLUpdateVercelIntegrationInput = {
    integrationId: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    models?: Maybe<Array<Scalars["ID"]>>;
    /** Overrides the currently setup vercel projects. Omit if you don't want to update the existing projects. */
    projects?: Maybe<Array<GraphQLVercelProjectInput>>;
    /**
     * This token is used to create the needed BuildHook and BuildNotifications in Vercel.
     * This token is only used once and won't be stored anywhere
     */
    accessToken: Scalars["String"];
};
export declare type GraphQLUpdateGatsbyCloudIntegrationInput = {
    integrationId: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    /**
     * Prefix of your site
     * Only lower case alphabetical characters, numbers and underscores are allowed.
     */
    sitePrefix?: Maybe<Scalars["String"]>;
    /** URL to trigger a Deploy Build. This webhook will be triggered when publishing and unpublishing entries. */
    buildWebhookURL?: Maybe<Scalars["String"]>;
    previewWebhookURL?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateNetlifyIntegrationPayload = {
    __typename?: "CreateNetlifyIntegrationPayload";
    createdNetlifyIntegration: GraphQLNetlifyIntegration;
};
export declare type GraphQLCreateVercelIntegrationPayload = {
    __typename?: "CreateVercelIntegrationPayload";
    createdVercelIntegration: GraphQLVercelIntegration;
};
export declare type GraphQLCreateGatsbyCloudIntegrationPayload = {
    __typename?: "CreateGatsbyCloudIntegrationPayload";
    createdGatsbyCloudIntegration: GraphQLGatsbyCloudIntegration;
};
export declare type GraphQLUpdateNetlifyIntegrationPayload = {
    __typename?: "UpdateNetlifyIntegrationPayload";
    updatedNetlifyIntegration: GraphQLNetlifyIntegration;
};
export declare type GraphQLUpdateVercelIntegrationPayload = {
    __typename?: "UpdateVercelIntegrationPayload";
    updatedVercelIntegration: GraphQLVercelIntegration;
};
export declare type GraphQLUpdateGatsbyCloudIntegrationPayload = {
    __typename?: "UpdateGatsbyCloudIntegrationPayload";
    updatedGatsbyCloudIntegration: GraphQLGatsbyCloudIntegration;
};
export declare type GraphQLDeleteNetlifyIntegrationInput = {
    id: Scalars["ID"];
    /**
     * This token is used to cleanup the resources in Netlify that where used by this integration .
     * This token is only used once and won't be stored anywhere
     */
    accessToken: Scalars["String"];
};
export declare type GraphQLDeleteVercelIntegrationInput = {
    id: Scalars["ID"];
    /**
     * This token is used to cleanup the resources in Vercel that where used by this integration .
     * This token is only used once and won't be stored anywhere
     */
    accessToken: Scalars["String"];
};
export declare type GraphQLDeleteGatsbyCloudIntegrationInput = {
    id: Scalars["ID"];
};
export declare type GraphQLDeleteNetlifyIntegrationPayload = {
    __typename?: "DeleteNetlifyIntegrationPayload";
    deletedNetlifyIntegrationId: Scalars["ID"];
};
export declare type GraphQLDeleteVercelIntegrationPayload = {
    __typename?: "DeleteVercelIntegrationPayload";
    deletedVercelIntegrationId: Scalars["ID"];
};
export declare type GraphQLDeleteGatsbyCloudIntegrationPayload = {
    __typename?: "DeleteGatsbyCloudIntegrationPayload";
    deletedGatsbyCloudIntegrationId: Scalars["ID"];
};
export declare type GraphQLTriggerNetlifyIntegrationBuildInput = {
    siteId: Scalars["String"];
    integrationId: Scalars["ID"];
};
export declare type GraphQLTriggerVercelIntegrationBuildInput = {
    projectId: Scalars["String"];
    integrationId: Scalars["ID"];
};
export declare type GraphQLTriggerNetlifyIntegrationBuildPayload = {
    __typename?: "TriggerNetlifyIntegrationBuildPayload";
    integration: GraphQLNetlifyIntegration;
};
export declare type GraphQLTriggerVercelIntegrationBuildPayload = {
    __typename?: "TriggerVercelIntegrationBuildPayload";
    integration: GraphQLVercelIntegration;
};
export declare type GraphQLPromoteEnvironmentInput = {
    environmentId: Scalars["ID"];
    renameCurrentMasterApiIdTo: Scalars["String"];
    renameCurrentMasterDisplayNameTo: Scalars["String"];
};
export declare type GraphQLPromoteEnvironmentPayload = {
    __typename?: "PromoteEnvironmentPayload";
    promotedEnvironment: GraphQLEnvironment;
    previousMasterEnvironment: GraphQLEnvironment;
};
export declare type GraphQLUpsertRemoteTypeDefinitionsInput = {
    remoteTypeDefinitionsToCreate?: Maybe<Array<GraphQLUpsertRemoteTypeDefinitionToCreateInput>>;
    remoteTypeDefinitionsToDelete?: Maybe<Array<GraphQLUpsertRemoteTypeDefinitionToDeleteInput>>;
    remoteTypeDefinitionsToUpdate?: Maybe<Array<GraphQLUpsertRemoteTypeDefinitionToUpdateInput>>;
};
export declare type GraphQLBatchMigrationUpsertRemoteTypeDefinitionsInput = {
    remoteTypeDefinitionsToCreate?: Maybe<Array<GraphQLBatchMigrationUpsertRemoteTypeDefinitionToCreateInput>>;
    remoteTypeDefinitionsToDelete?: Maybe<Array<GraphQLBatchMigrationUpsertRemoteTypeDefinitionToDeleteInput>>;
    remoteTypeDefinitionsToUpdate?: Maybe<Array<GraphQLBatchMigrationUpsertRemoteTypeDefinitionToUpdateInput>>;
};
export declare type GraphQLUpsertRemoteTypeDefinitionToCreateInput = {
    sdl: Scalars["String"];
};
export declare type GraphQLUpsertRemoteTypeDefinitionToDeleteInput = {
    id: Scalars["ID"];
};
export declare type GraphQLUpsertRemoteTypeDefinitionToUpdateInput = {
    id: Scalars["ID"];
    sdl?: Maybe<Scalars["String"]>;
};
export declare type GraphQLBatchMigrationUpsertRemoteTypeDefinitionToCreateInput = {
    sdl: Scalars["String"];
};
export declare type GraphQLBatchMigrationUpsertRemoteTypeDefinitionToDeleteInput = {
    apiId: Scalars["String"];
};
export declare type GraphQLBatchMigrationUpsertRemoteTypeDefinitionToUpdateInput = {
    apiId: Scalars["String"];
    sdl?: Maybe<Scalars["String"]>;
};
export declare type GraphQLCreateRemoteTypeDefinitionInput = {
    sdl: Scalars["String"];
};
export declare enum GraphQLRemoteSourceType {
    Graphql = "GRAPHQL",
    Rest = "REST"
}
export declare type GraphQLDeleteRemoteSourceInput = {
    id: Scalars["ID"];
};
export declare type GraphQLCreateGraphQlRemoteSourceInput = {
    environmentId: Scalars["ID"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /** Unique prefix that will be prepended to all of the remote types. This value cannot be changed! */
    prefix: Scalars["String"];
    url: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    /**
     * Specific URL that will be used for introspection if the introspection is available on another url than the regular url.
     * Can be ignored if the introspection url is the same as the url of the remote source.
     */
    introspectionUrl?: Maybe<Scalars["String"]>;
    /** HTTP method that will be used for introspection */
    introspectionMethod: GraphQLGraphQlRemoteSourceIntrospectionMethod;
    /** HTTP headers that will be used for introspection */
    introspectionHeaders?: Maybe<Scalars["JSON"]>;
    /** Custom GraphQL input types that can be used as arguments in remote fields that belong to this remoteSource */
    remoteTypeDefinitions?: Maybe<Array<GraphQLCreateRemoteTypeDefinitionInput>>;
    debugEnabled?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLUpdateGraphQlRemoteSourceInput = {
    id: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    url?: Maybe<Scalars["String"]>;
    headers?: Maybe<Scalars["JSON"]>;
    introspectionUrl?: Maybe<Scalars["String"]>;
    introspectionMethod?: Maybe<GraphQLGraphQlRemoteSourceIntrospectionMethod>;
    introspectionHeaders?: Maybe<Scalars["JSON"]>;
    remoteTypeDefinitionsToUpsert?: Maybe<GraphQLUpsertRemoteTypeDefinitionsInput>;
    debugEnabled?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLCreateRestRemoteSourceInput = {
    environmentId: Scalars["ID"];
    displayName: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    /** Unique prefix that will be prepended to all of the remote types. This value cannot be changed! */
    prefix: Scalars["String"];
    url: Scalars["String"];
    headers?: Maybe<Scalars["JSON"]>;
    /** Remote type definitions that the remote source supports or input types that can be used by any remote field of this remote source */
    remoteTypeDefinitions?: Maybe<Array<GraphQLCreateRemoteTypeDefinitionInput>>;
    debugEnabled?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLUpdateRestRemoteSourceInput = {
    id: Scalars["ID"];
    displayName?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    url?: Maybe<Scalars["String"]>;
    headers?: Maybe<Scalars["JSON"]>;
    remoteTypeDefinitionsToUpsert?: Maybe<GraphQLUpsertRemoteTypeDefinitionsInput>;
    debugEnabled?: Maybe<Scalars["Boolean"]>;
};
export declare type GraphQLMutation = {
    __typename?: "Mutation";
    createContentView: GraphQLCreateContentViewPayload;
    updateContentView: GraphQLUpdateContentViewPayload;
    deleteContentView: GraphQLDeleteContentViewPayload;
    moveContentView: GraphQLMoveContentViewPayload;
    createViewGroup: GraphQLCreateViewGroupPayload;
    updateViewGroup: GraphQLUpdateViewGroupPayload;
    deleteViewGroup: GraphQLDeleteViewGroupPayload;
    moveViewGroup: GraphQLMoveViewGroupPayload;
    sendInvite: GraphQLSendInvitePayload;
    revokeInvite: GraphQLRevokeInvitePayload;
    acceptInvite: GraphQLAcceptInvitePayload;
    switchPaymentSubscription: GraphQLSwitchPaymentSubscriptionPayload;
    startTrial: GraphQLStartTrialPayload;
    leaveTrial: GraphQLLeaveTrialPayload;
    createPermanentAuthToken: GraphQLCreatePermanentAuthTokenPayload;
    updatePermanentAuthToken: GraphQLUpdatePermanentAuthTokenPayload;
    deletePermanentAuthToken: GraphQLDeletePermanentAuthTokenPayload;
    createProject: GraphQLProject;
    updateProject: GraphQLProject;
    deleteProject: GraphQLDeleteProjectPayload;
    cloneProject: GraphQLProject;
    clonePublicProject: GraphQLProject;
    leaveProject: GraphQLLeaveProjectPayload;
    createRole: GraphQLRole;
    updateRole: GraphQLRole;
    deleteRole: GraphQLDeleteRolePayload;
    createReadContentPermission: GraphQLCreateReadContentPermissionPayload;
    updateReadContentPermission: GraphQLUpdateReadContentPermissionPayload;
    createCreateContentPermission: GraphQLCreateCreateContentPermissionPayload;
    updateCreateContentPermission: GraphQLUpdateCreateContentPermissionPayload;
    createUpdateContentPermission: GraphQLCreateUpdateContentPermissionPayload;
    updateUpdateContentPermission: GraphQLUpdateUpdateContentPermissionPayload;
    deleteContentPermission: GraphQLDeleteContentPermissionPayload;
    updateContentPermissionEnabled: GraphQLUpdateContentPermissionEnabledPayload;
    createDeleteContentPermission: GraphQLCreateDeleteContentPermissionPayload;
    updateDeleteContentPermission: GraphQLUpdateDeleteContentPermissionPayload;
    updatePublishContentPermission: GraphQLUpdatePublishContentPermissionPayload;
    updateUnpublishContentPermission: GraphQLUpdateUnpublishContentPermissionPayload;
    createReadVersionContentPermission: GraphQLCreateReadVersionContentPermissionPayload;
    updateReadVersionContentPermission: GraphQLUpdateReadVersionContentPermissionPayload;
    createPublishContentPermission: GraphQLCreatePublishContentPermissionPayload;
    createUnpublishContentPermission: GraphQLCreateUnpublishContentPermissionPayload;
    updateMemberRoles: GraphQLMember;
    removeMember: GraphQLRemoveMemberPayload;
    setUserAnalytics: GraphQLUserAnalytics;
    track: GraphQLTrackPayload;
    deleteAccount: GraphQLDeleteAccountPayload;
    updateUserProfile: GraphQLUserViewer;
    createWebhook: GraphQLCreateWebhookPayload;
    updateWebhook: GraphQLUpdateWebhookPayload;
    deleteWebhook: GraphQLDeleteWebhookPayload;
    retriggerWebhook: GraphQLRetriggerWebhookPayload;
    moveField: GraphQLMoveFieldPayload;
    createEnvironment: GraphQLCreateEnvironmentPayload;
    updateEnvironment: GraphQLUpdateEnvironmentPayload;
    deleteEnvironment: GraphQLDeleteEnvironmentPayload;
    promoteEnvironment: GraphQLPromoteEnvironmentPayload;
    updateFilestackSecurityOptions: GraphQLUpdateFilestackSecurityOptionsPayload;
    updatePublicEndpoint?: Maybe<GraphQLUpdatePublicPermissionsPayload>;
    createNetlifyIntegration?: Maybe<GraphQLCreateNetlifyIntegrationPayload>;
    triggerNetlifyIntegrationBuild?: Maybe<GraphQLTriggerNetlifyIntegrationBuildPayload>;
    updateNetlifyIntegration?: Maybe<GraphQLUpdateNetlifyIntegrationPayload>;
    deleteNetlifyIntegration?: Maybe<GraphQLDeleteNetlifyIntegrationPayload>;
    createVercelIntegration?: Maybe<GraphQLCreateVercelIntegrationPayload>;
    triggerVercelIntegrationBuild?: Maybe<GraphQLTriggerVercelIntegrationBuildPayload>;
    updateVercelIntegration?: Maybe<GraphQLUpdateVercelIntegrationPayload>;
    deleteVercelIntegration?: Maybe<GraphQLDeleteVercelIntegrationPayload>;
    createGatsbyCloudIntegration?: Maybe<GraphQLCreateGatsbyCloudIntegrationPayload>;
    updateGatsbyCloudIntegration?: Maybe<GraphQLUpdateGatsbyCloudIntegrationPayload>;
    deleteGatsbyCloudIntegration?: Maybe<GraphQLDeleteGatsbyCloudIntegrationPayload>;
    createFieldExtension: GraphQLCreateFieldExtensionPayload;
    updateFieldExtension: GraphQLUpdateFieldExtensionPayload;
    createSidebarExtension: GraphQLCreateSidebarExtensionPayload;
    updateSidebarExtension: GraphQLUpdateSidebarExtensionPayload;
    deleteExtension: GraphQLDeleteExtensionPayload;
    createCustomSidebarElement: GraphQLCreateSidebarElementPayload;
    createSystemSidebarElement: GraphQLCreateSidebarElementPayload;
    deleteSidebarElement: GraphQLDeleteSidebarElementPayload;
    moveSidebarElement: GraphQLMoveSidebarElementPayload;
    updateSidebarElement: GraphQLUpdateSidebarElementPayload;
    resetSidebarElements: GraphQLResetSidebarElementsPayload;
    createApp: GraphQLCreateAppPayload;
    updateApp: GraphQLUpdateAppPayload;
    /** updateAppElement(data: UpdateAppInput!): UpdateAppPayload! */
    deleteApp: GraphQLDeleteAppPayload;
    createAppInstallation: GraphQLCreateAppInstallationPayload;
    updateAppInstallation: GraphQLUpdateAppInstallationPayload;
    deleteAppInstallation: GraphQLDeleteAppInstallationPayload;
    createStage: GraphQLAsyncOperationPayload;
    updateStage: GraphQLAsyncOperationPayload;
    deleteStage: GraphQLAsyncOperationPayload;
    createLocale: GraphQLAsyncOperationPayload;
    updateLocale: GraphQLAsyncOperationPayload;
    deleteLocale: GraphQLAsyncOperationPayload;
    createModel: GraphQLAsyncOperationPayload;
    duplicateModel: GraphQLAsyncOperationPayload;
    updateModel: GraphQLAsyncOperationPayload;
    deleteModel: GraphQLAsyncOperationPayload;
    createComponent: GraphQLAsyncOperationPayload;
    duplicateComponent: GraphQLAsyncOperationPayload;
    updateComponent: GraphQLAsyncOperationPayload;
    deleteComponent: GraphQLAsyncOperationPayload;
    createEnumeration: GraphQLAsyncOperationPayload;
    deleteEnumeration: GraphQLAsyncOperationPayload;
    updateEnumeration: GraphQLAsyncOperationPayload;
    createSimpleField: GraphQLAsyncOperationPayload;
    createRemoteField: GraphQLAsyncOperationPayload;
    createEnumerableField: GraphQLAsyncOperationPayload;
    createRelationalField: GraphQLAsyncOperationPayload;
    createUnionField: GraphQLAsyncOperationPayload;
    createComponentField: GraphQLAsyncOperationPayload;
    createComponentUnionField: GraphQLAsyncOperationPayload;
    updateSimpleField: GraphQLAsyncOperationPayload;
    updateRemoteField: GraphQLAsyncOperationPayload;
    updateEnumerableField: GraphQLAsyncOperationPayload;
    updateRelationalField: GraphQLAsyncOperationPayload;
    updateUnionField: GraphQLAsyncOperationPayload;
    updateComponentField: GraphQLAsyncOperationPayload;
    updateComponentUnionField: GraphQLAsyncOperationPayload;
    deleteField: GraphQLAsyncOperationPayload;
    submitBatchChanges: GraphQLAsyncOperationPayload;
    createGraphQLRemoteSource: GraphQLAsyncOperationPayload;
    updateGraphQLRemoteSource: GraphQLAsyncOperationPayload;
    createRESTRemoteSource: GraphQLAsyncOperationPayload;
    updateRESTRemoteSource: GraphQLAsyncOperationPayload;
    deleteRemoteSource: GraphQLAsyncOperationPayload;
};
export declare type GraphQLMutationCreateContentViewArgs = {
    data: GraphQLCreateContentViewInput;
};
export declare type GraphQLMutationUpdateContentViewArgs = {
    data: GraphQLUpdateContentViewInput;
};
export declare type GraphQLMutationDeleteContentViewArgs = {
    data: GraphQLDeleteContentViewInput;
};
export declare type GraphQLMutationMoveContentViewArgs = {
    data: GraphQLMoveContentViewInput;
};
export declare type GraphQLMutationCreateViewGroupArgs = {
    data: GraphQLCreateViewGroupInput;
};
export declare type GraphQLMutationUpdateViewGroupArgs = {
    data: GraphQLUpdateViewGroupInput;
};
export declare type GraphQLMutationDeleteViewGroupArgs = {
    data: GraphQLDeleteViewGroupInput;
};
export declare type GraphQLMutationMoveViewGroupArgs = {
    data: GraphQLMoveViewGroupInput;
};
export declare type GraphQLMutationSendInviteArgs = {
    data: GraphQLSendInviteInput;
};
export declare type GraphQLMutationRevokeInviteArgs = {
    data: GraphQLRevokeInviteInput;
};
export declare type GraphQLMutationAcceptInviteArgs = {
    data: GraphQLAcceptInviteInput;
};
export declare type GraphQLMutationSwitchPaymentSubscriptionArgs = {
    data: GraphQLSwitchPaymentSubscriptionInput;
};
export declare type GraphQLMutationStartTrialArgs = {
    data: GraphQLStartTrialInput;
};
export declare type GraphQLMutationLeaveTrialArgs = {
    data: GraphQLLeaveTrialInput;
};
export declare type GraphQLMutationCreatePermanentAuthTokenArgs = {
    data: GraphQLCreatePermanentAuthTokenInput;
};
export declare type GraphQLMutationUpdatePermanentAuthTokenArgs = {
    data: GraphQLUpdatePermanentAuthTokenInput;
};
export declare type GraphQLMutationDeletePermanentAuthTokenArgs = {
    data: GraphQLDeletePermanentAuthTokenInput;
};
export declare type GraphQLMutationCreateProjectArgs = {
    data: GraphQLCreateProjectInput;
};
export declare type GraphQLMutationUpdateProjectArgs = {
    data: GraphQLUpdateProjectInput;
};
export declare type GraphQLMutationDeleteProjectArgs = {
    data: GraphQLDeleteProjectInput;
};
export declare type GraphQLMutationCloneProjectArgs = {
    data: GraphQLCloneProjectInput;
};
export declare type GraphQLMutationClonePublicProjectArgs = {
    data: GraphQLClonePublicProjectInput;
};
export declare type GraphQLMutationLeaveProjectArgs = {
    data: GraphQLLeaveProjectInput;
};
export declare type GraphQLMutationCreateRoleArgs = {
    data: GraphQLCreateRoleInput;
};
export declare type GraphQLMutationUpdateRoleArgs = {
    data: GraphQLUpdateRoleInput;
};
export declare type GraphQLMutationDeleteRoleArgs = {
    data: GraphQLDeleteRoleInput;
};
export declare type GraphQLMutationCreateReadContentPermissionArgs = {
    data: GraphQLCreateReadContentPermissionInput;
};
export declare type GraphQLMutationUpdateReadContentPermissionArgs = {
    data: GraphQLUpdateReadContentPermissionInput;
};
export declare type GraphQLMutationCreateCreateContentPermissionArgs = {
    data: GraphQLCreateCreateContentPermissionInput;
};
export declare type GraphQLMutationUpdateCreateContentPermissionArgs = {
    data: GraphQLUpdateCreateContentPermissionInput;
};
export declare type GraphQLMutationCreateUpdateContentPermissionArgs = {
    data: GraphQLCreateUpdateContentPermissionInput;
};
export declare type GraphQLMutationUpdateUpdateContentPermissionArgs = {
    data: GraphQLUpdateUpdateContentPermissionInput;
};
export declare type GraphQLMutationDeleteContentPermissionArgs = {
    data: GraphQLDeleteContentPermissionInput;
};
export declare type GraphQLMutationUpdateContentPermissionEnabledArgs = {
    data: GraphQLUpdateContentPermissionEnabledInput;
};
export declare type GraphQLMutationCreateDeleteContentPermissionArgs = {
    data: GraphQLCreateDeleteContentPermissionInput;
};
export declare type GraphQLMutationUpdateDeleteContentPermissionArgs = {
    data: GraphQLUpdateDeleteContentPermissionInput;
};
export declare type GraphQLMutationUpdatePublishContentPermissionArgs = {
    data: GraphQLUpdatePublishContentPermissionInput;
};
export declare type GraphQLMutationUpdateUnpublishContentPermissionArgs = {
    data: GraphQLUpdateUnpublishContentPermissionInput;
};
export declare type GraphQLMutationCreateReadVersionContentPermissionArgs = {
    data: GraphQLCreateReadVersionContentPermissionInput;
};
export declare type GraphQLMutationUpdateReadVersionContentPermissionArgs = {
    data: GraphQLUpdateReadVersionContentPermissionInput;
};
export declare type GraphQLMutationCreatePublishContentPermissionArgs = {
    data: GraphQLCreatePublishContentPermissionInput;
};
export declare type GraphQLMutationCreateUnpublishContentPermissionArgs = {
    data: GraphQLCreateUnpublishContentPermissionInput;
};
export declare type GraphQLMutationUpdateMemberRolesArgs = {
    data: GraphQLUpdateMemberRolesInput;
};
export declare type GraphQLMutationRemoveMemberArgs = {
    data: GraphQLRemoveMemberInput;
};
export declare type GraphQLMutationSetUserAnalyticsArgs = {
    data: GraphQLSetUserAnalyticsInput;
};
export declare type GraphQLMutationTrackArgs = {
    data: GraphQLTrackInput;
};
export declare type GraphQLMutationDeleteAccountArgs = {
    data?: Maybe<GraphQLDeleteAccountInput>;
};
export declare type GraphQLMutationUpdateUserProfileArgs = {
    data: GraphQLUpdateProfileInput;
};
export declare type GraphQLMutationCreateWebhookArgs = {
    data: GraphQLCreateWebhookInput;
};
export declare type GraphQLMutationUpdateWebhookArgs = {
    data: GraphQLUpdateWebhookInput;
};
export declare type GraphQLMutationDeleteWebhookArgs = {
    data: GraphQLDeleteWebhookInput;
};
export declare type GraphQLMutationRetriggerWebhookArgs = {
    data: GraphQLRetriggerWebhookInput;
};
export declare type GraphQLMutationMoveFieldArgs = {
    data: GraphQLMoveFieldInput;
};
export declare type GraphQLMutationCreateEnvironmentArgs = {
    data: GraphQLCreateEnvironmentInput;
};
export declare type GraphQLMutationUpdateEnvironmentArgs = {
    data: GraphQLUpdateEnvironmentInput;
};
export declare type GraphQLMutationDeleteEnvironmentArgs = {
    data: GraphQLDeleteEnvironmentInput;
};
export declare type GraphQLMutationPromoteEnvironmentArgs = {
    data: GraphQLPromoteEnvironmentInput;
};
export declare type GraphQLMutationUpdateFilestackSecurityOptionsArgs = {
    data: GraphQLUpdateFilestackSecurityOptionsInput;
};
export declare type GraphQLMutationUpdatePublicEndpointArgs = {
    data: GraphQLUpdatePublicEndpointInput;
};
export declare type GraphQLMutationCreateNetlifyIntegrationArgs = {
    data: GraphQLCreateNetlifyIntegrationInput;
};
export declare type GraphQLMutationTriggerNetlifyIntegrationBuildArgs = {
    data: GraphQLTriggerNetlifyIntegrationBuildInput;
};
export declare type GraphQLMutationUpdateNetlifyIntegrationArgs = {
    data: GraphQLUpdateNetlifyIntegrationInput;
};
export declare type GraphQLMutationDeleteNetlifyIntegrationArgs = {
    data: GraphQLDeleteNetlifyIntegrationInput;
};
export declare type GraphQLMutationCreateVercelIntegrationArgs = {
    data: GraphQLCreateVercelIntegrationInput;
};
export declare type GraphQLMutationTriggerVercelIntegrationBuildArgs = {
    data: GraphQLTriggerVercelIntegrationBuildInput;
};
export declare type GraphQLMutationUpdateVercelIntegrationArgs = {
    data: GraphQLUpdateVercelIntegrationInput;
};
export declare type GraphQLMutationDeleteVercelIntegrationArgs = {
    data: GraphQLDeleteVercelIntegrationInput;
};
export declare type GraphQLMutationCreateGatsbyCloudIntegrationArgs = {
    data: GraphQLCreateGatsbyCloudIntegrationInput;
};
export declare type GraphQLMutationUpdateGatsbyCloudIntegrationArgs = {
    data: GraphQLUpdateGatsbyCloudIntegrationInput;
};
export declare type GraphQLMutationDeleteGatsbyCloudIntegrationArgs = {
    data: GraphQLDeleteGatsbyCloudIntegrationInput;
};
export declare type GraphQLMutationCreateFieldExtensionArgs = {
    data: GraphQLCreateFieldExtensionInput;
};
export declare type GraphQLMutationUpdateFieldExtensionArgs = {
    data: GraphQLUpdateFieldExtensionInput;
};
export declare type GraphQLMutationCreateSidebarExtensionArgs = {
    data: GraphQLCreateSidebarExtensionInput;
};
export declare type GraphQLMutationUpdateSidebarExtensionArgs = {
    data: GraphQLUpdateSidebarExtensionInput;
};
export declare type GraphQLMutationDeleteExtensionArgs = {
    data: GraphQLDeleteExtensionInput;
};
export declare type GraphQLMutationCreateCustomSidebarElementArgs = {
    data: GraphQLCreateCustomSidebarElementInput;
};
export declare type GraphQLMutationCreateSystemSidebarElementArgs = {
    data: GraphQLCreateSystemSidebarElementInput;
};
export declare type GraphQLMutationDeleteSidebarElementArgs = {
    data: GraphQLDeleteSidebarElementInput;
};
export declare type GraphQLMutationMoveSidebarElementArgs = {
    data: GraphQLMoveSidebarElementInput;
};
export declare type GraphQLMutationUpdateSidebarElementArgs = {
    data: GraphQLUpdateSidebarElementInput;
};
export declare type GraphQLMutationResetSidebarElementsArgs = {
    data: GraphQLResetSidebarElementsInput;
};
export declare type GraphQLMutationCreateAppArgs = {
    data: GraphQLCreateAppInput;
};
export declare type GraphQLMutationUpdateAppArgs = {
    data: GraphQLUpdateAppInput;
};
export declare type GraphQLMutationDeleteAppArgs = {
    data: GraphQLDeleteAppInput;
};
export declare type GraphQLMutationCreateAppInstallationArgs = {
    data: GraphQLCreateAppInstallationInput;
};
export declare type GraphQLMutationUpdateAppInstallationArgs = {
    data: GraphQLUpdateAppInstallationInput;
};
export declare type GraphQLMutationDeleteAppInstallationArgs = {
    data: GraphQLDeleteAppInstallationInput;
};
export declare type GraphQLMutationCreateStageArgs = {
    data: GraphQLCreateStageInput;
};
export declare type GraphQLMutationUpdateStageArgs = {
    data: GraphQLUpdateStageInput;
};
export declare type GraphQLMutationDeleteStageArgs = {
    data: GraphQLDeleteStageInput;
};
export declare type GraphQLMutationCreateLocaleArgs = {
    data: GraphQLCreateLocaleInput;
};
export declare type GraphQLMutationUpdateLocaleArgs = {
    data: GraphQLUpdateLocaleInput;
};
export declare type GraphQLMutationDeleteLocaleArgs = {
    data: GraphQLDeleteLocaleInput;
};
export declare type GraphQLMutationCreateModelArgs = {
    data: GraphQLCreateModelInput;
};
export declare type GraphQLMutationDuplicateModelArgs = {
    data: GraphQLDuplicateModelInput;
};
export declare type GraphQLMutationUpdateModelArgs = {
    data: GraphQLUpdateModelInput;
};
export declare type GraphQLMutationDeleteModelArgs = {
    data: GraphQLDeleteModelInput;
};
export declare type GraphQLMutationCreateComponentArgs = {
    data: GraphQLCreateComponentInput;
};
export declare type GraphQLMutationDuplicateComponentArgs = {
    data: GraphQLDuplicateComponentInput;
};
export declare type GraphQLMutationUpdateComponentArgs = {
    data: GraphQLUpdateComponentInput;
};
export declare type GraphQLMutationDeleteComponentArgs = {
    data: GraphQLDeleteComponentInput;
};
export declare type GraphQLMutationCreateEnumerationArgs = {
    data: GraphQLCreateEnumerationInput;
};
export declare type GraphQLMutationDeleteEnumerationArgs = {
    data: GraphQLDeleteEnumerationInput;
};
export declare type GraphQLMutationUpdateEnumerationArgs = {
    data: GraphQLUpdateEnumerationInput;
};
export declare type GraphQLMutationCreateSimpleFieldArgs = {
    data: GraphQLCreateSimpleFieldInput;
};
export declare type GraphQLMutationCreateRemoteFieldArgs = {
    data: GraphQLCreateRemoteFieldInput;
};
export declare type GraphQLMutationCreateEnumerableFieldArgs = {
    data: GraphQLCreateEnumerableFieldInput;
};
export declare type GraphQLMutationCreateRelationalFieldArgs = {
    data: GraphQLCreateRelationalFieldInput;
};
export declare type GraphQLMutationCreateUnionFieldArgs = {
    data: GraphQLCreateUnionFieldInput;
};
export declare type GraphQLMutationCreateComponentFieldArgs = {
    data: GraphQLCreateComponentFieldInput;
};
export declare type GraphQLMutationCreateComponentUnionFieldArgs = {
    data: GraphQLCreateComponentUnionFieldInput;
};
export declare type GraphQLMutationUpdateSimpleFieldArgs = {
    data: GraphQLUpdateSimpleFieldInput;
};
export declare type GraphQLMutationUpdateRemoteFieldArgs = {
    data: GraphQLUpdateRemoteFieldInput;
};
export declare type GraphQLMutationUpdateEnumerableFieldArgs = {
    data: GraphQLUpdateEnumerableFieldInput;
};
export declare type GraphQLMutationUpdateRelationalFieldArgs = {
    data: GraphQLUpdateRelationalFieldInput;
};
export declare type GraphQLMutationUpdateUnionFieldArgs = {
    data: GraphQLUpdateUnionFieldInput;
};
export declare type GraphQLMutationUpdateComponentFieldArgs = {
    data: GraphQLUpdateComponentFieldInput;
};
export declare type GraphQLMutationUpdateComponentUnionFieldArgs = {
    data: GraphQLUpdateComponentUnionFieldInput;
};
export declare type GraphQLMutationDeleteFieldArgs = {
    data: GraphQLDeleteFieldInput;
};
export declare type GraphQLMutationSubmitBatchChangesArgs = {
    data: GraphQLBatchMigrationInput;
};
export declare type GraphQLMutationCreateGraphQlRemoteSourceArgs = {
    data: GraphQLCreateGraphQlRemoteSourceInput;
};
export declare type GraphQLMutationUpdateGraphQlRemoteSourceArgs = {
    data: GraphQLUpdateGraphQlRemoteSourceInput;
};
export declare type GraphQLMutationCreateRestRemoteSourceArgs = {
    data: GraphQLCreateRestRemoteSourceInput;
};
export declare type GraphQLMutationUpdateRestRemoteSourceArgs = {
    data: GraphQLUpdateRestRemoteSourceInput;
};
export declare type GraphQLMutationDeleteRemoteSourceArgs = {
    data: GraphQLDeleteRemoteSourceInput;
};
export declare enum GraphQLMigrationOperationType {
    CreateProjectFromTemplate = "CREATE_PROJECT_FROM_TEMPLATE",
    CreateEnvironment = "CREATE_ENVIRONMENT",
    Batch = "BATCH",
    CreateStage = "CREATE_STAGE",
    UpdateStage = "UPDATE_STAGE",
    DeleteStage = "DELETE_STAGE",
    CreateLocale = "CREATE_LOCALE",
    UpdateLocale = "UPDATE_LOCALE",
    DeleteLocale = "DELETE_LOCALE",
    CreateModel = "CREATE_MODEL",
    UpdateModel = "UPDATE_MODEL",
    DeleteModel = "DELETE_MODEL",
    CreateRemoteTypeDefinition = "CREATE_REMOTE_TYPE_DEFINITION",
    UpdateRemoteTypeDefinition = "UPDATE_REMOTE_TYPE_DEFINITION",
    DeleteRemoteTypeDefinition = "DELETE_REMOTE_TYPE_DEFINITION",
    CreateEnumeration = "CREATE_ENUMERATION",
    UpdateEnumeration = "UPDATE_ENUMERATION",
    DeleteEnumeration = "DELETE_ENUMERATION",
    CreateSimpleField = "CREATE_SIMPLE_FIELD",
    CreateEnumerableField = "CREATE_ENUMERABLE_FIELD",
    CreateRelationalField = "CREATE_RELATIONAL_FIELD",
    CreateUnionField = "CREATE_UNION_FIELD",
    CreateRemoteField = "CREATE_REMOTE_FIELD",
    UpdateSimpleField = "UPDATE_SIMPLE_FIELD",
    UpdateEnumerableField = "UPDATE_ENUMERABLE_FIELD",
    UpdateRelationalField = "UPDATE_RELATIONAL_FIELD",
    UpdateUnionField = "UPDATE_UNION_FIELD",
    DeleteField = "DELETE_FIELD"
}
export declare type GraphQLISchemaMigrationPayload = {
    migration: GraphQLMigration;
};
export declare enum GraphQLNetlifyBuildState {
    Ready = "READY",
    Preparing = "PREPARING",
    Building = "BUILDING",
    Failed = "FAILED"
}
export declare enum GraphQLVercelBuildState {
    Ready = "READY",
    Preparing = "PREPARING",
    Building = "BUILDING",
    Failed = "FAILED"
}
export declare type GraphQLNetlifyIntegrationCallbackPayload = {
    __typename?: "NetlifyIntegrationCallbackPayload";
    /** @deprecated use integration instead */
    integrationId: Scalars["ID"];
    integration: GraphQLNetlifyIntegration;
    site: GraphQLNetlifySite;
    error?: Maybe<Scalars["String"]>;
};
export declare type GraphQLVercelIntegrationCallbackPayload = {
    __typename?: "VercelIntegrationCallbackPayload";
    /** @deprecated use integration instead */
    integrationId: Scalars["ID"];
    integration: GraphQLVercelIntegration;
    project: GraphQLVercelProject;
    error?: Maybe<Scalars["String"]>;
};
/** Base pending project with common information */
export declare type GraphQLIPendingProject = {
    id: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    picture?: Maybe<Scalars["String"]>;
};
/** Can clone from project or template */
export declare type GraphQLCloningFrom = GraphQLProject | GraphQLTemplate | GraphQLStarterTemplate;
/** Cloning project with source */
export declare type GraphQLCloningProject = GraphQLIPendingProject & {
    __typename?: "CloningProject";
    id: Scalars["ID"];
    name: Scalars["String"];
    description?: Maybe<Scalars["String"]>;
    picture?: Maybe<Scalars["String"]>;
    cloningFrom: GraphQLCloningFrom;
};
/** Add subscription to notify about changes in projects */
export declare type GraphQLProjectChangeCompletedCloning = {
    __typename?: "ProjectChangeCompletedCloning";
    clonedProject: GraphQLProject;
};
export declare type GraphQLProjectChangedPayload = GraphQLProjectChangeCompletedCloning;
export declare type GraphQLSchemaMigrationSubscriptionPayload = GraphQLISchemaMigrationPayload & {
    __typename?: "SchemaMigrationSubscriptionPayload";
    migration: GraphQLMigration;
};
export declare type GraphQLSchemaMigrationSucceededSubscriptionPayload = GraphQLISchemaMigrationPayload & {
    __typename?: "SchemaMigrationSucceededSubscriptionPayload";
    migration: GraphQLMigration;
    environment: GraphQLEnvironment;
    /** @deprecated Field no longer supported */
    affectedResourceType: GraphQLMigrationOperationType;
    /** @deprecated Field no longer supported */
    affectedResourceId: Scalars["ID"];
};
export declare type GraphQLEnvironmentPromotedPayload = {
    __typename?: "EnvironmentPromotedPayload";
    promotedEnvironment: GraphQLEnvironment;
    previousMasterEnvironment: GraphQLEnvironment;
    promotedEnvironmentPreviousDisplayName: Scalars["String"];
};
export declare type GraphQLSubscription = {
    __typename?: "Subscription";
    schemaMigration: GraphQLISchemaMigrationPayload;
    projectChanged: GraphQLProjectChangedPayload;
    netlifyBuildNotification: GraphQLNetlifyIntegrationCallbackPayload;
    vercelBuildNotification: GraphQLVercelIntegrationCallbackPayload;
    environmentPromoted: GraphQLEnvironmentPromotedPayload;
};
export declare type GraphQLSubscriptionSchemaMigrationArgs = {
    environmentId: Scalars["ID"];
};
export declare type GraphQLSubscriptionNetlifyBuildNotificationArgs = {
    integrationId: Scalars["ID"];
};
export declare type GraphQLSubscriptionVercelBuildNotificationArgs = {
    integrationId: Scalars["ID"];
};
export declare type GraphQLSubscriptionEnvironmentPromotedArgs = {
    projectId: Scalars["ID"];
};
