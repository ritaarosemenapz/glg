import { Model } from "./model";
import { GraphQLBatchMigrationCreateEnumerationInput, GraphQLBatchMigrationCreateModelInput, GraphQLBatchMigrationUpdateModelInput, GraphQLBatchMigrationCreateStageInput, GraphQLBatchMigrationUpdateStageInput, GraphQLBatchMigrationUpdateEnumerationInput, GraphQLBatchMigrationCreateLocaleInput, GraphQLBatchMigrationUpdateLocaleInput, GraphQLBatchMigrationCreateGraphQlRemoteSourceInput, GraphQLBatchMigrationCreateRestRemoteSourceInput, GraphQLBatchMigrationUpdateGraphQlRemoteSourceInput, GraphQLBatchMigrationUpdateRestRemoteSourceInput, GraphQLBatchMigrationDeleteRemoteSourceInput } from "./generated/schema";
import { EnumerationCreate, EnumerationUpdate } from "./enumeration";
import { Stage } from "./stage";
import { Locale } from "./locale";
import { RemoteSource } from "./remoteSource";
/**
 * Configuration for a migration.
 */
interface MigrationConfig {
    /**
     * URL endpoint for the environment.
     * From `Settings > Environments` on https://app.graphcms.com.
     */
    endpoint: string;
    /**
     * Authentication Token.
     * From `Settings > API Access` on https://app.graphcms.com.
     */
    authToken: string;
    /**
     * Name for the migration. This must be unique to this migration.
     */
    name?: string;
}
interface MigrationChange {
    [key: string]: any;
}
interface EnvironmentInfo {
    id: string;
    name: string;
    endpoint: string;
    projectId: string;
}
/**
 * Information about a migration.
 */
interface MigrationInfo {
    id: string;
    name?: string;
    status?: string;
    errors?: string;
    createdAt?: string;
    finishedAt?: string;
}
/**
 * GraphCMS Migration.
 */
interface Migration {
    /**
     * Run the migration
     * @param foreground configures if the migration should run in the foreground.
     * By default, the migration is only scheduled. To wait for the migration to run,
     * set `foreground` to `true`.
     */
    run(foreground?: boolean): Promise<MigrationInfo>;
    /**
     * Dry run the migration. This returns the changes to be applied without running
     * the migration.
     */
    dryRun(): any;
    /**
     * Fetch an existing model
     * @param apiId the `apiId` for the model.
     */
    model(apiId: string): Model;
    /**
     * Create a new model
     * @param args options for the new model.
     */
    createModel(args: GraphQLBatchMigrationCreateModelInput): Model;
    /**
     * Update an existing model
     * @param args options for model update.
     */
    updateModel(args: GraphQLBatchMigrationUpdateModelInput): Model;
    /**
     * Delete a model
     * @param apiId the `apiId` of the model to delete.
     */
    deleteModel(apiId: string): void;
    /**
     * Create a new GraphQL remote source
     * @param args options for the new remote source.
     */
    createGraphQLRemoteSource(args: GraphQLBatchMigrationCreateGraphQlRemoteSourceInput): RemoteSource;
    /**
     * Updates an existing GraphQL remote source
     * @param args options for the new remote source.
     */
    updateGraphQLRemoteSource(args: GraphQLBatchMigrationUpdateGraphQlRemoteSourceInput): RemoteSource;
    /**
     * Create a new REST remote source
     * @param args options for the new remote source.
     */
    createRESTRemoteSource(args: GraphQLBatchMigrationCreateRestRemoteSourceInput): RemoteSource;
    /**
     * Updates an existing REST remote source
     * @param args options for the new remote source.
     */
    updateRESTRemoteSource(args: GraphQLBatchMigrationUpdateRestRemoteSourceInput): RemoteSource;
    deleteRemoteSource(args: GraphQLBatchMigrationDeleteRemoteSourceInput): void;
    /**
     * Create a new enumeration
     * @param args options for the new enumeration.
     */
    createEnumeration(args: GraphQLBatchMigrationCreateEnumerationInput): EnumerationCreate;
    /**
     * Create a new enumeration
     * @param args options for the new enumeration.
     */
    updateEnumeration(args: GraphQLBatchMigrationUpdateEnumerationInput): EnumerationUpdate;
    /**
     * Delete an enumeration
     * @param apiId apiId of the enumeration to delete.
     */
    deleteEnumeration(apiId: string): void;
    /**
     * Create a new stage
     * @param args options for the new stage.
     */
    createStage(args: GraphQLBatchMigrationCreateStageInput): Stage;
    /**
     * Update an existing stage
     * @param args options for stage update.
     */
    updateStage(args: GraphQLBatchMigrationUpdateStageInput): Stage;
    /**
     * Delete a stage
     * @param apiId the `apiId` of the stage to delete.
     */
    deleteStage(apiId: string): void;
    /**
     * Create a new locale
     * @param args options for the new locale.
     */
    createLocale(args: GraphQLBatchMigrationCreateLocaleInput): Locale;
    /**
     * Update an existing locale
     * @param args options for locale update.
     */
    updateLocale(args: GraphQLBatchMigrationUpdateLocaleInput): Locale;
    /**
     * Delete a locale
     * @param apiId the `apiId` of the locale to delete.
     */
    deleteLocale(apiId: string): void;
}
/**
 * @ignore
 */
interface ChangeListener {
    registerChange(item: ChangeItem): void;
}
/**
 * @ignore
 */
interface ChangeItem {
    generateChange(): MigrationChange;
}
/**
 * Create a new migration.
 * @param config the configuration for the migration.
 */
declare function newMigration(config: MigrationConfig): Migration;
export { EnvironmentInfo, newMigration, MigrationInfo, MigrationChange, MigrationConfig, ChangeListener, ChangeItem, };
