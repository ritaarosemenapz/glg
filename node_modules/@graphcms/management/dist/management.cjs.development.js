'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var graphqlRequest = require('graphql-request');
var nanoid = require('nanoid');

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

/**
 * @ignore
 */

var MutationMode;

(function (MutationMode) {
  MutationMode[MutationMode["Create"] = 1] = "Create";
  MutationMode[MutationMode["Update"] = 2] = "Update";
  MutationMode[MutationMode["Delete"] = 3] = "Delete";
})(MutationMode || (MutationMode = {}));
/**
 * RelationType is the relationship type for Relational and Union Fields.
 */




(function (RelationType) {
  RelationType[RelationType["OneToOne"] = 1] = "OneToOne";
  RelationType[RelationType["OneToMany"] = 2] = "OneToMany";
  RelationType[RelationType["ManyToOne"] = 3] = "ManyToOne";
  RelationType[RelationType["ManyToMany"] = 4] = "ManyToMany";
})(exports.RelationType || (exports.RelationType = {}));
/**
 * @ignore
 * @param client
 * @param endpoint
 */


function fetchEnvironment(_x, _x2) {
  return _fetchEnvironment.apply(this, arguments);
}
/**
 * @ignore
 * @param client
 * @param environmentId
 * @param changes
 */


function _fetchEnvironment() {
  _fetchEnvironment = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(client, endpoint) {
    var contentAPIEndpoint, query, _res$viewer, _res$viewer2, notFound, res, project, projects, _iterator, _step, p, _iterator2, _step2, environment, _iterator3, _step3, _environment;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            contentAPIEndpoint = endpoint.replace("graphcms.com", "hygraph.com");
            query = "\n    {\n      viewer {\n        ... on TokenViewer {\n          project {\n            id\n            environments {\n              id\n              name\n              endpoint\n            }\n          }\n        }\n        ...on UserViewer {\n          projects {\n            id\n            environments {\n              id\n              name\n              endpoint\n            }\n          }\n        }\n      }\n    }\n    ";
            _context.prev = 2;
            notFound = "environment with endpoint '" + contentAPIEndpoint + "' not found";
            _context.next = 6;
            return client.request(query);

          case 6:
            res = _context.sent;
            project = res == null ? void 0 : (_res$viewer = res.viewer) == null ? void 0 : _res$viewer.project;
            projects = res == null ? void 0 : (_res$viewer2 = res.viewer) == null ? void 0 : _res$viewer2.projects;

            if (!(!project && !projects)) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return", Promise.reject(notFound));

          case 11:
            if (!projects) {
              _context.next = 27;
              break;
            }

            _iterator = _createForOfIteratorHelperLoose(projects);

          case 13:
            if ((_step = _iterator()).done) {
              _context.next = 25;
              break;
            }

            p = _step.value;
            _iterator2 = _createForOfIteratorHelperLoose(p.environments);

          case 16:
            if ((_step2 = _iterator2()).done) {
              _context.next = 23;
              break;
            }

            environment = _step2.value;

            if (!(environment.endpoint === contentAPIEndpoint)) {
              _context.next = 21;
              break;
            }

            environment.projectId = p.id;
            return _context.abrupt("return", environment);

          case 21:
            _context.next = 16;
            break;

          case 23:
            _context.next = 13;
            break;

          case 25:
            _context.next = 35;
            break;

          case 27:
            _iterator3 = _createForOfIteratorHelperLoose(project.environments);

          case 28:
            if ((_step3 = _iterator3()).done) {
              _context.next = 35;
              break;
            }

            _environment = _step3.value;

            if (!(_environment.endpoint === contentAPIEndpoint)) {
              _context.next = 33;
              break;
            }

            _environment.projectId = project.id;
            return _context.abrupt("return", _environment);

          case 33:
            _context.next = 28;
            break;

          case 35:
            return _context.abrupt("return", Promise.reject(notFound));

          case 38:
            _context.prev = 38;
            _context.t0 = _context["catch"](2);
            throw new Error(_context.t0);

          case 41:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 38]]);
  }));
  return _fetchEnvironment.apply(this, arguments);
}

function submitMigration(_x3, _x4) {
  return _submitMigration.apply(this, arguments);
}
/**
 * @ignore
 * @param client
 * @param args
 */


function _submitMigration() {
  _submitMigration = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(client, body) {
    var mutationArgs, bodyArgs, query, _res$submitBatchChang, variables, res, migration;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            mutationArgs = ["$environmentId: ID!", "$changes: [BatchMigrationChangeInput!]!", "$name: String!"];
            bodyArgs = ["environmentId: $environmentId", "changes: $changes", "name: $name"];
            query = "\n    mutation (" + mutationArgs.join(", ") + ") {\n      submitBatchChanges(data: {\n        " + bodyArgs.join(", ") + "\n      }) {\n        migration {\n          id,\n          status,\n          errors,\n        }\n      }\n    }\n  ";
            _context2.prev = 3;
            variables = {
              changes: body.changes,
              environmentId: body.environmentId,
              name: body.name || nanoid.nanoid()
            };
            _context2.next = 7;
            return client.request(query, variables);

          case 7:
            res = _context2.sent;
            migration = res == null ? void 0 : (_res$submitBatchChang = res.submitBatchChanges) == null ? void 0 : _res$submitBatchChang.migration;

            if (migration) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("return", Promise.reject({
              // TODO: have a decent error code.
              errors: "unexpected response received"
            }));

          case 11:
            if (!migration.errors) {
              _context2.next = 13;
              break;
            }

            return _context2.abrupt("return", Promise.reject({
              id: migration.id,
              errors: migration.errors
            }));

          case 13:
            return _context2.abrupt("return", {
              id: migration.id,
              status: migration.status,
              name: variables.name
            });

          case 16:
            _context2.prev = 16;
            _context2.t0 = _context2["catch"](3);
            return _context2.abrupt("return", Promise.reject(_context2.t0));

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 16]]);
  }));
  return _submitMigration.apply(this, arguments);
}

function fetchMigration(_x5, _x6) {
  return _fetchMigration.apply(this, arguments);
}

function _fetchMigration() {
  _fetchMigration = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(client, args) {
    var query, variables, _res$viewer3, _res$viewer3$project, _res$viewer3$project$, notFound, res, migration;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            query = "\n    query fetchMigration($projectId: ID!, $environmentName: String!, $migrationId: ID!){\n      viewer {\n        project(id: $projectId) {\n          environment(name: $environmentName) {\n            migration(id: $migrationId) {\n              id\n              status\n              errors\n              createdAt\n              finishedAt\n            }\n          }\n        }\n      }\n    }\n   ";
            variables = {
              migrationId: args.migrationId,
              environmentName: args.environmentName,
              projectId: args.projectId
            };
            _context3.prev = 2;
            notFound = "migration with id '" + args.migrationId + "' not found";
            _context3.next = 6;
            return client.request(query, variables);

          case 6:
            res = _context3.sent;
            migration = res == null ? void 0 : (_res$viewer3 = res.viewer) == null ? void 0 : (_res$viewer3$project = _res$viewer3.project) == null ? void 0 : (_res$viewer3$project$ = _res$viewer3$project.environment) == null ? void 0 : _res$viewer3$project$.migration;

            if (migration) {
              _context3.next = 10;
              break;
            }

            return _context3.abrupt("return", Promise.reject(notFound));

          case 10:
            return _context3.abrupt("return", migration);

          case 13:
            _context3.prev = 13;
            _context3.t0 = _context3["catch"](2);
            return _context3.abrupt("return", Promise.reject(_context3.t0));

          case 16:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[2, 13]]);
  }));
  return _fetchMigration.apply(this, arguments);
}

var FieldType;

(function (FieldType) {
  FieldType[FieldType["SimpleField"] = 1] = "SimpleField";
  FieldType[FieldType["RelationalField"] = 2] = "RelationalField";
  FieldType[FieldType["EnumerableField"] = 3] = "EnumerableField";
  FieldType[FieldType["UnionField"] = 4] = "UnionField";
  FieldType[FieldType["RemoteField"] = 5] = "RemoteField";
})(FieldType || (FieldType = {}));
/**
 * @ignore
 */


var Field = /*#__PURE__*/function () {
  function Field(args, mode, type) {
    if (type === void 0) {
      type = FieldType.SimpleField;
    }

    this.args = args;
    this.mode = mode;
    this.type = type;
  }

  var _proto = Field.prototype;

  _proto.generateChange = function generateChange() {
    var action;
    var typeStr = FieldType[this.type];

    switch (this.mode) {
      case MutationMode.Create:
        action = "create" + typeStr;
        break;

      case MutationMode.Update:
        action = "update" + typeStr;
        break;

      case MutationMode.Delete:
        // delete is generic
        action = "deleteField";
        break;
    }

    var change = {};
    change[action] = this.args;
    return change;
  };

  return Field;
}();

/**
 * Renderers for `Form` or `Table`.
 */


(function (Renderer) {
  Renderer["Default"] = "GCMS";
  Renderer["SingleLine"] = "GCMS_SINGLE_LINE";
  Renderer["MultiLine"] = "GCMS_MULTI_LINE";
  Renderer["Markdown"] = "GCMS_MARKDOWN";
  Renderer["Slug"] = "GCMS_SLUG";
})(exports.Renderer || (exports.Renderer = {}));

var GraphQLCacheControlScope;

(function (GraphQLCacheControlScope) {
  GraphQLCacheControlScope["Public"] = "PUBLIC";
  GraphQLCacheControlScope["Private"] = "PRIVATE";
})(GraphQLCacheControlScope || (GraphQLCacheControlScope = {}));

var GraphQLContentViewType;

(function (GraphQLContentViewType) {
  GraphQLContentViewType["BuiltIn"] = "BUILT_IN";
  GraphQLContentViewType["Public"] = "PUBLIC";
})(GraphQLContentViewType || (GraphQLContentViewType = {}));

var GraphQLColumnOrderByDir;

(function (GraphQLColumnOrderByDir) {
  GraphQLColumnOrderByDir["Asc"] = "ASC";
  GraphQLColumnOrderByDir["Desc"] = "DESC";
})(GraphQLColumnOrderByDir || (GraphQLColumnOrderByDir = {}));

var GraphQLLimitType;

(function (GraphQLLimitType) {
  GraphQLLimitType["Roles"] = "ROLES";
  GraphQLLimitType["Locales"] = "LOCALES";
  GraphQLLimitType["Environments"] = "ENVIRONMENTS";
  GraphQLLimitType["Webhooks"] = "WEBHOOKS";
  GraphQLLimitType["Models"] = "MODELS";
  GraphQLLimitType["Records"] = "RECORDS";
  GraphQLLimitType["AssetTraffic"] = "ASSET_TRAFFIC";
  GraphQLLimitType["ApiOperations"] = "API_OPERATIONS";
  GraphQLLimitType["Seats"] = "SEATS";
  GraphQLLimitType["WorkflowSteps"] = "WORKFLOW_STEPS";
  GraphQLLimitType["Integrations"] = "INTEGRATIONS";
  GraphQLLimitType["Versions"] = "VERSIONS";
  GraphQLLimitType["VersionRetentionPeriod"] = "VERSION_RETENTION_PERIOD";
  GraphQLLimitType["ContentModels"] = "CONTENT_MODELS";
  GraphQLLimitType["ContentStages"] = "CONTENT_STAGES";
  GraphQLLimitType["AuditLogsRetentionPeriod"] = "AUDIT_LOGS_RETENTION_PERIOD";
  GraphQLLimitType["RemoteSources"] = "REMOTE_SOURCES";
  GraphQLLimitType["RemoteFields"] = "REMOTE_FIELDS";
  GraphQLLimitType["RemoteFieldsMaxExecutionTime"] = "REMOTE_FIELDS_MAX_EXECUTION_TIME";
  GraphQLLimitType["RemoteFieldsMaxResponseSize"] = "REMOTE_FIELDS_MAX_RESPONSE_SIZE";
  GraphQLLimitType["RemoteFieldsHttpWorkers"] = "REMOTE_FIELDS_HTTP_WORKERS";
  GraphQLLimitType["RateLimitPerSecond"] = "RATE_LIMIT_PER_SECOND";
  GraphQLLimitType["ContentPermissions"] = "CONTENT_PERMISSIONS";
  GraphQLLimitType["PermanentAuthTokens"] = "PERMANENT_AUTH_TOKENS";
  GraphQLLimitType["SchedulingPendingReleases"] = "SCHEDULING_PENDING_RELEASES";
  GraphQLLimitType["SchedulingPendingOperations"] = "SCHEDULING_PENDING_OPERATIONS";
  GraphQLLimitType["SchedulingOperationsInRelease"] = "SCHEDULING_OPERATIONS_IN_RELEASE";
})(GraphQLLimitType || (GraphQLLimitType = {}));
/** ### TOKENS: */


var GraphQLPermanentAuthTokenAudience;

(function (GraphQLPermanentAuthTokenAudience) {
  GraphQLPermanentAuthTokenAudience["ContentApi"] = "CONTENT_API";
  GraphQLPermanentAuthTokenAudience["ManagementApi"] = "MANAGEMENT_API";
})(GraphQLPermanentAuthTokenAudience || (GraphQLPermanentAuthTokenAudience = {}));

var GraphQLPermissionAction;

(function (GraphQLPermissionAction) {
  /**
   * Project-level
   * Virtual permission used to perform a project ownership check
   */
  GraphQLPermissionAction["ProjectClone"] = "PROJECT_CLONE";
  GraphQLPermissionAction["ProjectUpdate"] = "PROJECT_UPDATE";
  /** Virtual permission used to perform a project ownership check */

  GraphQLPermissionAction["ProjectDelete"] = "PROJECT_DELETE";
  /** Virtual permission used to perform a project ownership check */

  GraphQLPermissionAction["ManagePayment"] = "MANAGE_PAYMENT";
  GraphQLPermissionAction["PlaygroundUse"] = "PLAYGROUND_USE";
  GraphQLPermissionAction["AuditLogsRead"] = "AUDIT_LOGS_READ";
  /** View Permissions that need to be moved to a new concept eventually */

  GraphQLPermissionAction["ViewTeamMemberSettings"] = "VIEW_TEAM_MEMBER_SETTINGS";
  GraphQLPermissionAction["ViewRolePermissionSettings"] = "VIEW_ROLE_PERMISSION_SETTINGS";
  GraphQLPermissionAction["ViewSchema"] = "VIEW_SCHEMA";
  /** Environments */

  GraphQLPermissionAction["EnvironmentCreate"] = "ENVIRONMENT_CREATE";
  GraphQLPermissionAction["EnvironmentRead"] = "ENVIRONMENT_READ";
  GraphQLPermissionAction["EnvironmentUpdate"] = "ENVIRONMENT_UPDATE";
  GraphQLPermissionAction["EnvironmentDelete"] = "ENVIRONMENT_DELETE";
  GraphQLPermissionAction["EnvironmentPromote"] = "ENVIRONMENT_PROMOTE";
  /** Models */

  GraphQLPermissionAction["ModelCreate"] = "MODEL_CREATE";
  GraphQLPermissionAction["ModelRead"] = "MODEL_READ";
  GraphQLPermissionAction["ModelUpdate"] = "MODEL_UPDATE";
  GraphQLPermissionAction["ModelDelete"] = "MODEL_DELETE";
  /** Components */

  GraphQLPermissionAction["ComponentCreate"] = "COMPONENT_CREATE";
  GraphQLPermissionAction["ComponentRead"] = "COMPONENT_READ";
  GraphQLPermissionAction["ComponentUpdate"] = "COMPONENT_UPDATE";
  GraphQLPermissionAction["ComponentDelete"] = "COMPONENT_DELETE";
  /** Locales */

  GraphQLPermissionAction["LocaleCreate"] = "LOCALE_CREATE";
  GraphQLPermissionAction["LocaleRead"] = "LOCALE_READ";
  GraphQLPermissionAction["LocaleUpdate"] = "LOCALE_UPDATE";
  GraphQLPermissionAction["LocaleDelete"] = "LOCALE_DELETE";
  /** Stages */

  GraphQLPermissionAction["StageCreate"] = "STAGE_CREATE";
  GraphQLPermissionAction["StageRead"] = "STAGE_READ";
  GraphQLPermissionAction["StageUpdate"] = "STAGE_UPDATE";
  GraphQLPermissionAction["StageDelete"] = "STAGE_DELETE";
  /** Enumerations */

  GraphQLPermissionAction["EnumerationCreate"] = "ENUMERATION_CREATE";
  GraphQLPermissionAction["EnumerationRead"] = "ENUMERATION_READ";
  GraphQLPermissionAction["EnumerationUpdate"] = "ENUMERATION_UPDATE";
  GraphQLPermissionAction["EnumerationDelete"] = "ENUMERATION_DELETE";
  /** Fields */

  GraphQLPermissionAction["FieldCreate"] = "FIELD_CREATE";
  GraphQLPermissionAction["FieldRead"] = "FIELD_READ";
  GraphQLPermissionAction["FieldUpdate"] = "FIELD_UPDATE";
  GraphQLPermissionAction["FieldDelete"] = "FIELD_DELETE";
  /** Remote Sources */

  GraphQLPermissionAction["RemoteSourceCreate"] = "REMOTE_SOURCE_CREATE";
  GraphQLPermissionAction["RemoteSourceRead"] = "REMOTE_SOURCE_READ";
  GraphQLPermissionAction["RemoteSourceUpdate"] = "REMOTE_SOURCE_UPDATE";
  GraphQLPermissionAction["RemoteSourceDelete"] = "REMOTE_SOURCE_DELETE";
  /** PATs */

  GraphQLPermissionAction["PatCreate"] = "PAT_CREATE";
  GraphQLPermissionAction["PatRead"] = "PAT_READ";
  GraphQLPermissionAction["PatUpdate"] = "PAT_UPDATE";
  GraphQLPermissionAction["PatDelete"] = "PAT_DELETE";
  /** Content Views */

  GraphQLPermissionAction["ContentviewCreate"] = "CONTENTVIEW_CREATE";
  GraphQLPermissionAction["ContentviewRead"] = "CONTENTVIEW_READ";
  GraphQLPermissionAction["ContentviewUpdate"] = "CONTENTVIEW_UPDATE";
  GraphQLPermissionAction["ContentviewSystemUpdate"] = "CONTENTVIEW_SYSTEM_UPDATE";
  GraphQLPermissionAction["ContentviewDelete"] = "CONTENTVIEW_DELETE";
  /** Project Storage Buckets */

  GraphQLPermissionAction["StorageBucketCreate"] = "STORAGE_BUCKET_CREATE";
  GraphQLPermissionAction["StorageBucketRead"] = "STORAGE_BUCKET_READ";
  GraphQLPermissionAction["StorageBucketUpdate"] = "STORAGE_BUCKET_UPDATE";
  GraphQLPermissionAction["StorageBucketDelete"] = "STORAGE_BUCKET_DELETE";
  /** Roles */

  GraphQLPermissionAction["RoleCreate"] = "ROLE_CREATE";
  GraphQLPermissionAction["RoleUpdate"] = "ROLE_UPDATE";
  GraphQLPermissionAction["RoleDelete"] = "ROLE_DELETE";
  /** Webhooks */

  GraphQLPermissionAction["WebhookCreate"] = "WEBHOOK_CREATE";
  GraphQLPermissionAction["WebhookRead"] = "WEBHOOK_READ";
  GraphQLPermissionAction["WebhookUpdate"] = "WEBHOOK_UPDATE";
  GraphQLPermissionAction["WebhookDelete"] = "WEBHOOK_DELETE";
  /** Users */

  GraphQLPermissionAction["UserInvite"] = "USER_INVITE";
  GraphQLPermissionAction["UserAssignrole"] = "USER_ASSIGNROLE";
  GraphQLPermissionAction["UserRemove"] = "USER_REMOVE";
  /** View Groups */

  GraphQLPermissionAction["ViewGroupCreate"] = "VIEW_GROUP_CREATE";
  GraphQLPermissionAction["ViewGroupRead"] = "VIEW_GROUP_READ";
  GraphQLPermissionAction["ViewGroupUpdate"] = "VIEW_GROUP_UPDATE";
  GraphQLPermissionAction["ViewGroupDelete"] = "VIEW_GROUP_DELETE";
  /**
   * deprecated!
   * Content (actual Content API permission)
   */

  GraphQLPermissionAction["ContentCreate"] = "CONTENT_CREATE";
  GraphQLPermissionAction["ContentRead"] = "CONTENT_READ";
  GraphQLPermissionAction["ContentUpdate"] = "CONTENT_UPDATE";
  GraphQLPermissionAction["ContentDelete"] = "CONTENT_DELETE";
  GraphQLPermissionAction["ContentPublish"] = "CONTENT_PUBLISH";
  GraphQLPermissionAction["ContentUpdatePublished"] = "CONTENT_UPDATE_PUBLISHED";
  /** Content Permissions */

  GraphQLPermissionAction["ContentPermissionCreate"] = "CONTENT_PERMISSION_CREATE";
  GraphQLPermissionAction["ContentPermissionRead"] = "CONTENT_PERMISSION_READ";
  GraphQLPermissionAction["ContentPermissionUpdate"] = "CONTENT_PERMISSION_UPDATE";
  GraphQLPermissionAction["ContentPermissionDelete"] = "CONTENT_PERMISSION_DELETE";
  /** Integration */

  GraphQLPermissionAction["IntegrationCreate"] = "INTEGRATION_CREATE";
  GraphQLPermissionAction["IntegrationRead"] = "INTEGRATION_READ";
  GraphQLPermissionAction["IntegrationUpdate"] = "INTEGRATION_UPDATE";
  GraphQLPermissionAction["IntegrationDelete"] = "INTEGRATION_DELETE";
  GraphQLPermissionAction["NetlifyTriggerBuild"] = "NETLIFY_TRIGGER_BUILD";
  GraphQLPermissionAction["VercelTriggerBuild"] = "VERCEL_TRIGGER_BUILD";
  /** Extension */

  GraphQLPermissionAction["ExtensionCreate"] = "EXTENSION_CREATE";
  GraphQLPermissionAction["ExtensionRead"] = "EXTENSION_READ";
  GraphQLPermissionAction["ExtensionUpdate"] = "EXTENSION_UPDATE";
  GraphQLPermissionAction["ExtensionDelete"] = "EXTENSION_DELETE";
  /** App */

  GraphQLPermissionAction["AppCreate"] = "APP_CREATE";
  GraphQLPermissionAction["AppUpdate"] = "APP_UPDATE";
  GraphQLPermissionAction["AppDelete"] = "APP_DELETE";
  /** App Installation */

  GraphQLPermissionAction["AppInstallationCreate"] = "APP_INSTALLATION_CREATE";
  GraphQLPermissionAction["AppInstallationUpdate"] = "APP_INSTALLATION_UPDATE";
  GraphQLPermissionAction["AppInstallationDelete"] = "APP_INSTALLATION_DELETE";
})(GraphQLPermissionAction || (GraphQLPermissionAction = {}));

var GraphQLAuditLogOrderByInput;

(function (GraphQLAuditLogOrderByInput) {
  GraphQLAuditLogOrderByInput["TimestampAsc"] = "timestamp_ASC";
  GraphQLAuditLogOrderByInput["TimestampDesc"] = "timestamp_DESC";
})(GraphQLAuditLogOrderByInput || (GraphQLAuditLogOrderByInput = {}));

var GraphQLAuditLogResource;

(function (GraphQLAuditLogResource) {
  GraphQLAuditLogResource["Project"] = "PROJECT";
  GraphQLAuditLogResource["Environment"] = "ENVIRONMENT";
  GraphQLAuditLogResource["Model"] = "MODEL";
  GraphQLAuditLogResource["Stage"] = "STAGE";
  GraphQLAuditLogResource["Locale"] = "LOCALE";
  GraphQLAuditLogResource["Pat"] = "PAT";
  GraphQLAuditLogResource["Enumeration"] = "ENUMERATION";
  GraphQLAuditLogResource["Field"] = "FIELD";
  GraphQLAuditLogResource["Content"] = "CONTENT";
  GraphQLAuditLogResource["Webhook"] = "WEBHOOK";
  GraphQLAuditLogResource["Member"] = "MEMBER";
  GraphQLAuditLogResource["Role"] = "ROLE";
  GraphQLAuditLogResource["Viewgroup"] = "VIEWGROUP";
  GraphQLAuditLogResource["Contentview"] = "CONTENTVIEW";
  GraphQLAuditLogResource["Extension"] = "EXTENSION";
  GraphQLAuditLogResource["EnumerationValue"] = "ENUMERATION_VALUE";
  GraphQLAuditLogResource["Invite"] = "INVITE";
  GraphQLAuditLogResource["Component"] = "COMPONENT";
})(GraphQLAuditLogResource || (GraphQLAuditLogResource = {}));

var GraphQLAuditLogAction;

(function (GraphQLAuditLogAction) {
  GraphQLAuditLogAction["Create"] = "CREATE";
  GraphQLAuditLogAction["Update"] = "UPDATE";
  GraphQLAuditLogAction["Delete"] = "DELETE";
  GraphQLAuditLogAction["Publish"] = "PUBLISH";
  GraphQLAuditLogAction["Unpublish"] = "UNPUBLISH";
  GraphQLAuditLogAction["Accept"] = "ACCEPT";
})(GraphQLAuditLogAction || (GraphQLAuditLogAction = {}));

var GraphQLAuditLogTriggerType;

(function (GraphQLAuditLogTriggerType) {
  GraphQLAuditLogTriggerType["User"] = "USER";
  GraphQLAuditLogTriggerType["Pat"] = "PAT";
  GraphQLAuditLogTriggerType["ThirdParty"] = "THIRD_PARTY";
  GraphQLAuditLogTriggerType["Open"] = "OPEN";
})(GraphQLAuditLogTriggerType || (GraphQLAuditLogTriggerType = {}));

var GraphQLLifecycleStepType;

(function (GraphQLLifecycleStepType) {
  GraphQLLifecycleStepType["SchemaSetup"] = "SCHEMA_SETUP";
  GraphQLLifecycleStepType["ContentAdded"] = "CONTENT_ADDED";
  GraphQLLifecycleStepType["ExploreContentApi"] = "EXPLORE_CONTENT_API";
  GraphQLLifecycleStepType["ApiPermissionsSet"] = "API_PERMISSIONS_SET";
  GraphQLLifecycleStepType["ExternalTraffic"] = "EXTERNAL_TRAFFIC";
})(GraphQLLifecycleStepType || (GraphQLLifecycleStepType = {}));

var GraphQLContentPermissionTargetKind;

(function (GraphQLContentPermissionTargetKind) {
  GraphQLContentPermissionTargetKind["Role"] = "ROLE";
  GraphQLContentPermissionTargetKind["Pat"] = "PAT";
  GraphQLContentPermissionTargetKind["Public"] = "PUBLIC";
})(GraphQLContentPermissionTargetKind || (GraphQLContentPermissionTargetKind = {}));

var GraphQLMigrationStatus;

(function (GraphQLMigrationStatus) {
  GraphQLMigrationStatus["Queued"] = "QUEUED";
  GraphQLMigrationStatus["Running"] = "RUNNING";
  GraphQLMigrationStatus["Success"] = "SUCCESS";
  GraphQLMigrationStatus["Timeout"] = "TIMEOUT";
  GraphQLMigrationStatus["Failed"] = "FAILED";
})(GraphQLMigrationStatus || (GraphQLMigrationStatus = {}));

var GraphQLRemote_Graphql_Type;

(function (GraphQLRemote_Graphql_Type) {
  GraphQLRemote_Graphql_Type["Scalar"] = "SCALAR";
  GraphQLRemote_Graphql_Type["Object"] = "OBJECT";
  GraphQLRemote_Graphql_Type["Interface"] = "INTERFACE";
  GraphQLRemote_Graphql_Type["Union"] = "UNION";
  GraphQLRemote_Graphql_Type["Enum"] = "ENUM";
  GraphQLRemote_Graphql_Type["InputObject"] = "INPUT_OBJECT";
})(GraphQLRemote_Graphql_Type || (GraphQLRemote_Graphql_Type = {}));

var GraphQLIntegration_Provider;

(function (GraphQLIntegration_Provider) {
  GraphQLIntegration_Provider["Netlify"] = "NETLIFY";
  GraphQLIntegration_Provider["Vercel"] = "VERCEL";
  GraphQLIntegration_Provider["GatsbyCloud"] = "GATSBY_CLOUD";
})(GraphQLIntegration_Provider || (GraphQLIntegration_Provider = {}));

var GraphQLColorPalette;

(function (GraphQLColorPalette) {
  GraphQLColorPalette["Pink"] = "PINK";
  GraphQLColorPalette["Purple"] = "PURPLE";
  GraphQLColorPalette["Orange"] = "ORANGE";
  GraphQLColorPalette["Red"] = "RED";
  GraphQLColorPalette["Brown"] = "BROWN";
  GraphQLColorPalette["Teal"] = "TEAL";
  GraphQLColorPalette["Green"] = "GREEN";
  GraphQLColorPalette["Yellow"] = "YELLOW";
})(GraphQLColorPalette || (GraphQLColorPalette = {}));

var GraphQLTrackEvent;

(function (GraphQLTrackEvent) {
  GraphQLTrackEvent["CreatedContent"] = "CREATED_CONTENT";
  GraphQLTrackEvent["UsedPlayground"] = "USED_PLAYGROUND";
  GraphQLTrackEvent["CheckedQuickstart"] = "CHECKED_QUICKSTART";
})(GraphQLTrackEvent || (GraphQLTrackEvent = {}));

var GraphQLProfileJobRole;

(function (GraphQLProfileJobRole) {
  GraphQLProfileJobRole["DeveloperEngineering"] = "DEVELOPER_ENGINEERING";
  GraphQLProfileJobRole["EditorialContent"] = "EDITORIAL_CONTENT";
  GraphQLProfileJobRole["Management"] = "MANAGEMENT";
  GraphQLProfileJobRole["Procurement"] = "PROCUREMENT";
  GraphQLProfileJobRole["ProductManagement"] = "PRODUCT_MANAGEMENT";
  GraphQLProfileJobRole["ProjectManagement"] = "PROJECT_MANAGEMENT";
  GraphQLProfileJobRole["Sales"] = "SALES";
  GraphQLProfileJobRole["SecurityLegal"] = "SECURITY_LEGAL";
  GraphQLProfileJobRole["Other"] = "OTHER";
})(GraphQLProfileJobRole || (GraphQLProfileJobRole = {}));

var GraphQLViewGroupType;

(function (GraphQLViewGroupType) {
  GraphQLViewGroupType["Custom"] = "CUSTOM";
  GraphQLViewGroupType["System"] = "SYSTEM";
  GraphQLViewGroupType["UserCreated"] = "USER_CREATED";
})(GraphQLViewGroupType || (GraphQLViewGroupType = {}));

var GraphQLViewGroupContentType;

(function (GraphQLViewGroupContentType) {
  GraphQLViewGroupContentType["Default"] = "DEFAULT";
  GraphQLViewGroupContentType["Asset"] = "ASSET";
})(GraphQLViewGroupContentType || (GraphQLViewGroupContentType = {}));

var GraphQLWebhookTriggerSource;

(function (GraphQLWebhookTriggerSource) {
  GraphQLWebhookTriggerSource["Pat"] = "PAT";
  GraphQLWebhookTriggerSource["Member"] = "MEMBER";
  GraphQLWebhookTriggerSource["Public"] = "PUBLIC";
})(GraphQLWebhookTriggerSource || (GraphQLWebhookTriggerSource = {}));

var GraphQLWebhookLogOrderByInput;

(function (GraphQLWebhookLogOrderByInput) {
  GraphQLWebhookLogOrderByInput["CalledAtAsc"] = "calledAt_ASC";
  GraphQLWebhookLogOrderByInput["CalledAtDesc"] = "calledAt_DESC";
})(GraphQLWebhookLogOrderByInput || (GraphQLWebhookLogOrderByInput = {}));
/** Defines the type of the trigger */


var GraphQLWebhookTriggerType;

(function (GraphQLWebhookTriggerType) {
  GraphQLWebhookTriggerType["ContentModel"] = "CONTENT_MODEL";
})(GraphQLWebhookTriggerType || (GraphQLWebhookTriggerType = {}));
/**
 * Defines which operation will trigger the webhook.
 * Some operations rely on the type of stage. E.g. on a
 * publishing stage, the webhook will only be triggered for
 * PUBLISH and UNPUBLISH events. On other stages, only
 * CREATE, UPDATE and DELETE are triggering the webhook.
 */


var GraphQLWebhookTriggerAction;

(function (GraphQLWebhookTriggerAction) {
  GraphQLWebhookTriggerAction["Create"] = "CREATE";
  GraphQLWebhookTriggerAction["Update"] = "UPDATE";
  GraphQLWebhookTriggerAction["Delete"] = "DELETE";
  GraphQLWebhookTriggerAction["Publish"] = "PUBLISH";
  GraphQLWebhookTriggerAction["Unpublish"] = "UNPUBLISH";
})(GraphQLWebhookTriggerAction || (GraphQLWebhookTriggerAction = {}));

var GraphQLAvailableExtensionSrcType;

(function (GraphQLAvailableExtensionSrcType) {
  GraphQLAvailableExtensionSrcType["Inline"] = "INLINE";
  GraphQLAvailableExtensionSrcType["Sdk"] = "SDK";
})(GraphQLAvailableExtensionSrcType || (GraphQLAvailableExtensionSrcType = {}));

var GraphQLAvailableExtensionPermissionAction;

(function (GraphQLAvailableExtensionPermissionAction) {
  GraphQLAvailableExtensionPermissionAction["Input"] = "INPUT";
  GraphQLAvailableExtensionPermissionAction["Form"] = "FORM";
  GraphQLAvailableExtensionPermissionAction["Api"] = "API";
})(GraphQLAvailableExtensionPermissionAction || (GraphQLAvailableExtensionPermissionAction = {}));

var GraphQLExtensionFieldType;

(function (GraphQLExtensionFieldType) {
  GraphQLExtensionFieldType["Id"] = "ID";
  GraphQLExtensionFieldType["String"] = "STRING";
  GraphQLExtensionFieldType["Richtext"] = "RICHTEXT";
  GraphQLExtensionFieldType["Int"] = "INT";
  GraphQLExtensionFieldType["Float"] = "FLOAT";
  GraphQLExtensionFieldType["Boolean"] = "BOOLEAN";
  GraphQLExtensionFieldType["Json"] = "JSON";
  GraphQLExtensionFieldType["Datetime"] = "DATETIME";
  GraphQLExtensionFieldType["Date"] = "DATE";
  GraphQLExtensionFieldType["Location"] = "LOCATION";
  GraphQLExtensionFieldType["Color"] = "COLOR";
  GraphQLExtensionFieldType["Graphql"] = "GRAPHQL";
  GraphQLExtensionFieldType["Rest"] = "REST";
  GraphQLExtensionFieldType["Enumeration"] = "ENUMERATION";
  GraphQLExtensionFieldType["Relation"] = "RELATION";
  GraphQLExtensionFieldType["Asset"] = "ASSET";
  GraphQLExtensionFieldType["Union"] = "UNION";
})(GraphQLExtensionFieldType || (GraphQLExtensionFieldType = {}));
/** ### APP: */


var GraphQLAppPublicationStatus;

(function (GraphQLAppPublicationStatus) {
  GraphQLAppPublicationStatus["Private"] = "PRIVATE";
  GraphQLAppPublicationStatus["Pending"] = "PENDING";
  GraphQLAppPublicationStatus["Public"] = "PUBLIC";
})(GraphQLAppPublicationStatus || (GraphQLAppPublicationStatus = {}));

var GraphQLAppElementType;

(function (GraphQLAppElementType) {
  GraphQLAppElementType["Field"] = "field";
  GraphQLAppElementType["FormSidebar"] = "formSidebar";
  GraphQLAppElementType["Page"] = "page";
})(GraphQLAppElementType || (GraphQLAppElementType = {}));

var GraphQLFieldAppElementFeature;

(function (GraphQLFieldAppElementFeature) {
  GraphQLFieldAppElementFeature["FieldRenderer"] = "FieldRenderer";
  GraphQLFieldAppElementFeature["ListRenderer"] = "ListRenderer";
  GraphQLFieldAppElementFeature["TableRenderer"] = "TableRenderer";
})(GraphQLFieldAppElementFeature || (GraphQLFieldAppElementFeature = {}));

var GraphQLAppInstallationStatus;

(function (GraphQLAppInstallationStatus) {
  GraphQLAppInstallationStatus["Pending"] = "PENDING";
  GraphQLAppInstallationStatus["Completed"] = "COMPLETED";
  GraphQLAppInstallationStatus["Disabled"] = "DISABLED";
})(GraphQLAppInstallationStatus || (GraphQLAppInstallationStatus = {}));
/** Field types */


var GraphQLSimpleFieldType;

(function (GraphQLSimpleFieldType) {
  GraphQLSimpleFieldType["Id"] = "ID";
  GraphQLSimpleFieldType["String"] = "STRING";
  GraphQLSimpleFieldType["Richtext"] = "RICHTEXT";
  GraphQLSimpleFieldType["Int"] = "INT";
  GraphQLSimpleFieldType["Float"] = "FLOAT";
  GraphQLSimpleFieldType["Boolean"] = "BOOLEAN";
  GraphQLSimpleFieldType["Json"] = "JSON";
  GraphQLSimpleFieldType["Datetime"] = "DATETIME";
  GraphQLSimpleFieldType["Date"] = "DATE";
  GraphQLSimpleFieldType["Location"] = "LOCATION";
  GraphQLSimpleFieldType["Color"] = "COLOR";
})(GraphQLSimpleFieldType || (GraphQLSimpleFieldType = {}));

var GraphQLRemoteFieldType;

(function (GraphQLRemoteFieldType) {
  GraphQLRemoteFieldType["Graphql"] = "GRAPHQL";
  GraphQLRemoteFieldType["Rest"] = "REST";
})(GraphQLRemoteFieldType || (GraphQLRemoteFieldType = {}));

var GraphQLRemoteFieldApiMethod;

(function (GraphQLRemoteFieldApiMethod) {
  GraphQLRemoteFieldApiMethod["Get"] = "GET";
  GraphQLRemoteFieldApiMethod["Post"] = "POST";
})(GraphQLRemoteFieldApiMethod || (GraphQLRemoteFieldApiMethod = {}));

var GraphQLGraphQlRemoteSourceIntrospectionMethod;

(function (GraphQLGraphQlRemoteSourceIntrospectionMethod) {
  GraphQLGraphQlRemoteSourceIntrospectionMethod["Get"] = "GET";
  GraphQLGraphQlRemoteSourceIntrospectionMethod["Post"] = "POST";
})(GraphQLGraphQlRemoteSourceIntrospectionMethod || (GraphQLGraphQlRemoteSourceIntrospectionMethod = {}));

var GraphQLEnumerableFieldType;

(function (GraphQLEnumerableFieldType) {
  GraphQLEnumerableFieldType["Enumeration"] = "ENUMERATION";
})(GraphQLEnumerableFieldType || (GraphQLEnumerableFieldType = {}));

var GraphQLRelationalFieldType;

(function (GraphQLRelationalFieldType) {
  GraphQLRelationalFieldType["Relation"] = "RELATION";
  GraphQLRelationalFieldType["Asset"] = "ASSET";
})(GraphQLRelationalFieldType || (GraphQLRelationalFieldType = {}));

var GraphQLComponentFieldType;

(function (GraphQLComponentFieldType) {
  GraphQLComponentFieldType["Component"] = "COMPONENT";
})(GraphQLComponentFieldType || (GraphQLComponentFieldType = {}));

var GraphQLUnionFieldType;

(function (GraphQLUnionFieldType) {
  GraphQLUnionFieldType["Union"] = "UNION";
})(GraphQLUnionFieldType || (GraphQLUnionFieldType = {}));

var GraphQLComponentUnionFieldType;

(function (GraphQLComponentUnionFieldType) {
  GraphQLComponentUnionFieldType["ComponentUnion"] = "COMPONENT_UNION";
})(GraphQLComponentUnionFieldType || (GraphQLComponentUnionFieldType = {}));

var GraphQLVisibilityTypes;

(function (GraphQLVisibilityTypes) {
  /** Field can be read and edited */
  GraphQLVisibilityTypes["ReadWrite"] = "READ_WRITE";
  /** Field is shown but can't be edited in the UI, only through the API */

  GraphQLVisibilityTypes["ReadOnly"] = "READ_ONLY";
  /** Field is not shown, but can be used by other fields such as slugs or UI Extensions */

  GraphQLVisibilityTypes["Hidden"] = "HIDDEN";
  /** Field is not shown, and can only be read or edited through the API */

  GraphQLVisibilityTypes["ApiOnly"] = "API_ONLY";
})(GraphQLVisibilityTypes || (GraphQLVisibilityTypes = {}));

var GraphQLSystemSidebarElementType;

(function (GraphQLSystemSidebarElementType) {
  GraphQLSystemSidebarElementType["Information"] = "INFORMATION";
  GraphQLSystemSidebarElementType["Stages"] = "STAGES";
  GraphQLSystemSidebarElementType["Localizations"] = "LOCALIZATIONS";
  GraphQLSystemSidebarElementType["Versions"] = "VERSIONS";
  GraphQLSystemSidebarElementType["PreviewUrls"] = "PREVIEW_URLS";
  GraphQLSystemSidebarElementType["Releases"] = "RELEASES";
})(GraphQLSystemSidebarElementType || (GraphQLSystemSidebarElementType = {}));

var GraphQLRemoteSourceType;

(function (GraphQLRemoteSourceType) {
  GraphQLRemoteSourceType["Graphql"] = "GRAPHQL";
  GraphQLRemoteSourceType["Rest"] = "REST";
})(GraphQLRemoteSourceType || (GraphQLRemoteSourceType = {}));

var GraphQLMigrationOperationType;

(function (GraphQLMigrationOperationType) {
  GraphQLMigrationOperationType["CreateProjectFromTemplate"] = "CREATE_PROJECT_FROM_TEMPLATE";
  GraphQLMigrationOperationType["CreateEnvironment"] = "CREATE_ENVIRONMENT";
  GraphQLMigrationOperationType["Batch"] = "BATCH";
  GraphQLMigrationOperationType["CreateStage"] = "CREATE_STAGE";
  GraphQLMigrationOperationType["UpdateStage"] = "UPDATE_STAGE";
  GraphQLMigrationOperationType["DeleteStage"] = "DELETE_STAGE";
  GraphQLMigrationOperationType["CreateLocale"] = "CREATE_LOCALE";
  GraphQLMigrationOperationType["UpdateLocale"] = "UPDATE_LOCALE";
  GraphQLMigrationOperationType["DeleteLocale"] = "DELETE_LOCALE";
  GraphQLMigrationOperationType["CreateModel"] = "CREATE_MODEL";
  GraphQLMigrationOperationType["UpdateModel"] = "UPDATE_MODEL";
  GraphQLMigrationOperationType["DeleteModel"] = "DELETE_MODEL";
  GraphQLMigrationOperationType["CreateRemoteTypeDefinition"] = "CREATE_REMOTE_TYPE_DEFINITION";
  GraphQLMigrationOperationType["UpdateRemoteTypeDefinition"] = "UPDATE_REMOTE_TYPE_DEFINITION";
  GraphQLMigrationOperationType["DeleteRemoteTypeDefinition"] = "DELETE_REMOTE_TYPE_DEFINITION";
  GraphQLMigrationOperationType["CreateEnumeration"] = "CREATE_ENUMERATION";
  GraphQLMigrationOperationType["UpdateEnumeration"] = "UPDATE_ENUMERATION";
  GraphQLMigrationOperationType["DeleteEnumeration"] = "DELETE_ENUMERATION";
  GraphQLMigrationOperationType["CreateSimpleField"] = "CREATE_SIMPLE_FIELD";
  GraphQLMigrationOperationType["CreateEnumerableField"] = "CREATE_ENUMERABLE_FIELD";
  GraphQLMigrationOperationType["CreateRelationalField"] = "CREATE_RELATIONAL_FIELD";
  GraphQLMigrationOperationType["CreateUnionField"] = "CREATE_UNION_FIELD";
  GraphQLMigrationOperationType["CreateRemoteField"] = "CREATE_REMOTE_FIELD";
  GraphQLMigrationOperationType["UpdateSimpleField"] = "UPDATE_SIMPLE_FIELD";
  GraphQLMigrationOperationType["UpdateEnumerableField"] = "UPDATE_ENUMERABLE_FIELD";
  GraphQLMigrationOperationType["UpdateRelationalField"] = "UPDATE_RELATIONAL_FIELD";
  GraphQLMigrationOperationType["UpdateUnionField"] = "UPDATE_UNION_FIELD";
  GraphQLMigrationOperationType["DeleteField"] = "DELETE_FIELD";
})(GraphQLMigrationOperationType || (GraphQLMigrationOperationType = {}));

var GraphQLNetlifyBuildState;

(function (GraphQLNetlifyBuildState) {
  GraphQLNetlifyBuildState["Ready"] = "READY";
  GraphQLNetlifyBuildState["Preparing"] = "PREPARING";
  GraphQLNetlifyBuildState["Building"] = "BUILDING";
  GraphQLNetlifyBuildState["Failed"] = "FAILED";
})(GraphQLNetlifyBuildState || (GraphQLNetlifyBuildState = {}));

var GraphQLVercelBuildState;

(function (GraphQLVercelBuildState) {
  GraphQLVercelBuildState["Ready"] = "READY";
  GraphQLVercelBuildState["Preparing"] = "PREPARING";
  GraphQLVercelBuildState["Building"] = "BUILDING";
  GraphQLVercelBuildState["Failed"] = "FAILED";
})(GraphQLVercelBuildState || (GraphQLVercelBuildState = {}));

/**
 * @ignore
 */

var ModelClass = /*#__PURE__*/function () {
  function ModelClass(listener, mode, args) {
    this.listener = listener;
    this.mode = mode;
    this.args = args;
  }

  var _proto = ModelClass.prototype;

  _proto.addSimpleField = function addSimpleField(passedFieldArgs) {
    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.modelApiId = this.args.apiId;

    if (fieldArgs.type === GraphQLSimpleFieldType.String) {
      fieldArgs.formRenderer = fieldArgs.formRenderer || exports.Renderer.SingleLine;
    }

    if (fieldArgs.validations) {
      fieldArgs.validations = extractFieldValidations(fieldArgs);
    }

    var field = new Field(fieldArgs, MutationMode.Create);
    this.listener.registerChange(field);
    return this;
  };

  _proto.updateSimpleField = function updateSimpleField(passedFieldArgs) {
    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.modelApiId = this.args.apiId;

    if (fieldArgs.validations) {
      fieldArgs.validations = extractFieldValidations(fieldArgs);
    }

    var fieldChanges = _objectWithoutPropertiesLoose(fieldArgs, ["type"]);

    var field = new Field(fieldChanges, MutationMode.Update);
    this.listener.registerChange(field);
    return this;
  };

  _proto.addRelationalField = function addRelationalField(passedFieldArgs) {
    var _fieldArgs$type, _fieldArgs$model;

    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.modelApiId = this.args.apiId;
    var fieldTypeUpper = (_fieldArgs$type = fieldArgs.type) == null ? void 0 : _fieldArgs$type.toUpperCase();
    var fieldModelUpper = (_fieldArgs$model = fieldArgs.model) == null ? void 0 : _fieldArgs$model.toUpperCase();

    if (fieldTypeUpper === GraphQLRelationalFieldType.Asset || fieldModelUpper === GraphQLRelationalFieldType.Asset) {
      fieldArgs.type = GraphQLRelationalFieldType.Asset;
    } else {
      fieldArgs.type = GraphQLRelationalFieldType.Relation;
    }

    if (!fieldArgs.reverseField) {
      fieldArgs.reverseField = {
        apiId: "related" + fieldArgs.modelApiId,
        displayName: "Related " + fieldArgs.modelApiId
      };
    }

    fieldArgs.reverseField.modelApiId = fieldArgs.model;
    fieldArgs.isList = fieldArgs.relationType === exports.RelationType.OneToMany || fieldArgs.relationType === exports.RelationType.ManyToMany;
    fieldArgs.reverseField.isList = fieldArgs.relationType === exports.RelationType.ManyToOne || fieldArgs.relationType === exports.RelationType.ManyToMany;

    if (fieldArgs.type === GraphQLRelationalFieldType.Asset) {
      // Asset needs the isRequired field
      if (fieldArgs.isRequired === undefined) {
        fieldArgs.isRequired = false;
      } // asset needs reverse field to be list


      fieldArgs.reverseField.isList = true; // asset needs reverse field to be hidden;

      fieldArgs.reverseField.isHidden = true;
    } else {
      // we have to drop them on relation fields:
      delete fieldArgs.isRequired;
    } // remove convenience fields


    delete fieldArgs.model;
    delete fieldArgs.relationType;
    var field = new Field(fieldArgs, MutationMode.Create, FieldType.RelationalField);
    this.listener.registerChange(field);
    return this;
  };

  _proto.addUnionField = function addUnionField(passedFieldArgs) {
    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.modelApiId = this.args.apiId;

    if (!fieldArgs.models || fieldArgs.models.length === 0) {
      throw new Error("models cannot be empty");
    }

    if (!fieldArgs.reverseField) {
      fieldArgs.reverseField = {
        apiId: "related" + fieldArgs.modelApiId,
        displayName: "Related " + fieldArgs.modelApiId
      };
    }

    fieldArgs.reverseField.modelApiIds = fieldArgs.models;
    fieldArgs.isList = fieldArgs.relationType === exports.RelationType.OneToMany || fieldArgs.relationType === exports.RelationType.ManyToMany;
    fieldArgs.reverseField.isList = fieldArgs.relationType === exports.RelationType.ManyToOne || fieldArgs.relationType === exports.RelationType.ManyToMany; // remove convenience fields

    delete fieldArgs.models;
    delete fieldArgs.relationType;
    var field = new Field(fieldArgs, MutationMode.Create, FieldType.UnionField);
    this.listener.registerChange(field);
    return this;
  };

  _proto.updateRelationalField = function updateRelationalField(passedFieldArgs) {
    var _fieldArgs$modelApiId;

    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.modelApiId = this.args.apiId;
    fieldArgs.reverseField = passedFieldArgs == null ? void 0 : passedFieldArgs.reverseField;

    if (((_fieldArgs$modelApiId = fieldArgs.modelApiId) == null ? void 0 : _fieldArgs$modelApiId.toUpperCase()) === GraphQLRelationalFieldType.Asset && fieldArgs.isRequired !== undefined) {
      fieldArgs.isRequired = Boolean(fieldArgs.isRequired);
    }

    var field = new Field(fieldArgs, MutationMode.Update, FieldType.RelationalField);
    this.listener.registerChange(field);
    return this;
  };

  _proto.updateUnionField = function updateUnionField(passedFieldArgs) {
    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.modelApiId = this.args.apiId;
    fieldArgs.reverseField = _extends({}, passedFieldArgs == null ? void 0 : passedFieldArgs.reverseField, {
      modelApiIds: fieldArgs.models
    }); // remove convenience field

    delete fieldArgs.models;
    var field = new Field(fieldArgs, MutationMode.Update, FieldType.UnionField);
    this.listener.registerChange(field);
    return this;
  };

  _proto.addEnumerableField = function addEnumerableField(passedFieldArgs) {
    var fieldArgs = _extends({}, passedFieldArgs);

    if (!fieldArgs.enumerationApiId) {
      throw new Error("enumerationApiId is required for enumerable field");
    }

    fieldArgs.modelApiId = this.args.apiId;
    var field = new Field(fieldArgs, MutationMode.Create, FieldType.EnumerableField);
    this.listener.registerChange(field);
    return this;
  };

  _proto.updateEnumerableField = function updateEnumerableField(passedFieldArgs) {
    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.modelApiId = this.args.apiId;
    var field = new Field(fieldArgs, MutationMode.Update, FieldType.EnumerableField);
    this.listener.registerChange(field);
    return this;
  };

  _proto.addRemoteField = function addRemoteField(passedFieldArgs) {
    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.parentApiId = this.args.apiId;
    var field = new Field(fieldArgs, MutationMode.Create, FieldType.RemoteField);
    this.listener.registerChange(field);
    return this;
  };

  _proto.updateRemoteField = function updateRemoteField(passedFieldArgs) {
    var fieldArgs = _extends({}, passedFieldArgs);

    fieldArgs.parentApiId = this.args.apiId;
    var field = new Field(fieldArgs, MutationMode.Update, FieldType.RemoteField);
    this.listener.registerChange(field);
    return this;
  };

  _proto.deleteField = function deleteField(apiId) {
    var field = new Field({
      apiId: apiId,
      modelApiId: this.args.apiId
    }, MutationMode.Delete);
    this.listener.registerChange(field);
    return this;
  };

  _proto.hasChanges = function hasChanges() {
    // all modes are guaranteed to have changes except Update.
    if (this.mode !== MutationMode.Update) {
      return true;
    } // apiId is always a requirement, length of 1 means its apiId only.


    return Object.keys(this.args).length > 1;
  };

  _proto.generateChange = function generateChange() {
    var action;

    switch (this.mode) {
      case MutationMode.Create:
        action = "createModel";
        break;

      case MutationMode.Update:
        action = "updateModel";
        break;

      case MutationMode.Delete:
        action = "deleteModel";
        break;
    }

    var change = {};
    change[action] = this.args;
    return change;
  };

  return ModelClass;
}();
/**
 * @ignore
 * @param fieldArgs
 */


function extractFieldValidations(fieldArgs) {
  var _fieldArgs$validation, _fieldArgs$validation3, _fieldArgs$validation5, _fieldArgs$validation6, _fieldArgs$validation7;

  var validations = {};

  switch (fieldArgs.type) {
    case GraphQLSimpleFieldType.Int:
      validations.Int = {
        range: (_fieldArgs$validation = fieldArgs.validations) == null ? void 0 : _fieldArgs$validation.range
      };

      if (fieldArgs.isList) {
        var _fieldArgs$validation2;

        validations.Int.listItemCount = (_fieldArgs$validation2 = fieldArgs.validations) == null ? void 0 : _fieldArgs$validation2.listItemCount;
      }

      break;

    case GraphQLSimpleFieldType.Float:
      validations.Float = {
        range: (_fieldArgs$validation3 = fieldArgs.validations) == null ? void 0 : _fieldArgs$validation3.range
      };

      if (fieldArgs.isList) {
        var _fieldArgs$validation4;

        validations.Float.listItemCount = (_fieldArgs$validation4 = fieldArgs.validations) == null ? void 0 : _fieldArgs$validation4.listItemCount;
      }

      break;

    case GraphQLSimpleFieldType.String:
      validations.String = {
        characters: (_fieldArgs$validation5 = fieldArgs.validations) == null ? void 0 : _fieldArgs$validation5.characters,
        matches: (_fieldArgs$validation6 = fieldArgs.validations) == null ? void 0 : _fieldArgs$validation6.matches,
        notMatches: (_fieldArgs$validation7 = fieldArgs.validations) == null ? void 0 : _fieldArgs$validation7.notMatches
      };

      if (fieldArgs.isList) {
        var _fieldArgs$validation8;

        validations.String.listItemCount = (_fieldArgs$validation8 = fieldArgs.validations) == null ? void 0 : _fieldArgs$validation8.listItemCount;
      }

      break;

    default:
      throw new Error("field validations not supported for " + fieldArgs.type);
  }

  return validations;
}

/**
 * @ignore
 */

var EnumerationClass = /*#__PURE__*/function () {
  function EnumerationClass(mode, args) {
    this.mode = mode;
    this.args = args;
  }

  var _proto = EnumerationClass.prototype;

  _proto.addValue = function addValue() {
    for (var _len = arguments.length, apiIds = new Array(_len), _key = 0; _key < _len; _key++) {
      apiIds[_key] = arguments[_key];
    }

    var values = apiIds.map(function (apiId) {
      return {
        apiId: apiId,
        displayName: apiId
      };
    });

    if (this.mode === MutationMode.Update) {
      var _args$valuesToCreate;

      var args = this.args;
      args.valuesToCreate = args.valuesToCreate || [];

      (_args$valuesToCreate = args.valuesToCreate).push.apply(_args$valuesToCreate, values);
    } else {
      var _args$values;

      var _args = this.args;
      _args.values = _args.values || [];

      (_args$values = _args.values).push.apply(_args$values, values);
    }
  };

  _proto.updateValue = function updateValue(apiId, newApiId) {
    var args = this.args;
    args.valuesToUpdate = args.valuesToUpdate || [];
    args.valuesToUpdate.push({
      apiId: apiId,
      newApiId: newApiId,
      displayName: newApiId || apiId
    });
    return this;
  };

  _proto.deleteValue = function deleteValue() {
    var _args$valuesToDelete;

    var args = this.args;
    args.valuesToDelete = args.valuesToDelete || [];

    (_args$valuesToDelete = args.valuesToDelete).push.apply(_args$valuesToDelete, arguments);
  };

  _proto.generateChange = function generateChange() {
    if (this.mode === MutationMode.Create) {
      var args = this.args;

      if (!args.values || args.values.length === 0) {
        throw new Error("enumeration must have values");
      }
    }

    var action;

    switch (this.mode) {
      case MutationMode.Create:
        action = "createEnumeration";
        break;

      case MutationMode.Update:
        action = "updateEnumeration";
        break;

      case MutationMode.Delete:
        action = "deleteEnumeration";
        break;
    }

    var change = {};
    change[action] = this.args;
    return change;
  };

  return EnumerationClass;
}();

/**
 * @ignore
 */

var StageClass = /*#__PURE__*/function () {
  function StageClass(mode, args) {
    this.mode = mode;
    this.args = args;
  }

  var _proto = StageClass.prototype;

  _proto.hasChanges = function hasChanges() {
    // all modes are guaranteed to have changes except Update.
    if (this.mode !== MutationMode.Update) {
      return true;
    } // apiId is always a requirement, length of 1 means its apiId only.


    if (Object.keys(this.args).length > 1) {
      return true;
    }

    return false;
  };

  _proto.generateChange = function generateChange() {
    var action;

    switch (this.mode) {
      case MutationMode.Create:
        action = "createStage";
        break;

      case MutationMode.Update:
        action = "updateStage";
        break;

      case MutationMode.Delete:
        action = "deleteStage";
        break;
    }

    var change = {};
    change[action] = this.args;
    return change;
  };

  return StageClass;
}();

/**
 * @ignore
 */

var LocaleClass = /*#__PURE__*/function () {
  function LocaleClass(mode, args) {
    this.mode = mode;
    this.args = args;
  }

  var _proto = LocaleClass.prototype;

  _proto.hasChanges = function hasChanges() {
    // all modes are guaranteed to have changes except Update.
    if (this.mode !== MutationMode.Update) {
      return true;
    } // apiId is always a requirement, length of 1 means its apiId only.


    if (Object.keys(this.args).length > 1) {
      return true;
    }

    return false;
  };

  _proto.generateChange = function generateChange() {
    var action;

    switch (this.mode) {
      case MutationMode.Create:
        action = "createLocale";
        break;

      case MutationMode.Update:
        action = "updateLocale";
        break;

      case MutationMode.Delete:
        action = "deleteLocale";
        break;
    }

    var change = {};
    change[action] = this.args;
    return change;
  };

  return LocaleClass;
}();

/**
 * @ignore
 */

var RemoteSourceClass = /*#__PURE__*/function () {
  function RemoteSourceClass(mode, sourceType, args) {
    this.mode = mode;
    this.sourceType = sourceType;
    this.args = args;
  }

  var _proto = RemoteSourceClass.prototype;

  _proto.hasChanges = function hasChanges() {
    // all modes are guaranteed to have changes except Update.
    if (this.mode !== MutationMode.Update) {
      return true;
    } // apiId is always a requirement, length of 1 means its apiId only.


    if (Object.keys(this.args).length > 1) {
      return true;
    }

    return false;
  };

  _proto.generateChange = function generateChange() {
    var action;

    switch (this.mode) {
      case MutationMode.Create:
        action = this.sourceType === "GQL" ? "createGraphQLRemoteSource" : "createRESTRemoteSource";
        break;

      case MutationMode.Update:
        action = this.sourceType === "GQL" ? "updateGraphQLRemoteSource" : "updateRESTRemoteSource";
        break;

      case MutationMode.Delete:
        action = "deleteRemoteSource";
        break;
    }

    var change = {};
    change[action] = this.args;
    return change;
  };

  return RemoteSourceClass;
}();

/**
 * @ignore
 */

var endpoint = process.env.GRAPHCMS_GRAPHQL_ENDPOINT || "https://management-next.graphcms.com/graphql";
/**
 * @ignore
 */

var MigrationClass = /*#__PURE__*/function () {
  function MigrationClass(config) {
    this.changeItems = [];
    this.migrated = false;
    this.config = config;
  }

  var _proto = MigrationClass.prototype;

  _proto.prepare = /*#__PURE__*/function () {
    var _prepare = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.client = new graphqlRequest.GraphQLClient(endpoint, {
                headers: {
                  authorization: "Bearer " + this.config.authToken,
                  "apollographql-client-name": "management-sdk"
                }
              });
              _context.next = 3;
              return fetchEnvironment(this.client, this.config.endpoint);

            case 3:
              this.environment = _context.sent;

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function prepare() {
      return _prepare.apply(this, arguments);
    }

    return prepare;
  }();

  _proto.model = function model(apiId) {
    var model = new ModelClass(this, MutationMode.Update, {
      apiId: apiId
    });
    return model;
  };

  _proto.createModel = function createModel(args) {
    var model = new ModelClass(this, MutationMode.Create, args);
    this.registerChange(model);
    return model;
  };

  _proto.updateModel = function updateModel(args) {
    var model = new ModelClass(this, MutationMode.Update, args);
    this.registerChange(model);
    return model;
  };

  _proto.deleteModel = function deleteModel(apiId) {
    var model = new ModelClass(this, MutationMode.Delete, {
      apiId: apiId
    });
    this.registerChange(model);
    return model;
  };

  _proto.createGraphQLRemoteSource = function createGraphQLRemoteSource(args) {
    var remoteSource = new RemoteSourceClass(MutationMode.Create, "GQL", args);
    this.registerChange(remoteSource);
    return remoteSource;
  };

  _proto.updateGraphQLRemoteSource = function updateGraphQLRemoteSource(args) {
    var remoteSource = new RemoteSourceClass(MutationMode.Update, "GQL", args);
    this.registerChange(remoteSource);
    return remoteSource;
  };

  _proto.createRESTRemoteSource = function createRESTRemoteSource(args) {
    var remoteSource = new RemoteSourceClass(MutationMode.Create, "REST", args);
    this.registerChange(remoteSource);
    return remoteSource;
  };

  _proto.updateRESTRemoteSource = function updateRESTRemoteSource(args) {
    var remoteSource = new RemoteSourceClass(MutationMode.Update, "REST", args);
    this.registerChange(remoteSource);
    return remoteSource;
  };

  _proto.deleteRemoteSource = function deleteRemoteSource(args) {
    var remoteSource = new RemoteSourceClass(MutationMode.Delete, "REST", args);
    this.registerChange(remoteSource);
    return remoteSource;
  };

  _proto.createEnumeration = function createEnumeration(args) {
    var enumeration = new EnumerationClass(MutationMode.Create, args);
    this.registerChange(enumeration);
    return enumeration;
  };

  _proto.updateEnumeration = function updateEnumeration(args) {
    var enumeration = new EnumerationClass(MutationMode.Update, args);
    this.registerChange(enumeration);
    return enumeration;
  };

  _proto.deleteEnumeration = function deleteEnumeration(apiId) {
    var enumeration = new EnumerationClass(MutationMode.Delete, {
      apiId: apiId
    });
    this.registerChange(enumeration);
  };

  _proto.createStage = function createStage(args) {
    var stage = new StageClass(MutationMode.Create, args);
    this.registerChange(stage);
    return stage;
  };

  _proto.updateStage = function updateStage(args) {
    var stage = new StageClass(MutationMode.Update, args);
    this.registerChange(stage);
    return stage;
  };

  _proto.deleteStage = function deleteStage(apiId) {
    var stage = new StageClass(MutationMode.Delete, {
      apiId: apiId
    });
    this.registerChange(stage);
    return stage;
  };

  _proto.createLocale = function createLocale(args) {
    var locale = new LocaleClass(MutationMode.Create, args);
    this.registerChange(locale);
    return locale;
  };

  _proto.updateLocale = function updateLocale(args) {
    var locale = new LocaleClass(MutationMode.Update, args);
    this.registerChange(locale);
    return locale;
  };

  _proto.deleteLocale = function deleteLocale(apiId) {
    var locale = new LocaleClass(MutationMode.Delete, {
      apiId: apiId
    });
    this.registerChange(locale);
    return locale;
  };

  _proto.run = /*#__PURE__*/function () {
    var _run = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(foreground) {
      var changes, resp, migration;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.migrated) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", Promise.reject("migration previously done"));

            case 2:
              _context2.next = 4;
              return this.prepare();

            case 4:
              changes = this.generateChanges();
              _context2.next = 7;
              return submitMigration(this.client, {
                environmentId: this.environment.id,
                name: this.config.name,
                changes: changes
              });

            case 7:
              resp = _context2.sent;
              this.migrated = true;

              if (!foreground) {
                _context2.next = 22;
                break;
              }

              _context2.prev = 10;
              _context2.next = 13;
              return this.waitForMigration(resp.id);

            case 13:
              migration = _context2.sent;

              if (!migration.errors) {
                _context2.next = 16;
                break;
              }

              return _context2.abrupt("return", migration);

            case 16:
              return _context2.abrupt("return", _extends({
                name: resp.name
              }, migration));

            case 19:
              _context2.prev = 19;
              _context2.t0 = _context2["catch"](10);
              return _context2.abrupt("return", Promise.reject(_context2.t0));

            case 22:
              return _context2.abrupt("return", resp);

            case 23:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[10, 19]]);
    }));

    function run(_x) {
      return _run.apply(this, arguments);
    }

    return run;
  }();

  _proto.dryRun = function dryRun() {
    return this.generateChanges();
  };

  _proto.waitForMigration = /*#__PURE__*/function () {
    var _waitForMigration = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(migrationId) {
      var migration;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:

              _context3.prev = 1;
              _context3.next = 4;
              return new Promise(function (resolve) {
                return setTimeout(resolve, 1000);
              });

            case 4:
              _context3.next = 6;
              return fetchMigration(this.client, {
                projectId: this.environment.projectId,
                environmentName: this.environment.name,
                migrationId: migrationId
              });

            case 6:
              migration = _context3.sent;

              if (!(migration.status !== GraphQLMigrationStatus.Queued && migration.status !== GraphQLMigrationStatus.Running)) {
                _context3.next = 9;
                break;
              }

              return _context3.abrupt("return", migration);

            case 9:
              _context3.next = 14;
              break;

            case 11:
              _context3.prev = 11;
              _context3.t0 = _context3["catch"](1);
              return _context3.abrupt("return", Promise.reject(_context3.t0));

            case 14:
              _context3.next = 0;
              break;

            case 16:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[1, 11]]);
    }));

    function waitForMigration(_x2) {
      return _waitForMigration.apply(this, arguments);
    }

    return waitForMigration;
  }();

  _proto.generateChanges = function generateChanges() {
    var changes = [];

    for (var _iterator = _createForOfIteratorHelperLoose(this.changeItems), _step; !(_step = _iterator()).done;) {
      var item = _step.value;
      changes.push(item.generateChange());
    }

    return changes;
  };

  _proto.registerChange = function registerChange(change) {
    this.changeItems.push(change);
  };

  return MigrationClass;
}();
/**
 * Create a new migration.
 * @param config the configuration for the migration.
 */


function newMigration(config) {
  return new MigrationClass(config);
}

/**
 * Field types.
 */

var FieldType$1 = GraphQLSimpleFieldType;
var RemoteFieldType = GraphQLRemoteFieldType;
var VisibilityTypes = GraphQLVisibilityTypes;
var RemoteSourceIntrospectionMethod = GraphQLGraphQlRemoteSourceIntrospectionMethod;
var RemoteFieldApiMethod = GraphQLRemoteFieldApiMethod;

exports.FieldType = FieldType$1;
exports.RemoteFieldApiMethod = RemoteFieldApiMethod;
exports.RemoteFieldType = RemoteFieldType;
exports.RemoteSourceIntrospectionMethod = RemoteSourceIntrospectionMethod;
exports.VisibilityTypes = VisibilityTypes;
exports.newMigration = newMigration;
//# sourceMappingURL=management.cjs.development.js.map
