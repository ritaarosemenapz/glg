import { GraphQLClient } from "graphql-request/dist";
import { EnvironmentInfo, MigrationChange, MigrationInfo } from "./migration";
declare type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
/**
 * @ignore
 */
declare enum MutationMode {
    Create = 1,
    Update = 2,
    Delete = 3
}
/**
 * RelationType is the relationship type for Relational and Union Fields.
 */
declare enum RelationType {
    OneToOne = 1,
    OneToMany = 2,
    ManyToOne = 3,
    ManyToMany = 4
}
/**
 * @ignore
 * @param client
 * @param endpoint
 */
declare function fetchEnvironment(client: GraphQLClient, endpoint: string): Promise<EnvironmentInfo>;
/**
 * @ignore
 * @param client
 * @param environmentId
 * @param changes
 */
declare function submitMigration(client: GraphQLClient, body: {
    environmentId: string;
    name?: string;
    changes: MigrationChange[];
}): Promise<{
    id: any;
    status: any;
    name: string;
}>;
/**
 * @ignore
 */
interface FetchMigrationArgs {
    projectId: string;
    migrationId: string;
    environmentName: string;
}
/**
 * @ignore
 * @param client
 * @param args
 */
declare function fetchMigration(client: GraphQLClient, args: FetchMigrationArgs): Promise<MigrationInfo>;
export { PartialBy, MutationMode, RelationType, fetchEnvironment, fetchMigration, FetchMigrationArgs, submitMigration, };
